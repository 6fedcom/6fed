{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/blue.ico","path":"img/blue.ico","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand2.jpg","path":"img/brand2.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand4.jpg","path":"img/brand4.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/green.ico","path":"img/green.ico","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.gif","path":"img/avatar.gif","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/qrcode.png","path":"img/qrcode.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand1.jpg","path":"img/brand1.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1524798020000},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1524798020000},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1524798020000},{"_id":"themes/indigo/_config.yml","hash":"e4be5e48e712ab4709d5035c772df2b79c9af5d2","modified":1538302827771},{"_id":"themes/indigo/package.json","hash":"e08543712692193855eabd130d11c4c8a923cffa","modified":1538297999072},{"_id":"source/_posts/JS 数组克隆方法总结.md","hash":"e9780c11faa0abc7c3fa5742e49256f5286619e8","modified":1537517641372},{"_id":"source/_posts/ES6-基础-【好文分享】.md","hash":"673100b66f2364b714641c54a1275ea603c5442d","modified":1537415185524},{"_id":"source/_posts/React-Js-微信分享封装.md","hash":"1d3ac2d4a922fbe332f6dd88e764ac69a90b0e01","modified":1537517287449},{"_id":"source/_posts/VsCode读取项目文件的Eslint规则-保存时自动修复格式错误.md","hash":"6bad56e7e9e1bf948399a74ef18e1b15b1c7dc1c","modified":1537518571094},{"_id":"source/_posts/NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection.md","hash":"f10355ffc24bbf483600dd2d0ccd1c84d14a1dc5","modified":1537415185524},{"_id":"source/_posts/javascript截取文件名的后缀.md","hash":"4631097ce9c15f8b613e1738bb54e6f0727dcfb8","modified":1537415185524},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1537420546691},{"_id":"source/_posts/reactjs中事件传参-关于event.md","hash":"50a51a4c4c803524ff46f0107f86857382ee0066","modified":1537415185540},{"_id":"source/_posts/使用hexo搭建github-io博客.md","hash":"2be19dfa413cb74431f876b33bcd6864c9410907","modified":1537415185540},{"_id":"source/_posts/redux入门.md","hash":"21e56b17593f4dbf2a7c1b3a21b4d93ef16fa42e","modified":1538135194287},{"_id":"source/_posts/前端周刊-2018年09月第2周.md","hash":"aec83fc342009a264236332626844a13b2f4bf9d","modified":1537518620882},{"_id":"source/_posts/前端周刊-2018年09月第3周.md","hash":"37a3b269d10f994d12b77e3d888868e6caa26f3e","modified":1537518488082},{"_id":"source/_posts/前端开发规范-used-by-frank.md","hash":"a92ed11d6e3a07675d15403c595d430f9c9a2b33","modified":1537518465129},{"_id":"source/_posts/合并数组的相同的key值，并且计算相同key值的个数.md","hash":"689041fea121b5e7c8eba4771a47af1ee26e8ce5","modified":1537415185540},{"_id":"source/_posts/怎么把数组倒置，又不影响原来数组，reverse不行.md","hash":"f9995b1d8b9d36a025ca34eab7e0e7ecffd934dc","modified":1537415185540},{"_id":"source/_posts/移动端限制input框只能输入数字.md","hash":"7f418b575035fdc07697866430a663d0fca49cc2","modified":1537420547021},{"_id":"source/_posts/错误码：events-js-183-throw-er-Unhandled-error-event—解决办法.md","hash":"aff9b1378ae330bf2a35faa636ac5745c63a4523","modified":1537415185540},{"_id":"source/categories/index.md","hash":"1908135136d5b773936a97ba73df4f8c1932d980","modified":1538303355302},{"_id":"source/_posts/前端开发最全面试题.md","hash":"f88134e3476570017ffaaa8e2b14fe1377ae79e5","modified":1538302635659},{"_id":"source/tags/index.md","hash":"92ef332c10ffa5b3e57599b2da54ad8638a34f98","modified":1537414242162},{"_id":"source/share/index.md","hash":"53a13b38c548d312d22a34caff5afc43acb1d1d8","modified":1537415185556},{"_id":"themes/indigo/languages/en.yml","hash":"ac56eb3507060a2dc250932ac24fbad4ad424d17","modified":1538294788848},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1524798020000},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1524798020000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1524798020000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1524798020000},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1524798020000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1524798020000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1524798020000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1524798020000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1524798020000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1524798020000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1524798020000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1524798020000},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1524798020000},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"013b7ae6c71b7266bf795c4a94023e8787b7b617","modified":1538298020680},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"fb7e9f6be38f6c93258d5fd26c36e382305f9f18","modified":1538298727728},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"ebb03e072cdad3c62417787538e3c03b15986e0c","modified":1538302964724},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1524798020000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1524798020000},{"_id":"themes/indigo/source/img/blue.ico","hash":"b799f5387af9f20bae9c241d5e5e53a13552e084","modified":1538299888523},{"_id":"themes/indigo/source/img/brand2.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1538299235380},{"_id":"themes/indigo/source/img/brand4.jpg","hash":"48c0b768df22a1c7df753d64e3e9ef1d01ae6b04","modified":1538299048035},{"_id":"themes/indigo/source/img/green.ico","hash":"b2cd09f7583ca37c16cf13f5f01870e064debaac","modified":1538294025202},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1524798020000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1524798020000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1524798020000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1524798020000},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1524798020000},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1524798020000},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1524798020000},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1524798020000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1524798020000},{"_id":"themes/indigo/source/img/avatar.gif","hash":"25ab2e271f3b01aa3703af1ead7be1a4ebfbaaad","modified":1538294121885},{"_id":"themes/indigo/source/img/qrcode.png","hash":"333eaab42c455c0128a23ecec24f68db3664d7ce","modified":1538298627941},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"dabe1be0a8eaf4683bbe0438eb6b2f6546960cb8","modified":1538298469579},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1524798020000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1524798020000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"dc61e61708dc5b4acb3581dacd9073cbef1c1228","modified":1538300346490},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1524798020000},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1524798020000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"c1c8fe5718e75cbb1a8a0f87d78fa3fda51051c4","modified":1538299239838},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1524798020000},{"_id":"themes/indigo/source/img/brand1.jpg","hash":"47518c7e73f2167c79f1975642d8cdf0d4d8ebdf","modified":1538299222765},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524798020000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1524798020000}],"Category":[{"name":"前端","_id":"cjmoq3q4a0004h4a15sxbfv61"},{"name":"优质文章分享","_id":"cjmoq3q5j000ah4a19dnsqx0k"},{"name":"Hexo教程","_id":"cjmoq3q7y000rh4a1mk875mmv"},{"name":"前端周刊","_id":"cjmoq3q8q0010h4a143rhn81s"}],"Data":[],"Page":[{"title":"categories","date":"2018-08-27T11:47:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-27 19:47:23\ntype: categories\ncomments: false\n---\n","updated":"2018-09-30T10:29:26.379Z","path":"categories/index.html","_id":"cjmoq3q3g0001h4a18onr5wo2","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-27T11:26:57.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-27 19:26:57\nlayout: tags\ncomments: false\n---\n","updated":"2018-09-20T03:30:42.162Z","path":"tags/index.html","_id":"cjmoq3q450003h4a1q6eosrqb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"前端资讯分享","date":"2018-09-04T11:52:49.000Z","layout":"share","_content":"\n \n\n \n","source":"share/index.md","raw":"---\ntitle: 前端资讯分享\ndate: 2018-09-04 19:52:49\nlayout: share\n---\n\n \n\n \n","updated":"2018-09-20T03:46:25.556Z","path":"share/index.html","comments":1,"_id":"cjmoq3q4w0007h4a1vxj1xwwr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS 数组克隆方法总结","date":"2018-09-21T11:22:37.000Z","issues":112,"_content":"\n\n## ES5 方法总结\n#### slice\n```js\nlet arr = [2,4,434,43]\nlet arr1= arr.slice()\narr[0] = 'a'\nconsole.log(arr,arr1) // [ 2, 4, 434, 43 ]\nconsole.log(arr1 === arr) // false\n```\n\n#### 遍历数组   \n\n```js\nArray.prototype.clone = function(){\n    let a=[];\n    for(let i=0,l=this.length;i<l;i++) {\n        a.push(this[i]);\n    }\n    return a;\n}\nlet arr = ['aaa','bbb','ccc','wwwww','ddd']\nlet arr2 = arr.clone()\nconsole.log(arr2)\nconsole.log( arr2 === arr )\n```\n \n#### concat()\n\n```js\nArray.prototype.clone=function(){ \n    return [].concat(this); \n    //或者 return this.concat();\n}\nlet arr = ['aaa','asss']\nlet arr1 = arr.clone()\narr[0] = 123\nconsole.log(arr,arr1)\n```\n## ES6 方法总结\n#### Object.assign() 浅复制，也可以实现数组的克隆\n```js\nlet arr = ['sdsd',123,123,123]\nlet arr1 = []\nObject.assign(arr1,arr)\narr[1] = 'aaaa'\nconsole.log(arr,arr1) // [ 'sdsd', 'aaaa', 123, 123 ] [ 'sdsd', 123, 123, 123 ]\n```\n#### 扩展运算符\n```js\nconst a1 = [1, 2];\n// 写法一\nconst a2 = [...a1];\na1[0] = 'aaa'\nconsole.log(a1,a2)\n```","source":"_posts/JS 数组克隆方法总结.md","raw":"---\ntitle: JS 数组克隆方法总结\ndate: 2018-09-21 19:22:37\ncategories: \"前端\" \nissues: 112\ntags: [js代码片段]\n---\n\n\n## ES5 方法总结\n#### slice\n```js\nlet arr = [2,4,434,43]\nlet arr1= arr.slice()\narr[0] = 'a'\nconsole.log(arr,arr1) // [ 2, 4, 434, 43 ]\nconsole.log(arr1 === arr) // false\n```\n\n#### 遍历数组   \n\n```js\nArray.prototype.clone = function(){\n    let a=[];\n    for(let i=0,l=this.length;i<l;i++) {\n        a.push(this[i]);\n    }\n    return a;\n}\nlet arr = ['aaa','bbb','ccc','wwwww','ddd']\nlet arr2 = arr.clone()\nconsole.log(arr2)\nconsole.log( arr2 === arr )\n```\n \n#### concat()\n\n```js\nArray.prototype.clone=function(){ \n    return [].concat(this); \n    //或者 return this.concat();\n}\nlet arr = ['aaa','asss']\nlet arr1 = arr.clone()\narr[0] = 123\nconsole.log(arr,arr1)\n```\n## ES6 方法总结\n#### Object.assign() 浅复制，也可以实现数组的克隆\n```js\nlet arr = ['sdsd',123,123,123]\nlet arr1 = []\nObject.assign(arr1,arr)\narr[1] = 'aaaa'\nconsole.log(arr,arr1) // [ 'sdsd', 'aaaa', 123, 123 ] [ 'sdsd', 123, 123, 123 ]\n```\n#### 扩展运算符\n```js\nconst a1 = [1, 2];\n// 写法一\nconst a2 = [...a1];\na1[0] = 'aaa'\nconsole.log(a1,a2)\n```","slug":"JS 数组克隆方法总结","published":1,"updated":"2018-09-21T08:14:01.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q2x0000h4a1s8tv156b","content":"<h2 id=\"ES5-方法总结\"><a href=\"#ES5-方法总结\" class=\"headerlink\" title=\"ES5 方法总结\"></a>ES5 方法总结</h2><h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">434</span>,<span class=\"number\">43</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1= arr.slice()</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr1) <span class=\"comment\">// [ 2, 4, 434, 43 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1 === arr) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,l=<span class=\"keyword\">this</span>.length;i&lt;l;i++) &#123;</span><br><span class=\"line\">        a.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'aaa'</span>,<span class=\"string\">'bbb'</span>,<span class=\"string\">'ccc'</span>,<span class=\"string\">'wwwww'</span>,<span class=\"string\">'ddd'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.clone()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr2 === arr )</span><br></pre></td></tr></table></figure>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.clone=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].concat(<span class=\"keyword\">this</span>); </span><br><span class=\"line\">    <span class=\"comment\">//或者 return this.concat();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'aaa'</span>,<span class=\"string\">'asss'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.clone()</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6-方法总结\"><a href=\"#ES6-方法总结\" class=\"headerlink\" title=\"ES6 方法总结\"></a>ES6 方法总结</h2><h4 id=\"Object-assign-浅复制，也可以实现数组的克隆\"><a href=\"#Object-assign-浅复制，也可以实现数组的克隆\" class=\"headerlink\" title=\"Object.assign() 浅复制，也可以实现数组的克隆\"></a>Object.assign() 浅复制，也可以实现数组的克隆</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'sdsd'</span>,<span class=\"number\">123</span>,<span class=\"number\">123</span>,<span class=\"number\">123</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = []</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(arr1,arr)</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"string\">'aaaa'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr1) <span class=\"comment\">// [ 'sdsd', 'aaaa', 123, 123 ] [ 'sdsd', 123, 123, 123 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];</span><br><span class=\"line\">a1[<span class=\"number\">0</span>] = <span class=\"string\">'aaa'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1,a2)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES5-方法总结\"><a href=\"#ES5-方法总结\" class=\"headerlink\" title=\"ES5 方法总结\"></a>ES5 方法总结</h2><h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">434</span>,<span class=\"number\">43</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1= arr.slice()</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr1) <span class=\"comment\">// [ 2, 4, 434, 43 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1 === arr) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,l=<span class=\"keyword\">this</span>.length;i&lt;l;i++) &#123;</span><br><span class=\"line\">        a.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'aaa'</span>,<span class=\"string\">'bbb'</span>,<span class=\"string\">'ccc'</span>,<span class=\"string\">'wwwww'</span>,<span class=\"string\">'ddd'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.clone()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr2 === arr )</span><br></pre></td></tr></table></figure>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.clone=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].concat(<span class=\"keyword\">this</span>); </span><br><span class=\"line\">    <span class=\"comment\">//或者 return this.concat();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'aaa'</span>,<span class=\"string\">'asss'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.clone()</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6-方法总结\"><a href=\"#ES6-方法总结\" class=\"headerlink\" title=\"ES6 方法总结\"></a>ES6 方法总结</h2><h4 id=\"Object-assign-浅复制，也可以实现数组的克隆\"><a href=\"#Object-assign-浅复制，也可以实现数组的克隆\" class=\"headerlink\" title=\"Object.assign() 浅复制，也可以实现数组的克隆\"></a>Object.assign() 浅复制，也可以实现数组的克隆</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'sdsd'</span>,<span class=\"number\">123</span>,<span class=\"number\">123</span>,<span class=\"number\">123</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = []</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(arr1,arr)</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"string\">'aaaa'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr1) <span class=\"comment\">// [ 'sdsd', 'aaaa', 123, 123 ] [ 'sdsd', 123, 123, 123 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];</span><br><span class=\"line\">a1[<span class=\"number\">0</span>] = <span class=\"string\">'aaa'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1,a2)</span><br></pre></td></tr></table></figure>"},{"title":"前端开发周刊-(2018年09月第2周)","date":"2018-09-10T03:48:21.000Z","issues":null,"_content":"\n#### [es6常用基础合集](https://www.jianshu.com/p/cfb0893c34f1)\n\n##### url:https://www.jianshu.com/p/cfb0893c34f1\n\n##### 知识点:\nlet,const \n箭头函数  \n模板字符串  \n解析结构  \n函数默认参数 \n展开运算符 \n对象字面量与class \nPromise\n#### [ES6新特性概览](http://www.cnblogs.com/Wayou/p/es6_new_features.html)\n\n##### url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\n\n##### 知识点:\n箭头操作符\n类的支持\n增强的对象字面量\n字符串模板\n解构\n参数默认值，不定参数，拓展参数\nlet与const 关键字\nfor of 值遍历\niterator, generator\n模块\nMap，Set 和 WeakMap，WeakSet\nProxies\nSymbols\nMath，Number，String，Object 的新API\n#### [透彻掌握Promise的使用，读这篇就够了](https://www.jianshu.com/p/fe5f173276bd)\n##### url：https://www.jianshu.com/p/fe5f173276bd\n##### 知识点：\n实现方法\n1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。 \n2.resolve。成功的执行方法 \n3.reject。失败的执行方法 \n4.catch。失败的捕获。 \n5.then。链式调用下一步。\n原理：\n内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行\n```js\nclass Promise {\n\tresult: any;\n\tcallbacks = [];\n\tfailbacks = [];\n\tconstructor(fn) {\n\t\tfn(this.resolve.bind(this), this.reject.bind(this));\n\t}\n\tresolve(res) {\n\t\tif (this.callbacks.length > 0) this.callbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t}\n\treject(res) {\n\t\tthis.callbacks = [];\n\t\tif (this.failbacks.length > 0) this.failbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t} catch (fn) {\n\t\tthis.failbacks.push(fn);\n\t}\n\tthen(fn) {\n\t\tthis.callbacks.push(fn);\n\t\treturn this;\n\t}\n}\n```\n调用示例：\n```js\nvar a = new Promise(function(resolve, reject) {\n\tsetTimeout(function() {\n\t\tresolve(\"成功\");\n\t}, 1000);\n}).then(function(result, resolve, reject) {\n\tconsole.log(result)\n\treject(\"失败\")\n}).\ncatch (function(err) {\n\tconsole.log(err);\n});\n```\n\nes6写法：\n```js\n//创建promise\nvar promise = new Promise(function(resolve, reject) {\n    // 进行一些异步或耗时操作\n    if ( /*如果成功 */ ) {\n        resolve(\"Stuff worked!\");\n    } else {\n        reject(Error(\"It broke\"));\n    }\n});\n//绑定处理程序\npromise.then(function(result) {\n\t//promise成功的话会执行这里\n    console.log(result); // \"Stuff worked!\"\n}, function(err) {\n\t//promise失败会执行这里\n    console.log(err); // Error: \"It broke\"\n});\n```\n#### 4.[前端算法相关](https://github.com/qianbin01/frontend_train#sort)\n\n##### url:https://github.com/qianbin01/frontend_train#sort\n\n##### 知识点\n\n冒泡排序\n> 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样\n\n快速排序:\n>  1) 首先，在数组中选择一个中间项作为主元\n2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到\n 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作\n3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成\n\n选择排序:\n> 大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)\n\n归并排序:\n> 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)\n归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组\n\n堆排序：\n> 堆排序把数组当中二叉树来排序而得名。\n1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1\n本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个\n\n#### 5.[javaScript常用知识点](https://github.com/qianbin01/frontend_train#javascript)\n\n##### url: https://github.com/qianbin01/frontend_train#javascript\n\n##### 知识点\nmap,reduce,filter的用法\njs数据类型(7种)\n> 1.number;\n2.string;\n3.boolean;\n4.undefined;\n5.null;\n6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。\n7.Object.（包括Object，Array，Function）\n闭包\n```js\nfunction foo(x) {\n    var tmp = 3;\n    return function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nvar bar = foo(2); // bar 现在是一个闭包\nbar(10);\n```\n结果是16\nes6通常用let const块级作用域代替，\n闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题\n\n什么是立即执行函数？使用立即执行函数的目的是什么？\n```js\n//常见两种方式\n1.(function(){...})()\n  (function(x){\n\t  console.log(x);\n  })(12345)\n2.(function(){...}())\n  (function(x){\n\t  console.log(x);\n  }(12345))\n//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如\n（function(window){...}(window)）\n```\nasync/await 语法\n深浅拷贝\n数组去重\n思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中\n思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。\n思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。\n思路4（最常用）：使用es6 set\n```js\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];\nconsole.log([...new Set(arr)]);\n```\nJS原型","source":"_posts/ES6-基础-【好文分享】.md","raw":"---\ntitle: 前端开发周刊-(2018年09月第2周)\ndate: 2018-09-10 11:48:21\ncategories: \"优质文章分享\" #文章分類目錄 可以省略\ntags: [优质文章分享]\nissues:\n---\n\n#### [es6常用基础合集](https://www.jianshu.com/p/cfb0893c34f1)\n\n##### url:https://www.jianshu.com/p/cfb0893c34f1\n\n##### 知识点:\nlet,const \n箭头函数  \n模板字符串  \n解析结构  \n函数默认参数 \n展开运算符 \n对象字面量与class \nPromise\n#### [ES6新特性概览](http://www.cnblogs.com/Wayou/p/es6_new_features.html)\n\n##### url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\n\n##### 知识点:\n箭头操作符\n类的支持\n增强的对象字面量\n字符串模板\n解构\n参数默认值，不定参数，拓展参数\nlet与const 关键字\nfor of 值遍历\niterator, generator\n模块\nMap，Set 和 WeakMap，WeakSet\nProxies\nSymbols\nMath，Number，String，Object 的新API\n#### [透彻掌握Promise的使用，读这篇就够了](https://www.jianshu.com/p/fe5f173276bd)\n##### url：https://www.jianshu.com/p/fe5f173276bd\n##### 知识点：\n实现方法\n1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。 \n2.resolve。成功的执行方法 \n3.reject。失败的执行方法 \n4.catch。失败的捕获。 \n5.then。链式调用下一步。\n原理：\n内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行\n```js\nclass Promise {\n\tresult: any;\n\tcallbacks = [];\n\tfailbacks = [];\n\tconstructor(fn) {\n\t\tfn(this.resolve.bind(this), this.reject.bind(this));\n\t}\n\tresolve(res) {\n\t\tif (this.callbacks.length > 0) this.callbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t}\n\treject(res) {\n\t\tthis.callbacks = [];\n\t\tif (this.failbacks.length > 0) this.failbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t} catch (fn) {\n\t\tthis.failbacks.push(fn);\n\t}\n\tthen(fn) {\n\t\tthis.callbacks.push(fn);\n\t\treturn this;\n\t}\n}\n```\n调用示例：\n```js\nvar a = new Promise(function(resolve, reject) {\n\tsetTimeout(function() {\n\t\tresolve(\"成功\");\n\t}, 1000);\n}).then(function(result, resolve, reject) {\n\tconsole.log(result)\n\treject(\"失败\")\n}).\ncatch (function(err) {\n\tconsole.log(err);\n});\n```\n\nes6写法：\n```js\n//创建promise\nvar promise = new Promise(function(resolve, reject) {\n    // 进行一些异步或耗时操作\n    if ( /*如果成功 */ ) {\n        resolve(\"Stuff worked!\");\n    } else {\n        reject(Error(\"It broke\"));\n    }\n});\n//绑定处理程序\npromise.then(function(result) {\n\t//promise成功的话会执行这里\n    console.log(result); // \"Stuff worked!\"\n}, function(err) {\n\t//promise失败会执行这里\n    console.log(err); // Error: \"It broke\"\n});\n```\n#### 4.[前端算法相关](https://github.com/qianbin01/frontend_train#sort)\n\n##### url:https://github.com/qianbin01/frontend_train#sort\n\n##### 知识点\n\n冒泡排序\n> 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样\n\n快速排序:\n>  1) 首先，在数组中选择一个中间项作为主元\n2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到\n 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作\n3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成\n\n选择排序:\n> 大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)\n\n归并排序:\n> 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)\n归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组\n\n堆排序：\n> 堆排序把数组当中二叉树来排序而得名。\n1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1\n本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个\n\n#### 5.[javaScript常用知识点](https://github.com/qianbin01/frontend_train#javascript)\n\n##### url: https://github.com/qianbin01/frontend_train#javascript\n\n##### 知识点\nmap,reduce,filter的用法\njs数据类型(7种)\n> 1.number;\n2.string;\n3.boolean;\n4.undefined;\n5.null;\n6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。\n7.Object.（包括Object，Array，Function）\n闭包\n```js\nfunction foo(x) {\n    var tmp = 3;\n    return function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nvar bar = foo(2); // bar 现在是一个闭包\nbar(10);\n```\n结果是16\nes6通常用let const块级作用域代替，\n闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题\n\n什么是立即执行函数？使用立即执行函数的目的是什么？\n```js\n//常见两种方式\n1.(function(){...})()\n  (function(x){\n\t  console.log(x);\n  })(12345)\n2.(function(){...}())\n  (function(x){\n\t  console.log(x);\n  }(12345))\n//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如\n（function(window){...}(window)）\n```\nasync/await 语法\n深浅拷贝\n数组去重\n思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中\n思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。\n思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。\n思路4（最常用）：使用es6 set\n```js\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];\nconsole.log([...new Set(arr)]);\n```\nJS原型","slug":"ES6-基础-【好文分享】","published":1,"updated":"2018-09-20T03:46:25.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q3s0002h4a1yuur4jf3","content":"<h4 id=\"es6常用基础合集\"><a href=\"#es6常用基础合集\" class=\"headerlink\" title=\"es6常用基础合集\"></a><a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">es6常用基础合集</a></h4><h5 id=\"url-https-www-jianshu-com-p-cfb0893c34f1\"><a href=\"#url-https-www-jianshu-com-p-cfb0893c34f1\" class=\"headerlink\" title=\"url:https://www.jianshu.com/p/cfb0893c34f1\"></a>url:<a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cfb0893c34f1</a></h5><h5 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>let,const<br>箭头函数<br>模板字符串<br>解析结构<br>函数默认参数<br>展开运算符<br>对象字面量与class<br>Promise</p>\n<h4 id=\"ES6新特性概览\"><a href=\"#ES6新特性概览\" class=\"headerlink\" title=\"ES6新特性概览\"></a><a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">ES6新特性概览</a></h4><h5 id=\"url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\"><a href=\"#url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\" class=\"headerlink\" title=\"url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\"></a>url： <a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Wayou/p/es6_new_features.html</a></h5><h5 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>箭头操作符<br>类的支持<br>增强的对象字面量<br>字符串模板<br>解构<br>参数默认值，不定参数，拓展参数<br>let与const 关键字<br>for of 值遍历<br>iterator, generator<br>模块<br>Map，Set 和 WeakMap，WeakSet<br>Proxies<br>Symbols<br>Math，Number，String，Object 的新API</p>\n<h4 id=\"透彻掌握Promise的使用，读这篇就够了\"><a href=\"#透彻掌握Promise的使用，读这篇就够了\" class=\"headerlink\" title=\"透彻掌握Promise的使用，读这篇就够了\"></a><a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">透彻掌握Promise的使用，读这篇就够了</a></h4><h5 id=\"url：https-www-jianshu-com-p-fe5f173276bd\"><a href=\"#url：https-www-jianshu-com-p-fe5f173276bd\" class=\"headerlink\" title=\"url：https://www.jianshu.com/p/fe5f173276bd\"></a>url：<a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe5f173276bd</a></h5><h5 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h5><p>实现方法<br>1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。<br>2.resolve。成功的执行方法<br>3.reject。失败的执行方法<br>4.catch。失败的捕获。<br>5.then。链式调用下一步。<br>原理：<br>内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">\tresult: any;</span><br><span class=\"line\">\tcallbacks = [];</span><br><span class=\"line\">\tfailbacks = [];</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">\t\tfn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresolve(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.callbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.callbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treject(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.failbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.failbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.failbacks.push(fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthen(fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks.push(fn);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\treject(<span class=\"string\">\"失败\"</span>)</span><br><span class=\"line\">&#125;).</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>es6写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建promise</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 进行一些异步或耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"comment\">/*如果成功 */</span> ) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">\"Stuff worked!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"built_in\">Error</span>(<span class=\"string\">\"It broke\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//绑定处理程序</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise成功的话会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"Stuff worked!\"</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise失败会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// Error: \"It broke\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-前端算法相关\"><a href=\"#4-前端算法相关\" class=\"headerlink\" title=\"4.前端算法相关\"></a>4.<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">前端算法相关</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-sort\"><a href=\"#url-https-github-com-qianbin01-frontend-train-sort\" class=\"headerlink\" title=\"url:https://github.com/qianbin01/frontend_train#sort\"></a>url:<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#sort</a></h5><h5 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>冒泡排序</p>\n<blockquote>\n<p>比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</p>\n</blockquote>\n<p>快速排序:</p>\n<blockquote>\n<p> 1) 首先，在数组中选择一个中间项作为主元<br>2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到<br> 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作<br>3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</p>\n</blockquote>\n<p>选择排序:</p>\n<blockquote>\n<p>大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</p>\n</blockquote>\n<p>归并排序:</p>\n<blockquote>\n<p>归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)<br>归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</p>\n</blockquote>\n<p>堆排序：</p>\n<blockquote>\n<p>堆排序把数组当中二叉树来排序而得名。<br>1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2<em>L；4）节点R的右子节点为2</em>R + 1<br>本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</p>\n</blockquote>\n<h4 id=\"5-javaScript常用知识点\"><a href=\"#5-javaScript常用知识点\" class=\"headerlink\" title=\"5.javaScript常用知识点\"></a>5.<a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">javaScript常用知识点</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-javascript\"><a href=\"#url-https-github-com-qianbin01-frontend-train-javascript\" class=\"headerlink\" title=\"url: https://github.com/qianbin01/frontend_train#javascript\"></a>url: <a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#javascript</a></h5><h5 id=\"知识点-3\"><a href=\"#知识点-3\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>map,reduce,filter的用法<br>js数据类型(7种)</p>\n<blockquote>\n<p>1.number;<br>2.string;<br>3.boolean;<br>4.undefined;<br>5.null;<br>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。<br>7.Object.（包括Object，Array，Function）<br>闭包<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        alert(x + y + (++tmp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo(<span class=\"number\">2</span>); <span class=\"comment\">// bar 现在是一个闭包</span></span><br><span class=\"line\">bar(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是16<br>es6通常用let const块级作用域代替，<br>闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</p>\n<p>什么是立即执行函数？使用立即执行函数的目的是什么？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常见两种方式</span></span><br><span class=\"line\"><span class=\"number\">1.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)()</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;)(<span class=\"number\">12345</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;())</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span></span><br><span class=\"line\">（<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;...&#125;(<span class=\"built_in\">window</span>)）</span><br></pre></td></tr></table></figure></p>\n<p>async/await 语法<br>深浅拷贝<br>数组去重<br>思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中<br>思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。<br>思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。<br>思路4（最常用）：使用es6 set<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr= [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...new <span class=\"built_in\">Set</span>(arr)]);</span><br></pre></td></tr></table></figure></p>\n<p>JS原型</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"es6常用基础合集\"><a href=\"#es6常用基础合集\" class=\"headerlink\" title=\"es6常用基础合集\"></a><a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">es6常用基础合集</a></h4><h5 id=\"url-https-www-jianshu-com-p-cfb0893c34f1\"><a href=\"#url-https-www-jianshu-com-p-cfb0893c34f1\" class=\"headerlink\" title=\"url:https://www.jianshu.com/p/cfb0893c34f1\"></a>url:<a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cfb0893c34f1</a></h5><h5 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>let,const<br>箭头函数<br>模板字符串<br>解析结构<br>函数默认参数<br>展开运算符<br>对象字面量与class<br>Promise</p>\n<h4 id=\"ES6新特性概览\"><a href=\"#ES6新特性概览\" class=\"headerlink\" title=\"ES6新特性概览\"></a><a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">ES6新特性概览</a></h4><h5 id=\"url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\"><a href=\"#url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\" class=\"headerlink\" title=\"url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\"></a>url： <a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Wayou/p/es6_new_features.html</a></h5><h5 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>箭头操作符<br>类的支持<br>增强的对象字面量<br>字符串模板<br>解构<br>参数默认值，不定参数，拓展参数<br>let与const 关键字<br>for of 值遍历<br>iterator, generator<br>模块<br>Map，Set 和 WeakMap，WeakSet<br>Proxies<br>Symbols<br>Math，Number，String，Object 的新API</p>\n<h4 id=\"透彻掌握Promise的使用，读这篇就够了\"><a href=\"#透彻掌握Promise的使用，读这篇就够了\" class=\"headerlink\" title=\"透彻掌握Promise的使用，读这篇就够了\"></a><a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">透彻掌握Promise的使用，读这篇就够了</a></h4><h5 id=\"url：https-www-jianshu-com-p-fe5f173276bd\"><a href=\"#url：https-www-jianshu-com-p-fe5f173276bd\" class=\"headerlink\" title=\"url：https://www.jianshu.com/p/fe5f173276bd\"></a>url：<a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe5f173276bd</a></h5><h5 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h5><p>实现方法<br>1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。<br>2.resolve。成功的执行方法<br>3.reject。失败的执行方法<br>4.catch。失败的捕获。<br>5.then。链式调用下一步。<br>原理：<br>内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">\tresult: any;</span><br><span class=\"line\">\tcallbacks = [];</span><br><span class=\"line\">\tfailbacks = [];</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">\t\tfn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresolve(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.callbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.callbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treject(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.failbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.failbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.failbacks.push(fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthen(fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks.push(fn);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\treject(<span class=\"string\">\"失败\"</span>)</span><br><span class=\"line\">&#125;).</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>es6写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建promise</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 进行一些异步或耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"comment\">/*如果成功 */</span> ) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">\"Stuff worked!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"built_in\">Error</span>(<span class=\"string\">\"It broke\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//绑定处理程序</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise成功的话会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"Stuff worked!\"</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise失败会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// Error: \"It broke\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-前端算法相关\"><a href=\"#4-前端算法相关\" class=\"headerlink\" title=\"4.前端算法相关\"></a>4.<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">前端算法相关</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-sort\"><a href=\"#url-https-github-com-qianbin01-frontend-train-sort\" class=\"headerlink\" title=\"url:https://github.com/qianbin01/frontend_train#sort\"></a>url:<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#sort</a></h5><h5 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>冒泡排序</p>\n<blockquote>\n<p>比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</p>\n</blockquote>\n<p>快速排序:</p>\n<blockquote>\n<p> 1) 首先，在数组中选择一个中间项作为主元<br>2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到<br> 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作<br>3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</p>\n</blockquote>\n<p>选择排序:</p>\n<blockquote>\n<p>大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</p>\n</blockquote>\n<p>归并排序:</p>\n<blockquote>\n<p>归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)<br>归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</p>\n</blockquote>\n<p>堆排序：</p>\n<blockquote>\n<p>堆排序把数组当中二叉树来排序而得名。<br>1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2<em>L；4）节点R的右子节点为2</em>R + 1<br>本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</p>\n</blockquote>\n<h4 id=\"5-javaScript常用知识点\"><a href=\"#5-javaScript常用知识点\" class=\"headerlink\" title=\"5.javaScript常用知识点\"></a>5.<a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">javaScript常用知识点</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-javascript\"><a href=\"#url-https-github-com-qianbin01-frontend-train-javascript\" class=\"headerlink\" title=\"url: https://github.com/qianbin01/frontend_train#javascript\"></a>url: <a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#javascript</a></h5><h5 id=\"知识点-3\"><a href=\"#知识点-3\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>map,reduce,filter的用法<br>js数据类型(7种)</p>\n<blockquote>\n<p>1.number;<br>2.string;<br>3.boolean;<br>4.undefined;<br>5.null;<br>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。<br>7.Object.（包括Object，Array，Function）<br>闭包<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        alert(x + y + (++tmp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo(<span class=\"number\">2</span>); <span class=\"comment\">// bar 现在是一个闭包</span></span><br><span class=\"line\">bar(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是16<br>es6通常用let const块级作用域代替，<br>闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</p>\n<p>什么是立即执行函数？使用立即执行函数的目的是什么？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常见两种方式</span></span><br><span class=\"line\"><span class=\"number\">1.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)()</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;)(<span class=\"number\">12345</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;())</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span></span><br><span class=\"line\">（<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;...&#125;(<span class=\"built_in\">window</span>)）</span><br></pre></td></tr></table></figure></p>\n<p>async/await 语法<br>深浅拷贝<br>数组去重<br>思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中<br>思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。<br>思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。<br>思路4（最常用）：使用es6 set<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr= [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...new <span class=\"built_in\">Set</span>(arr)]);</span><br></pre></td></tr></table></figure></p>\n<p>JS原型</p>\n"},{"title":"React Js 微信分享封装","date":"2018-09-03T07:17:54.000Z","description":"本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码：","_content":"\n本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码：\n\n\n```jsx\nimport Fetch from './FetchIt';\nimport API_URL from './url';\nimport Share from './Share';\n\nlet wxUtils = {};\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// 分享\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n getshareinfo?type=\n type :goods 课程详情 team 团详情\n id 课程id\n tid 团ID\n * @param config\n * @param shareInfo {imgUrl,title,description,link}\n */\n\nfunction share2wx(config, shareInfo) {\n    const share = new Share({\n        appid: config.appid, // 必填，公众号的唯一标识\n        timestamp: config.timestamp, // 必填，生成签名的时间戳\n        nonceStr: config.nonceStr, // 必填，生成签名的随机串\n        signature: config.signature, // 必填，签名\n    });\n    share.init(Object.assign({}, shareInfo));\n}\n\nfunction getConfig(shareInfo) {\n    let href = window.location.href.split('#')[0];\n    const url = encodeURIComponent(href /*window.location.href*/);\n    Fetch.get(`${API_URL.mobile.signature_path}?url=${url}`).then(data => {\n        share2wx(data, shareInfo);\n    });\n}\n\n/**\n * @param shareInfo\n */\n\nwxUtils.share = function (shareInfo) {\n    getConfig(shareInfo);\n};\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// 分享结束\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * 是否开启右上角Menu\n * @param open\n */\n\nwxUtils.optionMenu = function (open = true) {\n    if (open) {\n        openOptionMenu();\n    } else {\n        disabledOptionMenu();\n    }\n};\n\n/**\n * 是否禁用右上角\n */\n\nfunction disabledOptionMenu() {\n    if (typeof WeixinJSBridge === \"undefined\") {\n        if (document.addEventListener) {\n            document.addEventListener('WeixinJSBridgeReady', onBridgeReady(true), false);\n        } else if (document.attachEvent) {\n            document.attachEvent('WeixinJSBridgeReady', onBridgeReady(true));\n            document.attachEvent('onWeixinJSBridgeReady', onBridgeReady(true));\n        }\n    } else {\n        onBridgeReady(true);\n    }\n}\n\n/**\n * 开启menu\n */\n\nfunction openOptionMenu() {\n    if (typeof WeixinJSBridge === \"undefined\") {\n        if (document.addEventListener) {\n            document.addEventListener('WeixinJSBridgeReady', onBridgeReady(false), false);\n        } else if (document.attachEvent) {\n            document.attachEvent('WeixinJSBridgeReady', onBridgeReady(false));\n            document.attachEvent('onWeixinJSBridgeReady', onBridgeReady(false));\n        }\n    } else {\n        onBridgeReady(false);\n    }\n}\n\nfunction onBridgeReady(disable = true) {\n    if (typeof WeixinJSBridge !== \"undefined\") WeixinJSBridge.call(disable ? 'hideOptionMenu' : 'showOptionMenu');\n}\n/**\n * 隐藏微信网页底部的导航栏\n * @param disable\n */\n\nwxUtils.disabledToolbar = function (disable = true) {\n    document.addEventListener('WeixinJSBridgeReady', function onBridgeReady() {\n        // 通过下面这个API隐藏底部导航栏\n        WeixinJSBridge.call(disable ? 'hideToolbar' : 'showToolbar');\n    });\n};\n\nexport default wxUtils;\n```\n\n```jsx\n// 分享\nfunction Share(config) {\n    wx.config({\n        debug: false, // 开启调试模式\n        appId: config.appid, // 必填，公众号的唯一标识\n        timestamp: config.timestamp, // 必填，生成签名的时间戳\n        nonceStr: config.nonceStr, // 必填，生成签名的随机串\n        signature: config.signature, // 必填，签名，见附录1\n        jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareWeibo'], // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n    });\n}\n\nShare.prototype = {\n    constructor: Share,\n\n    init(config) {\n        this.imgUrl = config.imgUrl;\n        this.link = config.link;\n        // this.musicPath = config.musicPath;\n        this.description = config.description;\n        this.title = config.title;\n\n        wx.ready(() => {\n            // if (this.musicPath) {\n            //     document.getElementById('musicIcon').play();\n            // }\n            this.toFriend();\n            this.toTimeline();\n        });\n\n        wx.error(res => {\n            console.log(`${res}`);\n        });\n    },\n\n    toFriend() {\n        wx.onMenuShareAppMessage({\n            imgUrl: this.imgUrl,\n            link: this.link,\n            title: this.title,\n            desc: this.description,\n            success: function () {\n                // 用户确认分享后执行的回调函数\n            },\n        });\n    },\n\n    toTimeline() {\n        wx.onMenuShareTimeline({\n            imgUrl: this.imgUrl,\n            link: this.link,\n            title: this.title,\n            desc: this.description,\n            success: function () {\n                // 用户确认分享后执行的回调函数\n            },\n        });\n    },\n};\n\nexport default Share;\n```\n\n```jsx\n//开启分享\nBaseComponent.wxUtils.optionMenu(true);\nBaseComponent.wxUtils.share({\n    imgUrl: activityData.sharePicUrl,\n    title: activityData.shareTitle,\n    description: activityData.shareContent,\n    link: url,\n});\n```","source":"_posts/React-Js-微信分享封装.md","raw":"---\ntitle: React Js 微信分享封装\ndate: 2018-09-03 15:17:54\ntags:\n     - react\ndescription: 本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码：\n---\n\n本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码：\n\n\n```jsx\nimport Fetch from './FetchIt';\nimport API_URL from './url';\nimport Share from './Share';\n\nlet wxUtils = {};\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// 分享\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n getshareinfo?type=\n type :goods 课程详情 team 团详情\n id 课程id\n tid 团ID\n * @param config\n * @param shareInfo {imgUrl,title,description,link}\n */\n\nfunction share2wx(config, shareInfo) {\n    const share = new Share({\n        appid: config.appid, // 必填，公众号的唯一标识\n        timestamp: config.timestamp, // 必填，生成签名的时间戳\n        nonceStr: config.nonceStr, // 必填，生成签名的随机串\n        signature: config.signature, // 必填，签名\n    });\n    share.init(Object.assign({}, shareInfo));\n}\n\nfunction getConfig(shareInfo) {\n    let href = window.location.href.split('#')[0];\n    const url = encodeURIComponent(href /*window.location.href*/);\n    Fetch.get(`${API_URL.mobile.signature_path}?url=${url}`).then(data => {\n        share2wx(data, shareInfo);\n    });\n}\n\n/**\n * @param shareInfo\n */\n\nwxUtils.share = function (shareInfo) {\n    getConfig(shareInfo);\n};\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// 分享结束\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * 是否开启右上角Menu\n * @param open\n */\n\nwxUtils.optionMenu = function (open = true) {\n    if (open) {\n        openOptionMenu();\n    } else {\n        disabledOptionMenu();\n    }\n};\n\n/**\n * 是否禁用右上角\n */\n\nfunction disabledOptionMenu() {\n    if (typeof WeixinJSBridge === \"undefined\") {\n        if (document.addEventListener) {\n            document.addEventListener('WeixinJSBridgeReady', onBridgeReady(true), false);\n        } else if (document.attachEvent) {\n            document.attachEvent('WeixinJSBridgeReady', onBridgeReady(true));\n            document.attachEvent('onWeixinJSBridgeReady', onBridgeReady(true));\n        }\n    } else {\n        onBridgeReady(true);\n    }\n}\n\n/**\n * 开启menu\n */\n\nfunction openOptionMenu() {\n    if (typeof WeixinJSBridge === \"undefined\") {\n        if (document.addEventListener) {\n            document.addEventListener('WeixinJSBridgeReady', onBridgeReady(false), false);\n        } else if (document.attachEvent) {\n            document.attachEvent('WeixinJSBridgeReady', onBridgeReady(false));\n            document.attachEvent('onWeixinJSBridgeReady', onBridgeReady(false));\n        }\n    } else {\n        onBridgeReady(false);\n    }\n}\n\nfunction onBridgeReady(disable = true) {\n    if (typeof WeixinJSBridge !== \"undefined\") WeixinJSBridge.call(disable ? 'hideOptionMenu' : 'showOptionMenu');\n}\n/**\n * 隐藏微信网页底部的导航栏\n * @param disable\n */\n\nwxUtils.disabledToolbar = function (disable = true) {\n    document.addEventListener('WeixinJSBridgeReady', function onBridgeReady() {\n        // 通过下面这个API隐藏底部导航栏\n        WeixinJSBridge.call(disable ? 'hideToolbar' : 'showToolbar');\n    });\n};\n\nexport default wxUtils;\n```\n\n```jsx\n// 分享\nfunction Share(config) {\n    wx.config({\n        debug: false, // 开启调试模式\n        appId: config.appid, // 必填，公众号的唯一标识\n        timestamp: config.timestamp, // 必填，生成签名的时间戳\n        nonceStr: config.nonceStr, // 必填，生成签名的随机串\n        signature: config.signature, // 必填，签名，见附录1\n        jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareWeibo'], // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n    });\n}\n\nShare.prototype = {\n    constructor: Share,\n\n    init(config) {\n        this.imgUrl = config.imgUrl;\n        this.link = config.link;\n        // this.musicPath = config.musicPath;\n        this.description = config.description;\n        this.title = config.title;\n\n        wx.ready(() => {\n            // if (this.musicPath) {\n            //     document.getElementById('musicIcon').play();\n            // }\n            this.toFriend();\n            this.toTimeline();\n        });\n\n        wx.error(res => {\n            console.log(`${res}`);\n        });\n    },\n\n    toFriend() {\n        wx.onMenuShareAppMessage({\n            imgUrl: this.imgUrl,\n            link: this.link,\n            title: this.title,\n            desc: this.description,\n            success: function () {\n                // 用户确认分享后执行的回调函数\n            },\n        });\n    },\n\n    toTimeline() {\n        wx.onMenuShareTimeline({\n            imgUrl: this.imgUrl,\n            link: this.link,\n            title: this.title,\n            desc: this.description,\n            success: function () {\n                // 用户确认分享后执行的回调函数\n            },\n        });\n    },\n};\n\nexport default Share;\n```\n\n```jsx\n//开启分享\nBaseComponent.wxUtils.optionMenu(true);\nBaseComponent.wxUtils.share({\n    imgUrl: activityData.sharePicUrl,\n    title: activityData.shareTitle,\n    description: activityData.shareContent,\n    link: url,\n});\n```","slug":"React-Js-微信分享封装","published":1,"updated":"2018-09-21T08:08:07.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q4q0006h4a1b0ixa89a","content":"<p>本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Fetch <span class=\"keyword\">from</span> <span class=\"string\">'./FetchIt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> API_URL <span class=\"keyword\">from</span> <span class=\"string\">'./url'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Share <span class=\"keyword\">from</span> <span class=\"string\">'./Share'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> wxUtils = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 分享</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> getshareinfo?type=</span></span><br><span class=\"line\"><span class=\"comment\"> type :goods 课程详情 team 团详情</span></span><br><span class=\"line\"><span class=\"comment\"> id 课程id</span></span><br><span class=\"line\"><span class=\"comment\"> tid 团ID</span></span><br><span class=\"line\"><span class=\"comment\"> * @param config</span></span><br><span class=\"line\"><span class=\"comment\"> * @param shareInfo &#123;imgUrl,title,description,link&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">share2wx</span>(<span class=\"params\">config, shareInfo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> share = <span class=\"keyword\">new</span> Share(&#123;</span><br><span class=\"line\">        appid: config.appid, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">        timestamp: config.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">        nonceStr: config.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">        signature: config.signature, <span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    share.init(<span class=\"built_in\">Object</span>.assign(&#123;&#125;, shareInfo));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getConfig</span>(<span class=\"params\">shareInfo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> href = <span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"built_in\">encodeURIComponent</span>(href <span class=\"comment\">/*window.location.href*/</span>);</span><br><span class=\"line\">    Fetch.get(<span class=\"string\">`<span class=\"subst\">$&#123;API_URL.mobile.signature_path&#125;</span>?url=<span class=\"subst\">$&#123;url&#125;</span>`</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        share2wx(data, shareInfo);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param shareInfo</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">wxUtils.share = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">shareInfo</span>) </span>&#123;</span><br><span class=\"line\">    getConfig(shareInfo);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 分享结束</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否开启右上角Menu</span></span><br><span class=\"line\"><span class=\"comment\"> * @param open</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">wxUtils.optionMenu = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">open = true</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (open) &#123;</span><br><span class=\"line\">        openOptionMenu();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        disabledOptionMenu();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否禁用右上角</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">disabledOptionMenu</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">true</span>), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.attachEvent) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'onWeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">true</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        onBridgeReady(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 开启menu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openOptionMenu</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">false</span>), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.attachEvent) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">false</span>));</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'onWeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        onBridgeReady(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onBridgeReady</span>(<span class=\"params\">disable = true</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge !== <span class=\"string\">\"undefined\"</span>) WeixinJSBridge.call(disable ? <span class=\"string\">'hideOptionMenu'</span> : <span class=\"string\">'showOptionMenu'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 隐藏微信网页底部的导航栏</span></span><br><span class=\"line\"><span class=\"comment\"> * @param disable</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">wxUtils.disabledToolbar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">disable = true</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'WeixinJSBridgeReady'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onBridgeReady</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过下面这个API隐藏底部导航栏</span></span><br><span class=\"line\">        WeixinJSBridge.call(disable ? <span class=\"string\">'hideToolbar'</span> : <span class=\"string\">'showToolbar'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> wxUtils;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分享</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Share</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    wx.config(&#123;</span><br><span class=\"line\">        debug: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式</span></span><br><span class=\"line\">        appId: config.appid, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">        timestamp: config.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">        nonceStr: config.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">        signature: config.signature, <span class=\"comment\">// 必填，签名，见附录1</span></span><br><span class=\"line\">        jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>, <span class=\"string\">'onMenuShareWeibo'</span>], <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Share.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Share,</span><br><span class=\"line\"></span><br><span class=\"line\">    init(config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.imgUrl = config.imgUrl;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.link = config.link;</span><br><span class=\"line\">        <span class=\"comment\">// this.musicPath = config.musicPath;</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.description = config.description;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = config.title;</span><br><span class=\"line\"></span><br><span class=\"line\">        wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// if (this.musicPath) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     document.getElementById('musicIcon').play();</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.toFriend();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.toTimeline();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        wx.error(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;res&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toFriend() &#123;</span><br><span class=\"line\">        wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">            imgUrl: <span class=\"keyword\">this</span>.imgUrl,</span><br><span class=\"line\">            link: <span class=\"keyword\">this</span>.link,</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.title,</span><br><span class=\"line\">            desc: <span class=\"keyword\">this</span>.description,</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 用户确认分享后执行的回调函数</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toTimeline() &#123;</span><br><span class=\"line\">        wx.onMenuShareTimeline(&#123;</span><br><span class=\"line\">            imgUrl: <span class=\"keyword\">this</span>.imgUrl,</span><br><span class=\"line\">            link: <span class=\"keyword\">this</span>.link,</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.title,</span><br><span class=\"line\">            desc: <span class=\"keyword\">this</span>.description,</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 用户确认分享后执行的回调函数</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Share;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//开启分享</span></span><br><span class=\"line\">BaseComponent.wxUtils.optionMenu(<span class=\"literal\">true</span>);</span><br><span class=\"line\">BaseComponent.wxUtils.share(&#123;</span><br><span class=\"line\">    imgUrl: activityData.sharePicUrl,</span><br><span class=\"line\">    title: activityData.shareTitle,</span><br><span class=\"line\">    description: activityData.shareContent,</span><br><span class=\"line\">    link: url,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Fetch <span class=\"keyword\">from</span> <span class=\"string\">'./FetchIt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> API_URL <span class=\"keyword\">from</span> <span class=\"string\">'./url'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Share <span class=\"keyword\">from</span> <span class=\"string\">'./Share'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> wxUtils = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 分享</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> getshareinfo?type=</span></span><br><span class=\"line\"><span class=\"comment\"> type :goods 课程详情 team 团详情</span></span><br><span class=\"line\"><span class=\"comment\"> id 课程id</span></span><br><span class=\"line\"><span class=\"comment\"> tid 团ID</span></span><br><span class=\"line\"><span class=\"comment\"> * @param config</span></span><br><span class=\"line\"><span class=\"comment\"> * @param shareInfo &#123;imgUrl,title,description,link&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">share2wx</span>(<span class=\"params\">config, shareInfo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> share = <span class=\"keyword\">new</span> Share(&#123;</span><br><span class=\"line\">        appid: config.appid, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">        timestamp: config.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">        nonceStr: config.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">        signature: config.signature, <span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    share.init(<span class=\"built_in\">Object</span>.assign(&#123;&#125;, shareInfo));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getConfig</span>(<span class=\"params\">shareInfo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> href = <span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"built_in\">encodeURIComponent</span>(href <span class=\"comment\">/*window.location.href*/</span>);</span><br><span class=\"line\">    Fetch.get(<span class=\"string\">`<span class=\"subst\">$&#123;API_URL.mobile.signature_path&#125;</span>?url=<span class=\"subst\">$&#123;url&#125;</span>`</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        share2wx(data, shareInfo);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param shareInfo</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">wxUtils.share = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">shareInfo</span>) </span>&#123;</span><br><span class=\"line\">    getConfig(shareInfo);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 分享结束</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否开启右上角Menu</span></span><br><span class=\"line\"><span class=\"comment\"> * @param open</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">wxUtils.optionMenu = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">open = true</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (open) &#123;</span><br><span class=\"line\">        openOptionMenu();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        disabledOptionMenu();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否禁用右上角</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">disabledOptionMenu</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">true</span>), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.attachEvent) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'onWeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">true</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        onBridgeReady(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 开启menu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openOptionMenu</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">false</span>), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.attachEvent) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'WeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">false</span>));</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.attachEvent(<span class=\"string\">'onWeixinJSBridgeReady'</span>, onBridgeReady(<span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        onBridgeReady(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onBridgeReady</span>(<span class=\"params\">disable = true</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge !== <span class=\"string\">\"undefined\"</span>) WeixinJSBridge.call(disable ? <span class=\"string\">'hideOptionMenu'</span> : <span class=\"string\">'showOptionMenu'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 隐藏微信网页底部的导航栏</span></span><br><span class=\"line\"><span class=\"comment\"> * @param disable</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">wxUtils.disabledToolbar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">disable = true</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'WeixinJSBridgeReady'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onBridgeReady</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过下面这个API隐藏底部导航栏</span></span><br><span class=\"line\">        WeixinJSBridge.call(disable ? <span class=\"string\">'hideToolbar'</span> : <span class=\"string\">'showToolbar'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> wxUtils;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分享</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Share</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    wx.config(&#123;</span><br><span class=\"line\">        debug: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式</span></span><br><span class=\"line\">        appId: config.appid, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">        timestamp: config.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">        nonceStr: config.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">        signature: config.signature, <span class=\"comment\">// 必填，签名，见附录1</span></span><br><span class=\"line\">        jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>, <span class=\"string\">'onMenuShareWeibo'</span>], <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Share.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Share,</span><br><span class=\"line\"></span><br><span class=\"line\">    init(config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.imgUrl = config.imgUrl;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.link = config.link;</span><br><span class=\"line\">        <span class=\"comment\">// this.musicPath = config.musicPath;</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.description = config.description;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = config.title;</span><br><span class=\"line\"></span><br><span class=\"line\">        wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// if (this.musicPath) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     document.getElementById('musicIcon').play();</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.toFriend();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.toTimeline();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        wx.error(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;res&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toFriend() &#123;</span><br><span class=\"line\">        wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">            imgUrl: <span class=\"keyword\">this</span>.imgUrl,</span><br><span class=\"line\">            link: <span class=\"keyword\">this</span>.link,</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.title,</span><br><span class=\"line\">            desc: <span class=\"keyword\">this</span>.description,</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 用户确认分享后执行的回调函数</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toTimeline() &#123;</span><br><span class=\"line\">        wx.onMenuShareTimeline(&#123;</span><br><span class=\"line\">            imgUrl: <span class=\"keyword\">this</span>.imgUrl,</span><br><span class=\"line\">            link: <span class=\"keyword\">this</span>.link,</span><br><span class=\"line\">            title: <span class=\"keyword\">this</span>.title,</span><br><span class=\"line\">            desc: <span class=\"keyword\">this</span>.description,</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 用户确认分享后执行的回调函数</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Share;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//开启分享</span></span><br><span class=\"line\">BaseComponent.wxUtils.optionMenu(<span class=\"literal\">true</span>);</span><br><span class=\"line\">BaseComponent.wxUtils.share(&#123;</span><br><span class=\"line\">    imgUrl: activityData.sharePicUrl,</span><br><span class=\"line\">    title: activityData.shareTitle,</span><br><span class=\"line\">    description: activityData.shareContent,</span><br><span class=\"line\">    link: url,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection.","date":"2018-09-07T07:54:30.000Z","issues":114,"_content":"\n今天用NodeJS连接Mysql时遇到点折磨人的问题，记录下解决方法。\n\nNodeJS和Mysql都已经正确安装了，但是NodeJS和Mysql的连接出现问题，查找网上一些解决办法都不能解决问题。\n报错如下：\n![image](https://user-images.githubusercontent.com/22697565/45206239-1cfe7e80-b2b7-11e8-96d3-c104fa5c7b14.png)\n\n经过查找定位，在mysql官网找到了解决方案：\n\n[官网链接 》》MySQL Connector/Node.js](https://dev.mysql.com/doc/dev/connector-nodejs/8.0/)\nMySql 针对node的连接器对mysql的版本有要求，且需要另外的插件：\n\n![image](https://user-images.githubusercontent.com/22697565/45206324-520ad100-b2b7-11e8-8814-8d6d5b2fb7ae.png)\n\n然后下载的最新版的mysql mysql-installer-community-5.7.20.0.msi\n \n执行 :\n```\nnpm install mysql\n\nnpm install @mysql/xdevapi\n```\n\n运行[官方示例](https://github.com/mysqljs/mysql#introduction)，成功。\n","source":"_posts/NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection.md","raw":"---\ntitle: NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection.\ndate: 2018-09-07 15:54:30\nissues: 114\ncategories: \"前端\" \ntags: node \n---\n\n今天用NodeJS连接Mysql时遇到点折磨人的问题，记录下解决方法。\n\nNodeJS和Mysql都已经正确安装了，但是NodeJS和Mysql的连接出现问题，查找网上一些解决办法都不能解决问题。\n报错如下：\n![image](https://user-images.githubusercontent.com/22697565/45206239-1cfe7e80-b2b7-11e8-96d3-c104fa5c7b14.png)\n\n经过查找定位，在mysql官网找到了解决方案：\n\n[官网链接 》》MySQL Connector/Node.js](https://dev.mysql.com/doc/dev/connector-nodejs/8.0/)\nMySql 针对node的连接器对mysql的版本有要求，且需要另外的插件：\n\n![image](https://user-images.githubusercontent.com/22697565/45206324-520ad100-b2b7-11e8-8814-8d6d5b2fb7ae.png)\n\n然后下载的最新版的mysql mysql-installer-community-5.7.20.0.msi\n \n执行 :\n```\nnpm install mysql\n\nnpm install @mysql/xdevapi\n```\n\n运行[官方示例](https://github.com/mysqljs/mysql#introduction)，成功。\n","slug":"NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection","published":1,"updated":"2018-09-20T03:46:25.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q510008h4a1l01c7gxm","content":"<p>今天用NodeJS连接Mysql时遇到点折磨人的问题，记录下解决方法。</p>\n<p>NodeJS和Mysql都已经正确安装了，但是NodeJS和Mysql的连接出现问题，查找网上一些解决办法都不能解决问题。<br>报错如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45206239-1cfe7e80-b2b7-11e8-96d3-c104fa5c7b14.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<p>经过查找定位，在mysql官网找到了解决方案：</p>\n<p><a href=\"https://dev.mysql.com/doc/dev/connector-nodejs/8.0/\" target=\"_blank\" rel=\"noopener\">官网链接 》》MySQL Connector/Node.js</a><br>MySql 针对node的连接器对mysql的版本有要求，且需要另外的插件：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45206324-520ad100-b2b7-11e8-8814-8d6d5b2fb7ae.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>然后下载的最新版的mysql mysql-installer-community-5.7.20.0.msi</p>\n<p>执行 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mysql</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @mysql/xdevapi</span><br></pre></td></tr></table></figure></p>\n<p>运行<a href=\"https://github.com/mysqljs/mysql#introduction\" target=\"_blank\" rel=\"noopener\">官方示例</a>，成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天用NodeJS连接Mysql时遇到点折磨人的问题，记录下解决方法。</p>\n<p>NodeJS和Mysql都已经正确安装了，但是NodeJS和Mysql的连接出现问题，查找网上一些解决办法都不能解决问题。<br>报错如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45206239-1cfe7e80-b2b7-11e8-96d3-c104fa5c7b14.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<p>经过查找定位，在mysql官网找到了解决方案：</p>\n<p><a href=\"https://dev.mysql.com/doc/dev/connector-nodejs/8.0/\" target=\"_blank\" rel=\"noopener\">官网链接 》》MySQL Connector/Node.js</a><br>MySql 针对node的连接器对mysql的版本有要求，且需要另外的插件：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45206324-520ad100-b2b7-11e8-8814-8d6d5b2fb7ae.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>然后下载的最新版的mysql mysql-installer-community-5.7.20.0.msi</p>\n<p>执行 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mysql</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @mysql/xdevapi</span><br></pre></td></tr></table></figure></p>\n<p>运行<a href=\"https://github.com/mysqljs/mysql#introduction\" target=\"_blank\" rel=\"noopener\">官方示例</a>，成功。</p>\n"},{"title":"VsCode读取项目文件的Eslint规则 保存时自动修复格式错误","date":"2018-09-17T08:29:10.000Z","_content":"\n####  配置：\n##### 安装VsCode的EsLint和vetur插件\n##### 为项目安装EsLint包\n注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。\n##### 在项目的根目录下添加.eslintrc.js\n用于校验代码格式，根据项目情况，可自行编写校验规则：\n```js\nmodule.exports = {\n    // Eslint规则\n}\n```\n首选项设置：\n将下面这部分放入首选项设置中：\n```js\n \"eslint.autoFixOnSave\": true,  //  启用保存时自动修复,默认只支持.js文件\n \"eslint.validate\": [\n    \"javascript\",  //  用eslint的规则检测js文件\n    {\n      \"language\": \"vue\",   // 检测vue文件\n      \"autoFix\": true   //  为vue文件开启保存自动修复的功能\n    },\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n  ],\n\n``` \n\n### 大功告成：\n点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。\n\n> 注意：\n如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。\n\n\n","source":"_posts/VsCode读取项目文件的Eslint规则-保存时自动修复格式错误.md","raw":"---\ntitle: VsCode读取项目文件的Eslint规则 保存时自动修复格式错误\ncategories: 前端\ndate: 2018-09-17 16:29:10\ntags:\n---\n\n####  配置：\n##### 安装VsCode的EsLint和vetur插件\n##### 为项目安装EsLint包\n注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。\n##### 在项目的根目录下添加.eslintrc.js\n用于校验代码格式，根据项目情况，可自行编写校验规则：\n```js\nmodule.exports = {\n    // Eslint规则\n}\n```\n首选项设置：\n将下面这部分放入首选项设置中：\n```js\n \"eslint.autoFixOnSave\": true,  //  启用保存时自动修复,默认只支持.js文件\n \"eslint.validate\": [\n    \"javascript\",  //  用eslint的规则检测js文件\n    {\n      \"language\": \"vue\",   // 检测vue文件\n      \"autoFix\": true   //  为vue文件开启保存自动修复的功能\n    },\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n  ],\n\n``` \n\n### 大功告成：\n点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。\n\n> 注意：\n如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。\n\n\n","slug":"VsCode读取项目文件的Eslint规则-保存时自动修复格式错误","published":1,"updated":"2018-09-21T08:29:31.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q580009h4a1ciab2g8p","content":"<h4 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h4><h5 id=\"安装VsCode的EsLint和vetur插件\"><a href=\"#安装VsCode的EsLint和vetur插件\" class=\"headerlink\" title=\"安装VsCode的EsLint和vetur插件\"></a>安装VsCode的EsLint和vetur插件</h5><h5 id=\"为项目安装EsLint包\"><a href=\"#为项目安装EsLint包\" class=\"headerlink\" title=\"为项目安装EsLint包\"></a>为项目安装EsLint包</h5><p>注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。</p>\n<h5 id=\"在项目的根目录下添加-eslintrc-js\"><a href=\"#在项目的根目录下添加-eslintrc-js\" class=\"headerlink\" title=\"在项目的根目录下添加.eslintrc.js\"></a>在项目的根目录下添加.eslintrc.js</h5><p>用于校验代码格式，根据项目情况，可自行编写校验规则：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Eslint规则</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首选项设置：<br>将下面这部分放入首选项设置中：</p>\n<pre><code class=\"js\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,  <span class=\"comment\">//  启用保存时自动修复,默认只支持.js文件</span>\n<span class=\"string\">\"eslint.validate\"</span>: [\n   <span class=\"string\">\"javascript\"</span>,  <span class=\"comment\">//  用eslint的规则检测js文件</span>\n   {\n     <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,   <span class=\"comment\">// 检测vue文件</span>\n     <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span>   <span class=\"comment\">//  为vue文件开启保存自动修复的功能</span>\n   },\n   {\n     <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,\n     <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span>\n   },\n ],\n\n</code></pre>\n<h3 id=\"大功告成：\"><a href=\"#大功告成：\" class=\"headerlink\" title=\"大功告成：\"></a>大功告成：</h3><p>点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。</p>\n<blockquote>\n<p>注意：<br>如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h4><h5 id=\"安装VsCode的EsLint和vetur插件\"><a href=\"#安装VsCode的EsLint和vetur插件\" class=\"headerlink\" title=\"安装VsCode的EsLint和vetur插件\"></a>安装VsCode的EsLint和vetur插件</h5><h5 id=\"为项目安装EsLint包\"><a href=\"#为项目安装EsLint包\" class=\"headerlink\" title=\"为项目安装EsLint包\"></a>为项目安装EsLint包</h5><p>注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。</p>\n<h5 id=\"在项目的根目录下添加-eslintrc-js\"><a href=\"#在项目的根目录下添加-eslintrc-js\" class=\"headerlink\" title=\"在项目的根目录下添加.eslintrc.js\"></a>在项目的根目录下添加.eslintrc.js</h5><p>用于校验代码格式，根据项目情况，可自行编写校验规则：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Eslint规则</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首选项设置：<br>将下面这部分放入首选项设置中：</p>\n<pre><code class=\"js\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,  <span class=\"comment\">//  启用保存时自动修复,默认只支持.js文件</span>\n<span class=\"string\">\"eslint.validate\"</span>: [\n   <span class=\"string\">\"javascript\"</span>,  <span class=\"comment\">//  用eslint的规则检测js文件</span>\n   {\n     <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,   <span class=\"comment\">// 检测vue文件</span>\n     <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span>   <span class=\"comment\">//  为vue文件开启保存自动修复的功能</span>\n   },\n   {\n     <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,\n     <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span>\n   },\n ],\n\n</code></pre>\n<h3 id=\"大功告成：\"><a href=\"#大功告成：\" class=\"headerlink\" title=\"大功告成：\"></a>大功告成：</h3><p>点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。</p>\n<blockquote>\n<p>注意：<br>如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。</p>\n</blockquote>\n"},{"title":"javascript截取文件名的后缀","date":"2018-09-06T11:22:37.000Z","issues":112,"_content":"\n```js\nconst fileName=\"text.png\";\n\n//带.的格式\nlet fileFormat=fileName.substring(fileName.lastIndexOf('.'))\n\n// 不带.的格式\nlet fileFormat2=fileName.substring(fileName.lastIndexOf('.')+1);\nconsole.log(fileFormat,fileFormat2)\n```\n![image](https://user-images.githubusercontent.com/22697565/45154907-b8d2b080-b20b-11e8-944d-3adde64b69dd.png)\n\n\n\n","source":"_posts/javascript截取文件名的后缀.md","raw":"---\ntitle: javascript截取文件名的后缀\ndate: 2018-09-06 19:22:37\ncategories: \"前端\" \nissues: 112\ntags: [js代码片段]\n---\n\n```js\nconst fileName=\"text.png\";\n\n//带.的格式\nlet fileFormat=fileName.substring(fileName.lastIndexOf('.'))\n\n// 不带.的格式\nlet fileFormat2=fileName.substring(fileName.lastIndexOf('.')+1);\nconsole.log(fileFormat,fileFormat2)\n```\n![image](https://user-images.githubusercontent.com/22697565/45154907-b8d2b080-b20b-11e8-944d-3adde64b69dd.png)\n\n\n\n","slug":"javascript截取文件名的后缀","published":1,"updated":"2018-09-20T03:46:25.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q5o000dh4a12parg1el","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileName=<span class=\"string\">\"text.png\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带.的格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fileFormat=fileName.substring(fileName.lastIndexOf(<span class=\"string\">'.'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不带.的格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fileFormat2=fileName.substring(fileName.lastIndexOf(<span class=\"string\">'.'</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fileFormat,fileFormat2)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45154907-b8d2b080-b20b-11e8-944d-3adde64b69dd.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileName=<span class=\"string\">\"text.png\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带.的格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fileFormat=fileName.substring(fileName.lastIndexOf(<span class=\"string\">'.'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不带.的格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fileFormat2=fileName.substring(fileName.lastIndexOf(<span class=\"string\">'.'</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fileFormat,fileFormat2)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45154907-b8d2b080-b20b-11e8-944d-3adde64b69dd.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-09-20T03:30:45.449Z","updated":"2018-09-20T05:15:46.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q6v000eh4a1m5qabqle","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"reactjs中事件传参(关于event)","date":"2018-09-10T07:06:44.000Z","issues":115,"_content":"\n#### 问题描述\n我们在事件中通常需要获取控件的值，通常通过event.target.value的方式来取值，在绑定事件时，event参数也不需要传递，在方法中直接使用即可。\n但是，有些时候需要传入一些其他的参数，比如需要循环绑定一些输入框，在绑定onChange事件时，需要传入索引index和数据源的索引进行对应\n```jsx\nonHandleChange(index,event){\n    let val=event.target.value\n}\n//关键代码\nsource.map((item,index)=>{\n      return <input type=\"text\" value={item.name} \n      onChange={this.onHandleChange.bind(this,index)} />\n});\n```  \n\n#### 代码解释\n有的同学应该已经看出区别了，onHandleChange在声明时有两个参数，但在调用时却只传递了一个参数，这就是今天要讲的:\n\n> **在给方法传递新参数时，方法原有的参数会排在新参数之后**\n\n做过reactjs的同学都知道，event这个参数是不需要手动传递的，直接在方法中声明就可以使用，如下代码：\n```jsx\nonChangeHandle(event){\n      let val=event.target.value;\n}\n\nrender(){\n  return (<div>\n    <input type=\"text\" onChange={this.onChangeHandle.bind(this)} />\n</div>)\n}\n```\n\n#### 摘自\n> 作者：不将就人生\n链接：https://www.jianshu.com/p/1026d71d04d6\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","source":"_posts/reactjs中事件传参-关于event.md","raw":"---\ntitle: reactjs中事件传参(关于event)\ndate: 2018-09-10 15:06:44\ntags: [react]\nissues: 115\n---\n\n#### 问题描述\n我们在事件中通常需要获取控件的值，通常通过event.target.value的方式来取值，在绑定事件时，event参数也不需要传递，在方法中直接使用即可。\n但是，有些时候需要传入一些其他的参数，比如需要循环绑定一些输入框，在绑定onChange事件时，需要传入索引index和数据源的索引进行对应\n```jsx\nonHandleChange(index,event){\n    let val=event.target.value\n}\n//关键代码\nsource.map((item,index)=>{\n      return <input type=\"text\" value={item.name} \n      onChange={this.onHandleChange.bind(this,index)} />\n});\n```  \n\n#### 代码解释\n有的同学应该已经看出区别了，onHandleChange在声明时有两个参数，但在调用时却只传递了一个参数，这就是今天要讲的:\n\n> **在给方法传递新参数时，方法原有的参数会排在新参数之后**\n\n做过reactjs的同学都知道，event这个参数是不需要手动传递的，直接在方法中声明就可以使用，如下代码：\n```jsx\nonChangeHandle(event){\n      let val=event.target.value;\n}\n\nrender(){\n  return (<div>\n    <input type=\"text\" onChange={this.onChangeHandle.bind(this)} />\n</div>)\n}\n```\n\n#### 摘自\n> 作者：不将就人生\n链接：https://www.jianshu.com/p/1026d71d04d6\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n","slug":"reactjs中事件传参-关于event","published":1,"updated":"2018-09-20T03:46:25.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q78000ih4a1l1y06z81","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>我们在事件中通常需要获取控件的值，通常通过event.target.value的方式来取值，在绑定事件时，event参数也不需要传递，在方法中直接使用即可。<br>但是，有些时候需要传入一些其他的参数，比如需要循环绑定一些输入框，在绑定onChange事件时，需要传入索引index和数据源的索引进行对应<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onHandleChange(index,event)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val=event.target.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//关键代码</span></span><br><span class=\"line\">source.map(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &lt;input type=\"text\" value=&#123;item.name&#125; </span><br><span class=\"line\">      onChange=&#123;this.onHandleChange.bind(this,index)&#125; /&gt;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">#### 代码解释</span><br><span class=\"line\">有的同学应该已经看出区别了，onHandleChange在声明时有两个参数，但在调用时却只传递了一个参数，这就是今天要讲的:</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; **在给方法传递新参数时，方法原有的参数会排在新参数之后**</span><br><span class=\"line\"></span><br><span class=\"line\">做过reactjs的同学都知道，event这个参数是不需要手动传递的，直接在方法中声明就可以使用，如下代码：</span><br><span class=\"line\">```jsx</span><br><span class=\"line\">onChangeHandle(event)&#123;</span><br><span class=\"line\">      let val=event.target.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  return (&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=\"text\" onChange=&#123;this.onChangeHandle.bind(this)&#125; /&gt;</span><br><span class=\"line\">&lt;/div&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"摘自\"><a href=\"#摘自\" class=\"headerlink\" title=\"摘自\"></a>摘自</h4><blockquote>\n<p>作者：不将就人生<br>链接：<a href=\"https://www.jianshu.com/p/1026d71d04d6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1026d71d04d6</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>我们在事件中通常需要获取控件的值，通常通过event.target.value的方式来取值，在绑定事件时，event参数也不需要传递，在方法中直接使用即可。<br>但是，有些时候需要传入一些其他的参数，比如需要循环绑定一些输入框，在绑定onChange事件时，需要传入索引index和数据源的索引进行对应<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onHandleChange(index,event)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val=event.target.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//关键代码</span></span><br><span class=\"line\">source.map(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &lt;input type=\"text\" value=&#123;item.name&#125; </span><br><span class=\"line\">      onChange=&#123;this.onHandleChange.bind(this,index)&#125; /&gt;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">#### 代码解释</span><br><span class=\"line\">有的同学应该已经看出区别了，onHandleChange在声明时有两个参数，但在调用时却只传递了一个参数，这就是今天要讲的:</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; **在给方法传递新参数时，方法原有的参数会排在新参数之后**</span><br><span class=\"line\"></span><br><span class=\"line\">做过reactjs的同学都知道，event这个参数是不需要手动传递的，直接在方法中声明就可以使用，如下代码：</span><br><span class=\"line\">```jsx</span><br><span class=\"line\">onChangeHandle(event)&#123;</span><br><span class=\"line\">      let val=event.target.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  return (&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=\"text\" onChange=&#123;this.onChangeHandle.bind(this)&#125; /&gt;</span><br><span class=\"line\">&lt;/div&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"摘自\"><a href=\"#摘自\" class=\"headerlink\" title=\"摘自\"></a>摘自</h4><blockquote>\n<p>作者：不将就人生<br>链接：<a href=\"https://www.jianshu.com/p/1026d71d04d6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1026d71d04d6</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n</blockquote>\n"},{"title":"使用hexo搭建github.io博客","issues":113,"date":"2018-09-07T02:57:11.000Z","_content":"\n### Introduction\n> 回顾一下我三年搭建博客的历程，最初是选择wordpress，Wordpress全部由php编写，数组库采用MySQL。优点：用户只需要将Wordpress的源代码复制到网站根目录下，然后访问网站，之后的安装操作全部在浏览器上完成。即使不是软件行业的人，也可以在几分钟之内完成安装工作。甚至很多虚拟主机供应商都提供了Wordpress的一键式安装工具。用户连上传文件的步骤都省了。缺点：项目太臃肿了，Wordpress耗损CPU严重，不容易操作，运行稍慢。尤其是后期文章数目较多的时候，想要登陆下网站的管理后台，心态简直是抓狂的。loading了好久，有时候还会失败，发一篇文章也很费劲，索性就不维护了。\n后来在github网站上找到一个vue模板：[github地址](https://github.com/ye63/vue-blog-use-github-issues)和[demo预览](https://ye63.com/jy/)二次开发了一下，的确是实现了很多功能，也挺轻便的，样式也可以自定义，博客可以直接写在github的issue，很方便，用了三个月后才发现百度的搜索引擎居然只收录了首页，搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。而且github api在国内访问速度也没有想象中那么快，可能是github的CDN被墙屏了。\n 使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度,但是这对于一个熟悉git操作的前端开发工程师来说，都不算什么的。重点是hexo和github.io的域名和服务器都是**免费**的。当然也可以选择用自己的服务器和域名。\n\n ### Quick Start\n #### 安装 node,git，注册好github账号\n (网站有很多教程，安装方法这里就不详细展开了，**注意:github账号用户名一定不能有大写.**)\n\n #### 安装hexo:\n ```\n npm install -g hexo\n ```\n \n#### 创建hexo文件夹:\ncmd窗口切换到对应的目录下,然后执行: `hexo init`\n也可以在 E:\\hexo 下右键,选择git bash,在窗口中执行`hexo init`\n自动安装了需要的文件.\n\n#### 安装依赖:\n继续执行: `npm install`\n\n#### 完成本地安装:\n\n继续在 `E:\\hexo` 下执行:  `hexo generate`\n\n继续执行: `hexo server`\n\n然后在打开浏览器 `localhost:4000` ,就可以看到,本地已经安装好了.\n\n#### 在github上创建博客仓库:\n![image](https://user-images.githubusercontent.com/22697565/45201116-7ca05e00-b2a6-11e8-8e6c-8658ee49dc8f.png)\n 跳转的后如下填写:(其中Repository name的格式是 '用户名'.github.io  ),然后点创建仓库，Repository name必须和用户名（Owner）一致，不能有大写字母\n![image](https://user-images.githubusercontent.com/22697565/45201238-1e27af80-b2a7-11e8-8eb4-ad31cfbaf6f6.png)\n![image](https://user-images.githubusercontent.com/22697565/45201369-a73ee680-b2a7-11e8-9c20-8a347e477f0b.png)\n#### 创建SSH keys\n\n##### 监测是否有已经存在的SSH keys:\n打开 `git bash` 终端(可以在  E:\\hexo 下右键打开,也可以直接在开始菜单里打开)\n\n执行:  `$ ls -al ~/.ssh `\n![image](https://user-images.githubusercontent.com/22697565/45201445-f7b64400-b2a7-11e8-91d2-704c587815a6.png)\n\n##### 如果没有的话,就生成一个SSH keys: 写自己的邮箱\n`$ ssh-keygen -t rsa -C \"your_email@example.com\" `\n\n然后会出现:\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): \n```\n\n就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.输入一个密码,这个密码后面会用到,所以要记住咯\n\n##### 保存SSH keys:\n创建成功后,他会提示你SSH keys保存在哪里:\n```\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n\n# The key fingerprint is:\n\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n```\n##### 找到SSH keys:\n根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\\Users\\2000104591\\.ssh\n\n其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方\n\n#### 为github仓库添加SSH keys\n\n然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击'Add key'\n\n添加的过程中,还要再输入一次github的密码\n![image](https://user-images.githubusercontent.com/22697565/45201608-c0946280-b2a8-11e8-94f4-f091267ce8d7.png)\n\n#### 配置_config.yml文件并发布:\n\n在 `E:\\hexo`(文件根目录下) 下,有一个文件叫 _config.yml ,打开它,拉到最底下,做如下修改:　\n\n然后再执行:\n\n`hexo generate`\n\n`hexo deploy`\n\n然后访问: https://ye63.github.io/ (用户名改成自己的),就可以看到了.\n\n#### 快捷命令\n##### hexo 新建一篇文章给它添加分类和标签:\n```\nhexo new \"移动端限制input框只能输入数字\"\n```\n\n##### 通过mou编辑器打开：添加tags和categories\n```hexo \n---\ntitle: title #文章標題\ndate: 2016-06-01 23:47:44 #文章生成時間\ncategories: \"Hexo教程\" #文章分類目錄 可以省略\ntags: #文章标签 可以省略\n     - 标签1\n     - 标签2\ndescription: #你對本頁的描述 可以省略\n---\n```\n\n##### 发布\n```\nhexo clean && hexo g && hexo d\n```\n\n##### 创建新页面\n```\nhexo new page \"about\"\n```\n\n \n\n \n\n\n\n\n\n\n\n","source":"_posts/使用hexo搭建github-io博客.md","raw":"---\ntitle: 使用hexo搭建github.io博客\ncategories: \"Hexo教程\" #文章分類目錄 可以省略,\nissues: 113\ndate: 2018-09-07 10:57:11\ntags:\n---\n\n### Introduction\n> 回顾一下我三年搭建博客的历程，最初是选择wordpress，Wordpress全部由php编写，数组库采用MySQL。优点：用户只需要将Wordpress的源代码复制到网站根目录下，然后访问网站，之后的安装操作全部在浏览器上完成。即使不是软件行业的人，也可以在几分钟之内完成安装工作。甚至很多虚拟主机供应商都提供了Wordpress的一键式安装工具。用户连上传文件的步骤都省了。缺点：项目太臃肿了，Wordpress耗损CPU严重，不容易操作，运行稍慢。尤其是后期文章数目较多的时候，想要登陆下网站的管理后台，心态简直是抓狂的。loading了好久，有时候还会失败，发一篇文章也很费劲，索性就不维护了。\n后来在github网站上找到一个vue模板：[github地址](https://github.com/ye63/vue-blog-use-github-issues)和[demo预览](https://ye63.com/jy/)二次开发了一下，的确是实现了很多功能，也挺轻便的，样式也可以自定义，博客可以直接写在github的issue，很方便，用了三个月后才发现百度的搜索引擎居然只收录了首页，搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。而且github api在国内访问速度也没有想象中那么快，可能是github的CDN被墙屏了。\n 使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度,但是这对于一个熟悉git操作的前端开发工程师来说，都不算什么的。重点是hexo和github.io的域名和服务器都是**免费**的。当然也可以选择用自己的服务器和域名。\n\n ### Quick Start\n #### 安装 node,git，注册好github账号\n (网站有很多教程，安装方法这里就不详细展开了，**注意:github账号用户名一定不能有大写.**)\n\n #### 安装hexo:\n ```\n npm install -g hexo\n ```\n \n#### 创建hexo文件夹:\ncmd窗口切换到对应的目录下,然后执行: `hexo init`\n也可以在 E:\\hexo 下右键,选择git bash,在窗口中执行`hexo init`\n自动安装了需要的文件.\n\n#### 安装依赖:\n继续执行: `npm install`\n\n#### 完成本地安装:\n\n继续在 `E:\\hexo` 下执行:  `hexo generate`\n\n继续执行: `hexo server`\n\n然后在打开浏览器 `localhost:4000` ,就可以看到,本地已经安装好了.\n\n#### 在github上创建博客仓库:\n![image](https://user-images.githubusercontent.com/22697565/45201116-7ca05e00-b2a6-11e8-8e6c-8658ee49dc8f.png)\n 跳转的后如下填写:(其中Repository name的格式是 '用户名'.github.io  ),然后点创建仓库，Repository name必须和用户名（Owner）一致，不能有大写字母\n![image](https://user-images.githubusercontent.com/22697565/45201238-1e27af80-b2a7-11e8-8eb4-ad31cfbaf6f6.png)\n![image](https://user-images.githubusercontent.com/22697565/45201369-a73ee680-b2a7-11e8-9c20-8a347e477f0b.png)\n#### 创建SSH keys\n\n##### 监测是否有已经存在的SSH keys:\n打开 `git bash` 终端(可以在  E:\\hexo 下右键打开,也可以直接在开始菜单里打开)\n\n执行:  `$ ls -al ~/.ssh `\n![image](https://user-images.githubusercontent.com/22697565/45201445-f7b64400-b2a7-11e8-91d2-704c587815a6.png)\n\n##### 如果没有的话,就生成一个SSH keys: 写自己的邮箱\n`$ ssh-keygen -t rsa -C \"your_email@example.com\" `\n\n然后会出现:\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): \n```\n\n就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.输入一个密码,这个密码后面会用到,所以要记住咯\n\n##### 保存SSH keys:\n创建成功后,他会提示你SSH keys保存在哪里:\n```\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n\n# The key fingerprint is:\n\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n```\n##### 找到SSH keys:\n根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\\Users\\2000104591\\.ssh\n\n其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方\n\n#### 为github仓库添加SSH keys\n\n然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击'Add key'\n\n添加的过程中,还要再输入一次github的密码\n![image](https://user-images.githubusercontent.com/22697565/45201608-c0946280-b2a8-11e8-94f4-f091267ce8d7.png)\n\n#### 配置_config.yml文件并发布:\n\n在 `E:\\hexo`(文件根目录下) 下,有一个文件叫 _config.yml ,打开它,拉到最底下,做如下修改:　\n\n然后再执行:\n\n`hexo generate`\n\n`hexo deploy`\n\n然后访问: https://ye63.github.io/ (用户名改成自己的),就可以看到了.\n\n#### 快捷命令\n##### hexo 新建一篇文章给它添加分类和标签:\n```\nhexo new \"移动端限制input框只能输入数字\"\n```\n\n##### 通过mou编辑器打开：添加tags和categories\n```hexo \n---\ntitle: title #文章標題\ndate: 2016-06-01 23:47:44 #文章生成時間\ncategories: \"Hexo教程\" #文章分類目錄 可以省略\ntags: #文章标签 可以省略\n     - 标签1\n     - 标签2\ndescription: #你對本頁的描述 可以省略\n---\n```\n\n##### 发布\n```\nhexo clean && hexo g && hexo d\n```\n\n##### 创建新页面\n```\nhexo new page \"about\"\n```\n\n \n\n \n\n\n\n\n\n\n\n","slug":"使用hexo搭建github-io博客","published":1,"updated":"2018-09-20T03:46:25.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q7h000lh4a1kv2xkd6b","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><blockquote>\n<p>回顾一下我三年搭建博客的历程，最初是选择wordpress，Wordpress全部由php编写，数组库采用MySQL。优点：用户只需要将Wordpress的源代码复制到网站根目录下，然后访问网站，之后的安装操作全部在浏览器上完成。即使不是软件行业的人，也可以在几分钟之内完成安装工作。甚至很多虚拟主机供应商都提供了Wordpress的一键式安装工具。用户连上传文件的步骤都省了。缺点：项目太臃肿了，Wordpress耗损CPU严重，不容易操作，运行稍慢。尤其是后期文章数目较多的时候，想要登陆下网站的管理后台，心态简直是抓狂的。loading了好久，有时候还会失败，发一篇文章也很费劲，索性就不维护了。<br>后来在github网站上找到一个vue模板：<a href=\"https://github.com/ye63/vue-blog-use-github-issues\" target=\"_blank\" rel=\"noopener\">github地址</a>和<a href=\"https://ye63.com/jy/\" target=\"_blank\" rel=\"noopener\">demo预览</a>二次开发了一下，的确是实现了很多功能，也挺轻便的，样式也可以自定义，博客可以直接写在github的issue，很方便，用了三个月后才发现百度的搜索引擎居然只收录了首页，搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。而且github api在国内访问速度也没有想象中那么快，可能是github的CDN被墙屏了。<br> 使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度,但是这对于一个熟悉git操作的前端开发工程师来说，都不算什么的。重点是hexo和github.io的域名和服务器都是<strong>免费</strong>的。当然也可以选择用自己的服务器和域名。</p>\n</blockquote>\n<h3 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h3><h4 id=\"安装-node-git，注册好github账号\"><a href=\"#安装-node-git，注册好github账号\" class=\"headerlink\" title=\"安装 node,git，注册好github账号\"></a>安装 node,git，注册好github账号</h4><p> (网站有很多教程，安装方法这里就不详细展开了，<strong>注意:github账号用户名一定不能有大写.</strong>)</p>\n<h4 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo:\"></a>安装hexo:</h4> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建hexo文件夹\"><a href=\"#创建hexo文件夹\" class=\"headerlink\" title=\"创建hexo文件夹:\"></a>创建hexo文件夹:</h4><p>cmd窗口切换到对应的目录下,然后执行: <code>hexo init</code><br>也可以在 E:\\hexo 下右键,选择git bash,在窗口中执行<code>hexo init</code><br>自动安装了需要的文件.</p>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖:\"></a>安装依赖:</h4><p>继续执行: <code>npm install</code></p>\n<h4 id=\"完成本地安装\"><a href=\"#完成本地安装\" class=\"headerlink\" title=\"完成本地安装:\"></a>完成本地安装:</h4><p>继续在 <code>E:\\hexo</code> 下执行:  <code>hexo generate</code></p>\n<p>继续执行: <code>hexo server</code></p>\n<p>然后在打开浏览器 <code>localhost:4000</code> ,就可以看到,本地已经安装好了.</p>\n<h4 id=\"在github上创建博客仓库\"><a href=\"#在github上创建博客仓库\" class=\"headerlink\" title=\"在github上创建博客仓库:\"></a>在github上创建博客仓库:</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201116-7ca05e00-b2a6-11e8-8e6c-8658ee49dc8f.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p> 跳转的后如下填写:(其中Repository name的格式是 ‘用户名’.github.io  ),然后点创建仓库，Repository name必须和用户名（Owner）一致，不能有大写字母<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201238-1e27af80-b2a7-11e8-8eb4-ad31cfbaf6f6.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201369-a73ee680-b2a7-11e8-9c20-8a347e477f0b.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<h4 id=\"创建SSH-keys\"><a href=\"#创建SSH-keys\" class=\"headerlink\" title=\"创建SSH keys\"></a>创建SSH keys</h4><h5 id=\"监测是否有已经存在的SSH-keys\"><a href=\"#监测是否有已经存在的SSH-keys\" class=\"headerlink\" title=\"监测是否有已经存在的SSH keys:\"></a>监测是否有已经存在的SSH keys:</h5><p>打开 <code>git bash</code> 终端(可以在  E:\\hexo 下右键打开,也可以直接在开始菜单里打开)</p>\n<p>执行:  <code>$ ls -al ~/.ssh</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201445-f7b64400-b2a7-11e8-91d2-704c587815a6.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<h5 id=\"如果没有的话-就生成一个SSH-keys-写自己的邮箱\"><a href=\"#如果没有的话-就生成一个SSH-keys-写自己的邮箱\" class=\"headerlink\" title=\"如果没有的话,就生成一个SSH keys: 写自己的邮箱\"></a>如果没有的话,就生成一个SSH keys: 写自己的邮箱</h5><p><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>\n<p>然后会出现:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p>\n<p>就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.输入一个密码,这个密码后面会用到,所以要记住咯</p>\n<h5 id=\"保存SSH-keys\"><a href=\"#保存SSH-keys\" class=\"headerlink\" title=\"保存SSH keys:\"></a>保存SSH keys:</h5><p>创建成功后,他会提示你SSH keys保存在哪里:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your identification has been saved in /Users/you/.ssh/id_rsa.</span><br><span class=\"line\"></span><br><span class=\"line\"># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</span><br><span class=\"line\"></span><br><span class=\"line\"># The key fingerprint is:</span><br><span class=\"line\"></span><br><span class=\"line\"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"找到SSH-keys\"><a href=\"#找到SSH-keys\" class=\"headerlink\" title=\"找到SSH keys:\"></a>找到SSH keys:</h5><p>根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\\Users\\2000104591.ssh</p>\n<p>其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方</p>\n<h4 id=\"为github仓库添加SSH-keys\"><a href=\"#为github仓库添加SSH-keys\" class=\"headerlink\" title=\"为github仓库添加SSH keys\"></a>为github仓库添加SSH keys</h4><p>然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击’Add key’</p>\n<p>添加的过程中,还要再输入一次github的密码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201608-c0946280-b2a8-11e8-94f4-f091267ce8d7.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<h4 id=\"配置-config-yml文件并发布\"><a href=\"#配置-config-yml文件并发布\" class=\"headerlink\" title=\"配置_config.yml文件并发布:\"></a>配置_config.yml文件并发布:</h4><p>在 <code>E:\\hexo</code>(文件根目录下) 下,有一个文件叫 _config.yml ,打开它,拉到最底下,做如下修改:　</p>\n<p>然后再执行:</p>\n<p><code>hexo generate</code></p>\n<p><code>hexo deploy</code></p>\n<p>然后访问: <a href=\"https://ye63.github.io/\" target=\"_blank\" rel=\"noopener\">https://ye63.github.io/</a> (用户名改成自己的),就可以看到了.</p>\n<h4 id=\"快捷命令\"><a href=\"#快捷命令\" class=\"headerlink\" title=\"快捷命令\"></a>快捷命令</h4><h5 id=\"hexo-新建一篇文章给它添加分类和标签\"><a href=\"#hexo-新建一篇文章给它添加分类和标签\" class=\"headerlink\" title=\"hexo 新建一篇文章给它添加分类和标签:\"></a>hexo 新建一篇文章给它添加分类和标签:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;移动端限制input框只能输入数字&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过mou编辑器打开：添加tags和categories\"><a href=\"#通过mou编辑器打开：添加tags和categories\" class=\"headerlink\" title=\"通过mou编辑器打开：添加tags和categories\"></a>通过mou编辑器打开：添加tags和categories</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: title #文章標題</span><br><span class=\"line\">date: 2016-06-01 23:47:44 #文章生成時間</span><br><span class=\"line\">categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略</span><br><span class=\"line\">tags: #文章标签 可以省略</span><br><span class=\"line\">     - 标签1</span><br><span class=\"line\">     - 标签2</span><br><span class=\"line\">description: #你對本頁的描述 可以省略</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h5 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建新页面\"><a href=\"#创建新页面\" class=\"headerlink\" title=\"创建新页面\"></a>创建新页面</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><blockquote>\n<p>回顾一下我三年搭建博客的历程，最初是选择wordpress，Wordpress全部由php编写，数组库采用MySQL。优点：用户只需要将Wordpress的源代码复制到网站根目录下，然后访问网站，之后的安装操作全部在浏览器上完成。即使不是软件行业的人，也可以在几分钟之内完成安装工作。甚至很多虚拟主机供应商都提供了Wordpress的一键式安装工具。用户连上传文件的步骤都省了。缺点：项目太臃肿了，Wordpress耗损CPU严重，不容易操作，运行稍慢。尤其是后期文章数目较多的时候，想要登陆下网站的管理后台，心态简直是抓狂的。loading了好久，有时候还会失败，发一篇文章也很费劲，索性就不维护了。<br>后来在github网站上找到一个vue模板：<a href=\"https://github.com/ye63/vue-blog-use-github-issues\" target=\"_blank\" rel=\"noopener\">github地址</a>和<a href=\"https://ye63.com/jy/\" target=\"_blank\" rel=\"noopener\">demo预览</a>二次开发了一下，的确是实现了很多功能，也挺轻便的，样式也可以自定义，博客可以直接写在github的issue，很方便，用了三个月后才发现百度的搜索引擎居然只收录了首页，搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。而且github api在国内访问速度也没有想象中那么快，可能是github的CDN被墙屏了。<br> 使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度,但是这对于一个熟悉git操作的前端开发工程师来说，都不算什么的。重点是hexo和github.io的域名和服务器都是<strong>免费</strong>的。当然也可以选择用自己的服务器和域名。</p>\n</blockquote>\n<h3 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h3><h4 id=\"安装-node-git，注册好github账号\"><a href=\"#安装-node-git，注册好github账号\" class=\"headerlink\" title=\"安装 node,git，注册好github账号\"></a>安装 node,git，注册好github账号</h4><p> (网站有很多教程，安装方法这里就不详细展开了，<strong>注意:github账号用户名一定不能有大写.</strong>)</p>\n<h4 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo:\"></a>安装hexo:</h4> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建hexo文件夹\"><a href=\"#创建hexo文件夹\" class=\"headerlink\" title=\"创建hexo文件夹:\"></a>创建hexo文件夹:</h4><p>cmd窗口切换到对应的目录下,然后执行: <code>hexo init</code><br>也可以在 E:\\hexo 下右键,选择git bash,在窗口中执行<code>hexo init</code><br>自动安装了需要的文件.</p>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖:\"></a>安装依赖:</h4><p>继续执行: <code>npm install</code></p>\n<h4 id=\"完成本地安装\"><a href=\"#完成本地安装\" class=\"headerlink\" title=\"完成本地安装:\"></a>完成本地安装:</h4><p>继续在 <code>E:\\hexo</code> 下执行:  <code>hexo generate</code></p>\n<p>继续执行: <code>hexo server</code></p>\n<p>然后在打开浏览器 <code>localhost:4000</code> ,就可以看到,本地已经安装好了.</p>\n<h4 id=\"在github上创建博客仓库\"><a href=\"#在github上创建博客仓库\" class=\"headerlink\" title=\"在github上创建博客仓库:\"></a>在github上创建博客仓库:</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201116-7ca05e00-b2a6-11e8-8e6c-8658ee49dc8f.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p> 跳转的后如下填写:(其中Repository name的格式是 ‘用户名’.github.io  ),然后点创建仓库，Repository name必须和用户名（Owner）一致，不能有大写字母<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201238-1e27af80-b2a7-11e8-8eb4-ad31cfbaf6f6.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201369-a73ee680-b2a7-11e8-9c20-8a347e477f0b.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<h4 id=\"创建SSH-keys\"><a href=\"#创建SSH-keys\" class=\"headerlink\" title=\"创建SSH keys\"></a>创建SSH keys</h4><h5 id=\"监测是否有已经存在的SSH-keys\"><a href=\"#监测是否有已经存在的SSH-keys\" class=\"headerlink\" title=\"监测是否有已经存在的SSH keys:\"></a>监测是否有已经存在的SSH keys:</h5><p>打开 <code>git bash</code> 终端(可以在  E:\\hexo 下右键打开,也可以直接在开始菜单里打开)</p>\n<p>执行:  <code>$ ls -al ~/.ssh</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201445-f7b64400-b2a7-11e8-91d2-704c587815a6.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<h5 id=\"如果没有的话-就生成一个SSH-keys-写自己的邮箱\"><a href=\"#如果没有的话-就生成一个SSH-keys-写自己的邮箱\" class=\"headerlink\" title=\"如果没有的话,就生成一个SSH keys: 写自己的邮箱\"></a>如果没有的话,就生成一个SSH keys: 写自己的邮箱</h5><p><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>\n<p>然后会出现:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p>\n<p>就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.输入一个密码,这个密码后面会用到,所以要记住咯</p>\n<h5 id=\"保存SSH-keys\"><a href=\"#保存SSH-keys\" class=\"headerlink\" title=\"保存SSH keys:\"></a>保存SSH keys:</h5><p>创建成功后,他会提示你SSH keys保存在哪里:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your identification has been saved in /Users/you/.ssh/id_rsa.</span><br><span class=\"line\"></span><br><span class=\"line\"># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</span><br><span class=\"line\"></span><br><span class=\"line\"># The key fingerprint is:</span><br><span class=\"line\"></span><br><span class=\"line\"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"找到SSH-keys\"><a href=\"#找到SSH-keys\" class=\"headerlink\" title=\"找到SSH keys:\"></a>找到SSH keys:</h5><p>根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\\Users\\2000104591.ssh</p>\n<p>其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方</p>\n<h4 id=\"为github仓库添加SSH-keys\"><a href=\"#为github仓库添加SSH-keys\" class=\"headerlink\" title=\"为github仓库添加SSH keys\"></a>为github仓库添加SSH keys</h4><p>然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击’Add key’</p>\n<p>添加的过程中,还要再输入一次github的密码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-images.githubusercontent.com/22697565/45201608-c0946280-b2a8-11e8-94f4-f091267ce8d7.png\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<h4 id=\"配置-config-yml文件并发布\"><a href=\"#配置-config-yml文件并发布\" class=\"headerlink\" title=\"配置_config.yml文件并发布:\"></a>配置_config.yml文件并发布:</h4><p>在 <code>E:\\hexo</code>(文件根目录下) 下,有一个文件叫 _config.yml ,打开它,拉到最底下,做如下修改:　</p>\n<p>然后再执行:</p>\n<p><code>hexo generate</code></p>\n<p><code>hexo deploy</code></p>\n<p>然后访问: <a href=\"https://ye63.github.io/\" target=\"_blank\" rel=\"noopener\">https://ye63.github.io/</a> (用户名改成自己的),就可以看到了.</p>\n<h4 id=\"快捷命令\"><a href=\"#快捷命令\" class=\"headerlink\" title=\"快捷命令\"></a>快捷命令</h4><h5 id=\"hexo-新建一篇文章给它添加分类和标签\"><a href=\"#hexo-新建一篇文章给它添加分类和标签\" class=\"headerlink\" title=\"hexo 新建一篇文章给它添加分类和标签:\"></a>hexo 新建一篇文章给它添加分类和标签:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;移动端限制input框只能输入数字&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过mou编辑器打开：添加tags和categories\"><a href=\"#通过mou编辑器打开：添加tags和categories\" class=\"headerlink\" title=\"通过mou编辑器打开：添加tags和categories\"></a>通过mou编辑器打开：添加tags和categories</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: title #文章標題</span><br><span class=\"line\">date: 2016-06-01 23:47:44 #文章生成時間</span><br><span class=\"line\">categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略</span><br><span class=\"line\">tags: #文章标签 可以省略</span><br><span class=\"line\">     - 标签1</span><br><span class=\"line\">     - 标签2</span><br><span class=\"line\">description: #你對本頁的描述 可以省略</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h5 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建新页面\"><a href=\"#创建新页面\" class=\"headerlink\" title=\"创建新页面\"></a>创建新页面</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"redux入门","date":"2018-09-28T11:43:17.000Z","_content":"Redux由Flux演变而来，提供几个简单的API来实现状态管理，所谓状态指的是应用数据，所以，Redux本质上是用来管理数据的。\n进一步，Redux配合支持数据绑定的视图库使用，就可以将应用状态和视图一一对应，开发者不需要再去关心DOM操作，只关心如何组织数据即可。\n\n>由于Redux对于数据的管理拆分很细，一时间会有很多概念，并且Redux有自己丰富的生态，所以容易眼花缭乱。\n所以强烈建议从头开始一步一步的来，深入体验并理解Redux的思想，不要步子迈太大。\n✦ 不要一开始过多的纠结代码放在哪个目录\n✦ 不要一开始就想对action和reducer的代码做精简\n✦ 不要一开始就考虑数据缓存，离线数据等问题\n✦ 不要一开始就过度设计数据，考虑数据扁平化的问题\n反正一句话，饭要一口一口的吃，路要一步一步的走，Redux对于状态管理的东西拆得太细，需要多花一些时间去体会。\n\n## Redux是什么？\nRedux其实很简单，总结起来就三句话：\n✦ 将整个应用的state储存在唯一的store对象中。\n✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。\n✦ 使用reducer来描述action如何改变state。\n\n是的，简而言之就是：Redux让应用的数据被集中管理，并且只能通过触发action的方式来修改，而具体如何修改state，是由reducer来决定的。\n\n那么问题来了：\n✦ store是什么鬼？\n✦ action是什么鬼？\n✦ reducer是什么鬼?\n✦ 最重要的是，为啥要使用Redux，它能给我们带什么什么好处？或者说，引入这么一个状态理器到底有啥用？\n\n接下来，我们先捉这三只鬼。\n\nstore是什么鬼？\n前面提过，Redux的目的就是为了对应用数据进行集中管理，也就是state，而state是个普通对象。为了防止state被不小心更新，Redux创建了store对象，专门用来管理state数据。\n\n所以，store就是state的守门员，管理并维护应用数据。\n\n### 创建store\n我们通过createStore(reducer, [initialState], enhancer)的方式来创建store。需要注意的是，应用中应该有且只有一个store。\n```js\nimport { createStore } from 'redux'\n\n// 这是reducer，后文会详细介绍\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([ action.text ])\n    default:\n      return state\n  }\n}\n\n// 创建store，并且给state一个初始值['HTML']\nlet store = createStore(todos, [ 'HTML' ])\n\n// state.dispatch()，最常用的API\n// 修改state的唯一方式就是调用store.dispatch()方法\n// 显然，其中的描述性对象\n// {\n//  type: 'ADD_TODO',\n//  text: 'CSS'\n// }\n// 就是action\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'CSS'\n})\n\n// store.getState()，另一个常用的API\n// 用来获取state的值\nconsole.log(store.getState());  // [ 'HTML', 'CSS' ]\n```\n\n### store的API们\nstore的API很简单，这儿我按重要顺序列出所有的API，主要记住前两个。\n✦ dispatch(action)：触发action，再次声明，这是改变state的唯一方式，请默念两次\n✦ getState()：获取当前的state\n✦ subscribe(listener)：注册一个监听函数，state发生变化时触发\n✦ replaceReducer(nextReducer)：替换reducer，用得较少\n\n总结一下，store提供了简单的API，用来管理应用内的数据，它限制了只能通过dispatch(action)来修改state，那么这个action是什么呢？\n\n### action是什么鬼？\n前文提过，action就是一个描述性的普通对象，所以它非常简单！说白了，就是一坨数据，然后这坨数据有名字。\n\n##### action\naction是一个描述性的普通对象。推荐如下的action结构，type是action的名称，payload是附带的数据。\n```js\n{\n    // 显然，这个名字取得很浅显易懂\n    type: UPDATE_ARTICLES_LIST,\n    payload: {\n        articles: articles,\n        lastkey: lastkey\n    }\n}\n```\n值得注意的是：实际项目中，我们应该尽量减少action中附带的数据，比如想要更新某篇文章的标题，我们只需要携带文章id和文章新标题即可，而不需要携带整个新文章字段。\n为了让action更便于维护，我们通常使用action creator而不是action。\n\n##### action creator\naction create就是一个简单的函数，直接将action作为返回值。\n```js\n// action creator，返回一个action\n// 除此之外，没有其他的动作\nfunction updateArticlesList(normalizeData, lastkey) {\n    return {\n        type: UPDATE_ARTICLES_LIST,\n        payload: {\n            normalizeData: normalizeData,\n            listLastkey: lastkey\n        }\n    }\n}\n\n\n// 通过dispatch触发一个action，这是我们修改state的唯一方式\ndispatch(updateArticlesList(\n    normalizeData,\n    lastkey\n));\n\n// 将dispatch(action)整个动作取个别名，方便调用\nconst updatePosts = (normalizeData, lastkey) => {\n    return dispatch(updateArticlesList(\n        normalizeData,\n        lastkey\n    ));\n}\n\nupdatePosts(...);\n```\n### 那么为什么需要action creatore呢？\n试想一个场景，我们有好几处dispatch(action)，现在突然想要修改这个action的定义，那么我们需要修改所有地方，代码也比较冗余!\n而使用action creator，相当于对action做了简单的封装，避免了这些问题。既灵活又便于维护！\n\n##### 异步action creator\n我们已经知道，修改state的唯一方式就是触发action，也就是dispatch(action)。\n但是如果是异步操作，比如一个网络请求，我们需要等到请求返回之后才会返回action，怎么办呢？\n```jsx\nfunction updateArticlesList() {\n    return GET(url).then(function(res) {\n        // 难道直接return action？\n        // 显然是不行的，这儿的返回值并不是updateArticlesList函数的返回值\n        return action;\n    }).catch(function(err) {\n        console.log(err);\n    });\n}\n```\n对于异步场景，我们的解决方案是返回函数而不是直接返回action。就像下面这样。\n为了让dispatch方法可以接受函数作为参数，我们需要使用redux-thunk这个中间件。\n\n```jsx\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducer.js';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n```\n然后你就可以dispatch一个函数了\n```jsx\nfunction fetchArticlesList() {\n    // 传入dispatch/getstate，当然是为了获取state以及更新state\n    return (dispatch, getState) => {\n        return GET(url).then(function(res) {\n            dispatch(updateArticlesList(\n                normalizeData,\n                lastkey\n            ));\n        }).catch(function(err) {\n            console.log(err);\n        });\n    }\n}\n```\n看起来有点迷糊？其实就是把异步请求抽象成action creator，然后放到了redux的代码中。\n试想一下，如果没有这种方式，你会怎么去处理异步请求？\n是不是会在组件或者页面中去发异步请求，然后在回调函数中dispatch(action)更新state。本质上也没太大区别。但是好处却是很明显的。\n\n稍微提一下，如果我们可以使用async/await的话，异步action creator可以长得和同步action creator差不多。\n\naction就是一坨数据，它并没有告诉Redux应该怎么去更新state，接下来介绍的reducer就是负责如何更新state这个工作的。\n\n##### reducer是什么鬼？\naction本身没有任何意义，就是一个描述性的普通对象。它并没有说明这个数据应该如何更新state。\n具体如何更新state，是由reducer决定的。reducer的核心就一行代码：(state, action) => newstate\n```js\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n    [UPDATE_ARTICLES_DETAIL]: (articles, action) => articles,\n    [UPDATE_ARTICLES_LIST]: (articles, action) => {\n        let payload = action.payload,\n            normalizeData = payload.normalizeData,\n            list = articles.list.concat(normalizeData.result),\n            listLastkey = payload.listLastkey;\n\n        // 更新articles.list字段和articles.lastkey字段\n        // 这儿为什么不是state，而是articles呢？留着后文介绍\n        return updateObject(articles, {\n            list,\n            listLastkey\n        });\n    }\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nexport function articlesReducer(articles = {\n    list: [],\n    listLastkey: 0\n}, action) {\n    const handler = ACTION_HANDLERS[action.type]\n\n    return handler ? handler(articles, action) : articles\n}\n```\n\nreducer函数应该是纯函数，它要保证：只要传入参数相同，那么返回的新state就一定相同。\n所以永远不要再reducer中做如下操作：\n✦ 修改传入的state参数\n✦ 执行有副作用的操作，比如API请求，路由跳转等\n✦ 调用非纯函数，比如Math.random()或Date.now()\n\n而一旦state变得复杂、层级较多的时候，如何设计reducer就是一个比较复杂的话题了。\n关于如何设计state？如何分拆reducer？reducer之间如何共享数据？以及如何重构reducer的代码？可以移步另一篇博客：如何最佳实践的设计reducer。\n\n那么，回到最初的话题，引入Redux到我们的应用中，到底有什么好处？我们为什么需要一个专门的状态管理器？\n\n### 为啥要使用redux？\n早些时候，前端并没有这么复杂，几乎不怎么涉及数据管理。\n随着前端的发展，前端也开始引入MVC之类的架构，对数据、视图、逻辑进行拆分处理。为了保持数据和视图的同步，我们会频繁的操作DOM元素。简直是噩梦。\n而后KnockoutJS，angularJS等出现了，他们都支持数据绑定，终于让开发可以不在频繁的操作DOM，而是仅仅修改数据，然后自动同步到view。\n但这还不够彻底，数据仍然是分散的。我们会在controller中写很多操作数据、操作视图的代码，甚至存在冗余数据，想要修改、更新、同步的话，有很大的隐患。\nRedux的出现，提供了对数据的集中管理，让单向数据流成为了可能。\n另外，Redux还让前后端彻底分离变成了可能，这一点也有极大的意义。\n\n### Redux的数据流\nRedux通过一些限制告诉你：数据只能保存在我这儿，别想太分散！想要修改数据？告诉我一个带新数据的action，我会通过reducer自动修改，然后返回修改后的数据给你！\n是的，redux很想“数据库”，数据被集中存储，并且只能通过“预先定义的action操作”来修改。\n\n更厉害的是，配上支持数据绑定的视图库，你会发现一个神奇的事情：\n之前我们是面向view和controller编程，随着项目的复杂，代码会彼此影响而且数据会分散到各处。\n而引入redux之后，我们单纯的面向数据编程即可，我们在Redux中统一的管理数据，然后数据变换会反映到view上，而数据上的交互，本质上也是触发了Redux中的action。如下图\n\n\n### Redux数据流\n所以，设计redux程序的时候，提前想清楚state的结构尤其重要，就好比设计数据库表结构之于后台。\n\n服务器渲染让前后端彻底分离成为了可能\n上图也可以看出，Redux构建出一份单向数据流。这让服务端渲染变成了可能，而这个特性，让前后端彻底分离变成了可能，还不用担心SEO的问题。\n想当初，为了解决前后端分离的问题，大家费尽心思，奈何进展甚微，淘宝甚至提出中途岛midway项目，通过中间搭建由前端维护的Nodejs服务器来实现简单的渲染然后返回HTML，但其实这个Nodejs服务器一点都不简单，需要考虑太多东西，比如安全、性能、缓存等。\n\n### 总结\nRedux主要用于对数据进行集中管理，并且让整个应用的数据流变得清晰。让应用开发更流畅，数据管理更有效。有了Redux，开发者们慢慢的转化为面向数据编程，而不再是频繁的操作DOM，维护越来越复杂的controller逻辑。\n简单来说，Redux的东西不多，更重要的是理解它的思路：\n✦ 将整个应用的state储存在唯一的store对象中。\n✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。\n✦ 使用reducer来描述action如何改变state。\n✦ Redux的单向数据流，可以实现服务端渲染，让前后端彻底分离成为可能，这个有里程碑的意义。\n✦ Redux非常适合复杂的应用，尤其是多交互、多数据源的应用。\n\n还是那句话，Redux将数据管理拆得很细，所以会有很多新东西去了解，但其实只要了解它的思想，其他的就很顺其自然了。\n\n作者：齐修_qixiuss\n链接：https://www.jianshu.com/p/d296a8c34936\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","source":"_posts/redux入门.md","raw":"---\ntitle: redux入门\ncategories: 前端\ndate: 2018-09-28 19:43:17\ntags: [react]\n---\nRedux由Flux演变而来，提供几个简单的API来实现状态管理，所谓状态指的是应用数据，所以，Redux本质上是用来管理数据的。\n进一步，Redux配合支持数据绑定的视图库使用，就可以将应用状态和视图一一对应，开发者不需要再去关心DOM操作，只关心如何组织数据即可。\n\n>由于Redux对于数据的管理拆分很细，一时间会有很多概念，并且Redux有自己丰富的生态，所以容易眼花缭乱。\n所以强烈建议从头开始一步一步的来，深入体验并理解Redux的思想，不要步子迈太大。\n✦ 不要一开始过多的纠结代码放在哪个目录\n✦ 不要一开始就想对action和reducer的代码做精简\n✦ 不要一开始就考虑数据缓存，离线数据等问题\n✦ 不要一开始就过度设计数据，考虑数据扁平化的问题\n反正一句话，饭要一口一口的吃，路要一步一步的走，Redux对于状态管理的东西拆得太细，需要多花一些时间去体会。\n\n## Redux是什么？\nRedux其实很简单，总结起来就三句话：\n✦ 将整个应用的state储存在唯一的store对象中。\n✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。\n✦ 使用reducer来描述action如何改变state。\n\n是的，简而言之就是：Redux让应用的数据被集中管理，并且只能通过触发action的方式来修改，而具体如何修改state，是由reducer来决定的。\n\n那么问题来了：\n✦ store是什么鬼？\n✦ action是什么鬼？\n✦ reducer是什么鬼?\n✦ 最重要的是，为啥要使用Redux，它能给我们带什么什么好处？或者说，引入这么一个状态理器到底有啥用？\n\n接下来，我们先捉这三只鬼。\n\nstore是什么鬼？\n前面提过，Redux的目的就是为了对应用数据进行集中管理，也就是state，而state是个普通对象。为了防止state被不小心更新，Redux创建了store对象，专门用来管理state数据。\n\n所以，store就是state的守门员，管理并维护应用数据。\n\n### 创建store\n我们通过createStore(reducer, [initialState], enhancer)的方式来创建store。需要注意的是，应用中应该有且只有一个store。\n```js\nimport { createStore } from 'redux'\n\n// 这是reducer，后文会详细介绍\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([ action.text ])\n    default:\n      return state\n  }\n}\n\n// 创建store，并且给state一个初始值['HTML']\nlet store = createStore(todos, [ 'HTML' ])\n\n// state.dispatch()，最常用的API\n// 修改state的唯一方式就是调用store.dispatch()方法\n// 显然，其中的描述性对象\n// {\n//  type: 'ADD_TODO',\n//  text: 'CSS'\n// }\n// 就是action\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'CSS'\n})\n\n// store.getState()，另一个常用的API\n// 用来获取state的值\nconsole.log(store.getState());  // [ 'HTML', 'CSS' ]\n```\n\n### store的API们\nstore的API很简单，这儿我按重要顺序列出所有的API，主要记住前两个。\n✦ dispatch(action)：触发action，再次声明，这是改变state的唯一方式，请默念两次\n✦ getState()：获取当前的state\n✦ subscribe(listener)：注册一个监听函数，state发生变化时触发\n✦ replaceReducer(nextReducer)：替换reducer，用得较少\n\n总结一下，store提供了简单的API，用来管理应用内的数据，它限制了只能通过dispatch(action)来修改state，那么这个action是什么呢？\n\n### action是什么鬼？\n前文提过，action就是一个描述性的普通对象，所以它非常简单！说白了，就是一坨数据，然后这坨数据有名字。\n\n##### action\naction是一个描述性的普通对象。推荐如下的action结构，type是action的名称，payload是附带的数据。\n```js\n{\n    // 显然，这个名字取得很浅显易懂\n    type: UPDATE_ARTICLES_LIST,\n    payload: {\n        articles: articles,\n        lastkey: lastkey\n    }\n}\n```\n值得注意的是：实际项目中，我们应该尽量减少action中附带的数据，比如想要更新某篇文章的标题，我们只需要携带文章id和文章新标题即可，而不需要携带整个新文章字段。\n为了让action更便于维护，我们通常使用action creator而不是action。\n\n##### action creator\naction create就是一个简单的函数，直接将action作为返回值。\n```js\n// action creator，返回一个action\n// 除此之外，没有其他的动作\nfunction updateArticlesList(normalizeData, lastkey) {\n    return {\n        type: UPDATE_ARTICLES_LIST,\n        payload: {\n            normalizeData: normalizeData,\n            listLastkey: lastkey\n        }\n    }\n}\n\n\n// 通过dispatch触发一个action，这是我们修改state的唯一方式\ndispatch(updateArticlesList(\n    normalizeData,\n    lastkey\n));\n\n// 将dispatch(action)整个动作取个别名，方便调用\nconst updatePosts = (normalizeData, lastkey) => {\n    return dispatch(updateArticlesList(\n        normalizeData,\n        lastkey\n    ));\n}\n\nupdatePosts(...);\n```\n### 那么为什么需要action creatore呢？\n试想一个场景，我们有好几处dispatch(action)，现在突然想要修改这个action的定义，那么我们需要修改所有地方，代码也比较冗余!\n而使用action creator，相当于对action做了简单的封装，避免了这些问题。既灵活又便于维护！\n\n##### 异步action creator\n我们已经知道，修改state的唯一方式就是触发action，也就是dispatch(action)。\n但是如果是异步操作，比如一个网络请求，我们需要等到请求返回之后才会返回action，怎么办呢？\n```jsx\nfunction updateArticlesList() {\n    return GET(url).then(function(res) {\n        // 难道直接return action？\n        // 显然是不行的，这儿的返回值并不是updateArticlesList函数的返回值\n        return action;\n    }).catch(function(err) {\n        console.log(err);\n    });\n}\n```\n对于异步场景，我们的解决方案是返回函数而不是直接返回action。就像下面这样。\n为了让dispatch方法可以接受函数作为参数，我们需要使用redux-thunk这个中间件。\n\n```jsx\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducer.js';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n```\n然后你就可以dispatch一个函数了\n```jsx\nfunction fetchArticlesList() {\n    // 传入dispatch/getstate，当然是为了获取state以及更新state\n    return (dispatch, getState) => {\n        return GET(url).then(function(res) {\n            dispatch(updateArticlesList(\n                normalizeData,\n                lastkey\n            ));\n        }).catch(function(err) {\n            console.log(err);\n        });\n    }\n}\n```\n看起来有点迷糊？其实就是把异步请求抽象成action creator，然后放到了redux的代码中。\n试想一下，如果没有这种方式，你会怎么去处理异步请求？\n是不是会在组件或者页面中去发异步请求，然后在回调函数中dispatch(action)更新state。本质上也没太大区别。但是好处却是很明显的。\n\n稍微提一下，如果我们可以使用async/await的话，异步action creator可以长得和同步action creator差不多。\n\naction就是一坨数据，它并没有告诉Redux应该怎么去更新state，接下来介绍的reducer就是负责如何更新state这个工作的。\n\n##### reducer是什么鬼？\naction本身没有任何意义，就是一个描述性的普通对象。它并没有说明这个数据应该如何更新state。\n具体如何更新state，是由reducer决定的。reducer的核心就一行代码：(state, action) => newstate\n```js\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n    [UPDATE_ARTICLES_DETAIL]: (articles, action) => articles,\n    [UPDATE_ARTICLES_LIST]: (articles, action) => {\n        let payload = action.payload,\n            normalizeData = payload.normalizeData,\n            list = articles.list.concat(normalizeData.result),\n            listLastkey = payload.listLastkey;\n\n        // 更新articles.list字段和articles.lastkey字段\n        // 这儿为什么不是state，而是articles呢？留着后文介绍\n        return updateObject(articles, {\n            list,\n            listLastkey\n        });\n    }\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nexport function articlesReducer(articles = {\n    list: [],\n    listLastkey: 0\n}, action) {\n    const handler = ACTION_HANDLERS[action.type]\n\n    return handler ? handler(articles, action) : articles\n}\n```\n\nreducer函数应该是纯函数，它要保证：只要传入参数相同，那么返回的新state就一定相同。\n所以永远不要再reducer中做如下操作：\n✦ 修改传入的state参数\n✦ 执行有副作用的操作，比如API请求，路由跳转等\n✦ 调用非纯函数，比如Math.random()或Date.now()\n\n而一旦state变得复杂、层级较多的时候，如何设计reducer就是一个比较复杂的话题了。\n关于如何设计state？如何分拆reducer？reducer之间如何共享数据？以及如何重构reducer的代码？可以移步另一篇博客：如何最佳实践的设计reducer。\n\n那么，回到最初的话题，引入Redux到我们的应用中，到底有什么好处？我们为什么需要一个专门的状态管理器？\n\n### 为啥要使用redux？\n早些时候，前端并没有这么复杂，几乎不怎么涉及数据管理。\n随着前端的发展，前端也开始引入MVC之类的架构，对数据、视图、逻辑进行拆分处理。为了保持数据和视图的同步，我们会频繁的操作DOM元素。简直是噩梦。\n而后KnockoutJS，angularJS等出现了，他们都支持数据绑定，终于让开发可以不在频繁的操作DOM，而是仅仅修改数据，然后自动同步到view。\n但这还不够彻底，数据仍然是分散的。我们会在controller中写很多操作数据、操作视图的代码，甚至存在冗余数据，想要修改、更新、同步的话，有很大的隐患。\nRedux的出现，提供了对数据的集中管理，让单向数据流成为了可能。\n另外，Redux还让前后端彻底分离变成了可能，这一点也有极大的意义。\n\n### Redux的数据流\nRedux通过一些限制告诉你：数据只能保存在我这儿，别想太分散！想要修改数据？告诉我一个带新数据的action，我会通过reducer自动修改，然后返回修改后的数据给你！\n是的，redux很想“数据库”，数据被集中存储，并且只能通过“预先定义的action操作”来修改。\n\n更厉害的是，配上支持数据绑定的视图库，你会发现一个神奇的事情：\n之前我们是面向view和controller编程，随着项目的复杂，代码会彼此影响而且数据会分散到各处。\n而引入redux之后，我们单纯的面向数据编程即可，我们在Redux中统一的管理数据，然后数据变换会反映到view上，而数据上的交互，本质上也是触发了Redux中的action。如下图\n\n\n### Redux数据流\n所以，设计redux程序的时候，提前想清楚state的结构尤其重要，就好比设计数据库表结构之于后台。\n\n服务器渲染让前后端彻底分离成为了可能\n上图也可以看出，Redux构建出一份单向数据流。这让服务端渲染变成了可能，而这个特性，让前后端彻底分离变成了可能，还不用担心SEO的问题。\n想当初，为了解决前后端分离的问题，大家费尽心思，奈何进展甚微，淘宝甚至提出中途岛midway项目，通过中间搭建由前端维护的Nodejs服务器来实现简单的渲染然后返回HTML，但其实这个Nodejs服务器一点都不简单，需要考虑太多东西，比如安全、性能、缓存等。\n\n### 总结\nRedux主要用于对数据进行集中管理，并且让整个应用的数据流变得清晰。让应用开发更流畅，数据管理更有效。有了Redux，开发者们慢慢的转化为面向数据编程，而不再是频繁的操作DOM，维护越来越复杂的controller逻辑。\n简单来说，Redux的东西不多，更重要的是理解它的思路：\n✦ 将整个应用的state储存在唯一的store对象中。\n✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。\n✦ 使用reducer来描述action如何改变state。\n✦ Redux的单向数据流，可以实现服务端渲染，让前后端彻底分离成为可能，这个有里程碑的意义。\n✦ Redux非常适合复杂的应用，尤其是多交互、多数据源的应用。\n\n还是那句话，Redux将数据管理拆得很细，所以会有很多新东西去了解，但其实只要了解它的思想，其他的就很顺其自然了。\n\n作者：齐修_qixiuss\n链接：https://www.jianshu.com/p/d296a8c34936\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","slug":"redux入门","published":1,"updated":"2018-09-28T11:46:34.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q7t000ph4a1kntmp2f9","content":"<p>Redux由Flux演变而来，提供几个简单的API来实现状态管理，所谓状态指的是应用数据，所以，Redux本质上是用来管理数据的。<br>进一步，Redux配合支持数据绑定的视图库使用，就可以将应用状态和视图一一对应，开发者不需要再去关心DOM操作，只关心如何组织数据即可。</p>\n<blockquote>\n<p>由于Redux对于数据的管理拆分很细，一时间会有很多概念，并且Redux有自己丰富的生态，所以容易眼花缭乱。<br>所以强烈建议从头开始一步一步的来，深入体验并理解Redux的思想，不要步子迈太大。<br>✦ 不要一开始过多的纠结代码放在哪个目录<br>✦ 不要一开始就想对action和reducer的代码做精简<br>✦ 不要一开始就考虑数据缓存，离线数据等问题<br>✦ 不要一开始就过度设计数据，考虑数据扁平化的问题<br>反正一句话，饭要一口一口的吃，路要一步一步的走，Redux对于状态管理的东西拆得太细，需要多花一些时间去体会。</p>\n</blockquote>\n<h2 id=\"Redux是什么？\"><a href=\"#Redux是什么？\" class=\"headerlink\" title=\"Redux是什么？\"></a>Redux是什么？</h2><p>Redux其实很简单，总结起来就三句话：<br>✦ 将整个应用的state储存在唯一的store对象中。<br>✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。<br>✦ 使用reducer来描述action如何改变state。</p>\n<p>是的，简而言之就是：Redux让应用的数据被集中管理，并且只能通过触发action的方式来修改，而具体如何修改state，是由reducer来决定的。</p>\n<p>那么问题来了：<br>✦ store是什么鬼？<br>✦ action是什么鬼？<br>✦ reducer是什么鬼?<br>✦ 最重要的是，为啥要使用Redux，它能给我们带什么什么好处？或者说，引入这么一个状态理器到底有啥用？</p>\n<p>接下来，我们先捉这三只鬼。</p>\n<p>store是什么鬼？<br>前面提过，Redux的目的就是为了对应用数据进行集中管理，也就是state，而state是个普通对象。为了防止state被不小心更新，Redux创建了store对象，专门用来管理state数据。</p>\n<p>所以，store就是state的守门员，管理并维护应用数据。</p>\n<h3 id=\"创建store\"><a href=\"#创建store\" class=\"headerlink\" title=\"创建store\"></a>创建store</h3><p>我们通过createStore(reducer, [initialState], enhancer)的方式来创建store。需要注意的是，应用中应该有且只有一个store。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是reducer，后文会详细介绍</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todos</span>(<span class=\"params\">state = [], action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'ADD_TODO'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.concat([ action.text ])</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建store，并且给state一个初始值['HTML']</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(todos, [ <span class=\"string\">'HTML'</span> ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state.dispatch()，最常用的API</span></span><br><span class=\"line\"><span class=\"comment\">// 修改state的唯一方式就是调用store.dispatch()方法</span></span><br><span class=\"line\"><span class=\"comment\">// 显然，其中的描述性对象</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  type: 'ADD_TODO',</span></span><br><span class=\"line\"><span class=\"comment\">//  text: 'CSS'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 就是action</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  text: <span class=\"string\">'CSS'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.getState()，另一个常用的API</span></span><br><span class=\"line\"><span class=\"comment\">// 用来获取state的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.getState());  <span class=\"comment\">// [ 'HTML', 'CSS' ]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"store的API们\"><a href=\"#store的API们\" class=\"headerlink\" title=\"store的API们\"></a>store的API们</h3><p>store的API很简单，这儿我按重要顺序列出所有的API，主要记住前两个。<br>✦ dispatch(action)：触发action，再次声明，这是改变state的唯一方式，请默念两次<br>✦ getState()：获取当前的state<br>✦ subscribe(listener)：注册一个监听函数，state发生变化时触发<br>✦ replaceReducer(nextReducer)：替换reducer，用得较少</p>\n<p>总结一下，store提供了简单的API，用来管理应用内的数据，它限制了只能通过dispatch(action)来修改state，那么这个action是什么呢？</p>\n<h3 id=\"action是什么鬼？\"><a href=\"#action是什么鬼？\" class=\"headerlink\" title=\"action是什么鬼？\"></a>action是什么鬼？</h3><p>前文提过，action就是一个描述性的普通对象，所以它非常简单！说白了，就是一坨数据，然后这坨数据有名字。</p>\n<h5 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h5><p>action是一个描述性的普通对象。推荐如下的action结构，type是action的名称，payload是附带的数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显然，这个名字取得很浅显易懂</span></span><br><span class=\"line\">    type: UPDATE_ARTICLES_LIST,</span><br><span class=\"line\">    payload: &#123;</span><br><span class=\"line\">        articles: articles,</span><br><span class=\"line\">        lastkey: lastkey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>值得注意的是：实际项目中，我们应该尽量减少action中附带的数据，比如想要更新某篇文章的标题，我们只需要携带文章id和文章新标题即可，而不需要携带整个新文章字段。<br>为了让action更便于维护，我们通常使用action creator而不是action。</p>\n<h5 id=\"action-creator\"><a href=\"#action-creator\" class=\"headerlink\" title=\"action creator\"></a>action creator</h5><p>action create就是一个简单的函数，直接将action作为返回值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// action creator，返回一个action</span></span><br><span class=\"line\"><span class=\"comment\">// 除此之外，没有其他的动作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateArticlesList</span>(<span class=\"params\">normalizeData, lastkey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: UPDATE_ARTICLES_LIST,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">            normalizeData: normalizeData,</span><br><span class=\"line\">            listLastkey: lastkey</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过dispatch触发一个action，这是我们修改state的唯一方式</span></span><br><span class=\"line\">dispatch(updateArticlesList(</span><br><span class=\"line\">    normalizeData,</span><br><span class=\"line\">    lastkey</span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将dispatch(action)整个动作取个别名，方便调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> updatePosts = <span class=\"function\">(<span class=\"params\">normalizeData, lastkey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(updateArticlesList(</span><br><span class=\"line\">        normalizeData,</span><br><span class=\"line\">        lastkey</span><br><span class=\"line\">    ));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">updatePosts(...);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"那么为什么需要action-creatore呢？\"><a href=\"#那么为什么需要action-creatore呢？\" class=\"headerlink\" title=\"那么为什么需要action creatore呢？\"></a>那么为什么需要action creatore呢？</h3><p>试想一个场景，我们有好几处dispatch(action)，现在突然想要修改这个action的定义，那么我们需要修改所有地方，代码也比较冗余!<br>而使用action creator，相当于对action做了简单的封装，避免了这些问题。既灵活又便于维护！</p>\n<h5 id=\"异步action-creator\"><a href=\"#异步action-creator\" class=\"headerlink\" title=\"异步action creator\"></a>异步action creator</h5><p>我们已经知道，修改state的唯一方式就是触发action，也就是dispatch(action)。<br>但是如果是异步操作，比如一个网络请求，我们需要等到请求返回之后才会返回action，怎么办呢？<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateArticlesList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GET(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 难道直接return action？</span></span><br><span class=\"line\">        <span class=\"comment\">// 显然是不行的，这儿的返回值并不是updateArticlesList函数的返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> action;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于异步场景，我们的解决方案是返回函数而不是直接返回action。就像下面这样。<br>为了让dispatch方法可以接受函数作为参数，我们需要使用redux-thunk这个中间件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; rootReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./reducer.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(</span><br><span class=\"line\">    rootReducer,</span><br><span class=\"line\">    applyMiddleware(thunk)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>然后你就可以dispatch一个函数了<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchArticlesList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传入dispatch/getstate，当然是为了获取state以及更新state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GET(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            dispatch(updateArticlesList(</span><br><span class=\"line\">                normalizeData,</span><br><span class=\"line\">                lastkey</span><br><span class=\"line\">            ));</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看起来有点迷糊？其实就是把异步请求抽象成action creator，然后放到了redux的代码中。<br>试想一下，如果没有这种方式，你会怎么去处理异步请求？<br>是不是会在组件或者页面中去发异步请求，然后在回调函数中dispatch(action)更新state。本质上也没太大区别。但是好处却是很明显的。</p>\n<p>稍微提一下，如果我们可以使用async/await的话，异步action creator可以长得和同步action creator差不多。</p>\n<p>action就是一坨数据，它并没有告诉Redux应该怎么去更新state，接下来介绍的reducer就是负责如何更新state这个工作的。</p>\n<h5 id=\"reducer是什么鬼？\"><a href=\"#reducer是什么鬼？\" class=\"headerlink\" title=\"reducer是什么鬼？\"></a>reducer是什么鬼？</h5><p>action本身没有任何意义，就是一个描述性的普通对象。它并没有说明这个数据应该如何更新state。<br>具体如何更新state，是由reducer决定的。reducer的核心就一行代码：(state, action) =&gt; newstate<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Action Handlers</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ACTION_HANDLERS = &#123;</span><br><span class=\"line\">    [UPDATE_ARTICLES_DETAIL]: <span class=\"function\">(<span class=\"params\">articles, action</span>) =&gt;</span> articles,</span><br><span class=\"line\">    [UPDATE_ARTICLES_LIST]: <span class=\"function\">(<span class=\"params\">articles, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> payload = action.payload,</span><br><span class=\"line\">            normalizeData = payload.normalizeData,</span><br><span class=\"line\">            list = articles.list.concat(normalizeData.result),</span><br><span class=\"line\">            listLastkey = payload.listLastkey;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新articles.list字段和articles.lastkey字段</span></span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么不是state，而是articles呢？留着后文介绍</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateObject(articles, &#123;</span><br><span class=\"line\">            list,</span><br><span class=\"line\">            listLastkey</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Reducer</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">articlesReducer</span>(<span class=\"params\">articles = &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    list: [],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    listLastkey: <span class=\"number\">0</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = ACTION_HANDLERS[action.type]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> handler ? handler(articles, action) : articles</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>reducer函数应该是纯函数，它要保证：只要传入参数相同，那么返回的新state就一定相同。<br>所以永远不要再reducer中做如下操作：<br>✦ 修改传入的state参数<br>✦ 执行有副作用的操作，比如API请求，路由跳转等<br>✦ 调用非纯函数，比如Math.random()或Date.now()</p>\n<p>而一旦state变得复杂、层级较多的时候，如何设计reducer就是一个比较复杂的话题了。<br>关于如何设计state？如何分拆reducer？reducer之间如何共享数据？以及如何重构reducer的代码？可以移步另一篇博客：如何最佳实践的设计reducer。</p>\n<p>那么，回到最初的话题，引入Redux到我们的应用中，到底有什么好处？我们为什么需要一个专门的状态管理器？</p>\n<h3 id=\"为啥要使用redux？\"><a href=\"#为啥要使用redux？\" class=\"headerlink\" title=\"为啥要使用redux？\"></a>为啥要使用redux？</h3><p>早些时候，前端并没有这么复杂，几乎不怎么涉及数据管理。<br>随着前端的发展，前端也开始引入MVC之类的架构，对数据、视图、逻辑进行拆分处理。为了保持数据和视图的同步，我们会频繁的操作DOM元素。简直是噩梦。<br>而后KnockoutJS，angularJS等出现了，他们都支持数据绑定，终于让开发可以不在频繁的操作DOM，而是仅仅修改数据，然后自动同步到view。<br>但这还不够彻底，数据仍然是分散的。我们会在controller中写很多操作数据、操作视图的代码，甚至存在冗余数据，想要修改、更新、同步的话，有很大的隐患。<br>Redux的出现，提供了对数据的集中管理，让单向数据流成为了可能。<br>另外，Redux还让前后端彻底分离变成了可能，这一点也有极大的意义。</p>\n<h3 id=\"Redux的数据流\"><a href=\"#Redux的数据流\" class=\"headerlink\" title=\"Redux的数据流\"></a>Redux的数据流</h3><p>Redux通过一些限制告诉你：数据只能保存在我这儿，别想太分散！想要修改数据？告诉我一个带新数据的action，我会通过reducer自动修改，然后返回修改后的数据给你！<br>是的，redux很想“数据库”，数据被集中存储，并且只能通过“预先定义的action操作”来修改。</p>\n<p>更厉害的是，配上支持数据绑定的视图库，你会发现一个神奇的事情：<br>之前我们是面向view和controller编程，随着项目的复杂，代码会彼此影响而且数据会分散到各处。<br>而引入redux之后，我们单纯的面向数据编程即可，我们在Redux中统一的管理数据，然后数据变换会反映到view上，而数据上的交互，本质上也是触发了Redux中的action。如下图</p>\n<h3 id=\"Redux数据流\"><a href=\"#Redux数据流\" class=\"headerlink\" title=\"Redux数据流\"></a>Redux数据流</h3><p>所以，设计redux程序的时候，提前想清楚state的结构尤其重要，就好比设计数据库表结构之于后台。</p>\n<p>服务器渲染让前后端彻底分离成为了可能<br>上图也可以看出，Redux构建出一份单向数据流。这让服务端渲染变成了可能，而这个特性，让前后端彻底分离变成了可能，还不用担心SEO的问题。<br>想当初，为了解决前后端分离的问题，大家费尽心思，奈何进展甚微，淘宝甚至提出中途岛midway项目，通过中间搭建由前端维护的Nodejs服务器来实现简单的渲染然后返回HTML，但其实这个Nodejs服务器一点都不简单，需要考虑太多东西，比如安全、性能、缓存等。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Redux主要用于对数据进行集中管理，并且让整个应用的数据流变得清晰。让应用开发更流畅，数据管理更有效。有了Redux，开发者们慢慢的转化为面向数据编程，而不再是频繁的操作DOM，维护越来越复杂的controller逻辑。<br>简单来说，Redux的东西不多，更重要的是理解它的思路：<br>✦ 将整个应用的state储存在唯一的store对象中。<br>✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。<br>✦ 使用reducer来描述action如何改变state。<br>✦ Redux的单向数据流，可以实现服务端渲染，让前后端彻底分离成为可能，这个有里程碑的意义。<br>✦ Redux非常适合复杂的应用，尤其是多交互、多数据源的应用。</p>\n<p>还是那句话，Redux将数据管理拆得很细，所以会有很多新东西去了解，但其实只要了解它的思想，其他的就很顺其自然了。</p>\n<p>作者：齐修_qixiuss<br>链接：<a href=\"https://www.jianshu.com/p/d296a8c34936\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d296a8c34936</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redux由Flux演变而来，提供几个简单的API来实现状态管理，所谓状态指的是应用数据，所以，Redux本质上是用来管理数据的。<br>进一步，Redux配合支持数据绑定的视图库使用，就可以将应用状态和视图一一对应，开发者不需要再去关心DOM操作，只关心如何组织数据即可。</p>\n<blockquote>\n<p>由于Redux对于数据的管理拆分很细，一时间会有很多概念，并且Redux有自己丰富的生态，所以容易眼花缭乱。<br>所以强烈建议从头开始一步一步的来，深入体验并理解Redux的思想，不要步子迈太大。<br>✦ 不要一开始过多的纠结代码放在哪个目录<br>✦ 不要一开始就想对action和reducer的代码做精简<br>✦ 不要一开始就考虑数据缓存，离线数据等问题<br>✦ 不要一开始就过度设计数据，考虑数据扁平化的问题<br>反正一句话，饭要一口一口的吃，路要一步一步的走，Redux对于状态管理的东西拆得太细，需要多花一些时间去体会。</p>\n</blockquote>\n<h2 id=\"Redux是什么？\"><a href=\"#Redux是什么？\" class=\"headerlink\" title=\"Redux是什么？\"></a>Redux是什么？</h2><p>Redux其实很简单，总结起来就三句话：<br>✦ 将整个应用的state储存在唯一的store对象中。<br>✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。<br>✦ 使用reducer来描述action如何改变state。</p>\n<p>是的，简而言之就是：Redux让应用的数据被集中管理，并且只能通过触发action的方式来修改，而具体如何修改state，是由reducer来决定的。</p>\n<p>那么问题来了：<br>✦ store是什么鬼？<br>✦ action是什么鬼？<br>✦ reducer是什么鬼?<br>✦ 最重要的是，为啥要使用Redux，它能给我们带什么什么好处？或者说，引入这么一个状态理器到底有啥用？</p>\n<p>接下来，我们先捉这三只鬼。</p>\n<p>store是什么鬼？<br>前面提过，Redux的目的就是为了对应用数据进行集中管理，也就是state，而state是个普通对象。为了防止state被不小心更新，Redux创建了store对象，专门用来管理state数据。</p>\n<p>所以，store就是state的守门员，管理并维护应用数据。</p>\n<h3 id=\"创建store\"><a href=\"#创建store\" class=\"headerlink\" title=\"创建store\"></a>创建store</h3><p>我们通过createStore(reducer, [initialState], enhancer)的方式来创建store。需要注意的是，应用中应该有且只有一个store。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是reducer，后文会详细介绍</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todos</span>(<span class=\"params\">state = [], action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'ADD_TODO'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.concat([ action.text ])</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建store，并且给state一个初始值['HTML']</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(todos, [ <span class=\"string\">'HTML'</span> ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state.dispatch()，最常用的API</span></span><br><span class=\"line\"><span class=\"comment\">// 修改state的唯一方式就是调用store.dispatch()方法</span></span><br><span class=\"line\"><span class=\"comment\">// 显然，其中的描述性对象</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  type: 'ADD_TODO',</span></span><br><span class=\"line\"><span class=\"comment\">//  text: 'CSS'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 就是action</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  text: <span class=\"string\">'CSS'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.getState()，另一个常用的API</span></span><br><span class=\"line\"><span class=\"comment\">// 用来获取state的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.getState());  <span class=\"comment\">// [ 'HTML', 'CSS' ]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"store的API们\"><a href=\"#store的API们\" class=\"headerlink\" title=\"store的API们\"></a>store的API们</h3><p>store的API很简单，这儿我按重要顺序列出所有的API，主要记住前两个。<br>✦ dispatch(action)：触发action，再次声明，这是改变state的唯一方式，请默念两次<br>✦ getState()：获取当前的state<br>✦ subscribe(listener)：注册一个监听函数，state发生变化时触发<br>✦ replaceReducer(nextReducer)：替换reducer，用得较少</p>\n<p>总结一下，store提供了简单的API，用来管理应用内的数据，它限制了只能通过dispatch(action)来修改state，那么这个action是什么呢？</p>\n<h3 id=\"action是什么鬼？\"><a href=\"#action是什么鬼？\" class=\"headerlink\" title=\"action是什么鬼？\"></a>action是什么鬼？</h3><p>前文提过，action就是一个描述性的普通对象，所以它非常简单！说白了，就是一坨数据，然后这坨数据有名字。</p>\n<h5 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h5><p>action是一个描述性的普通对象。推荐如下的action结构，type是action的名称，payload是附带的数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显然，这个名字取得很浅显易懂</span></span><br><span class=\"line\">    type: UPDATE_ARTICLES_LIST,</span><br><span class=\"line\">    payload: &#123;</span><br><span class=\"line\">        articles: articles,</span><br><span class=\"line\">        lastkey: lastkey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>值得注意的是：实际项目中，我们应该尽量减少action中附带的数据，比如想要更新某篇文章的标题，我们只需要携带文章id和文章新标题即可，而不需要携带整个新文章字段。<br>为了让action更便于维护，我们通常使用action creator而不是action。</p>\n<h5 id=\"action-creator\"><a href=\"#action-creator\" class=\"headerlink\" title=\"action creator\"></a>action creator</h5><p>action create就是一个简单的函数，直接将action作为返回值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// action creator，返回一个action</span></span><br><span class=\"line\"><span class=\"comment\">// 除此之外，没有其他的动作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateArticlesList</span>(<span class=\"params\">normalizeData, lastkey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: UPDATE_ARTICLES_LIST,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">            normalizeData: normalizeData,</span><br><span class=\"line\">            listLastkey: lastkey</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过dispatch触发一个action，这是我们修改state的唯一方式</span></span><br><span class=\"line\">dispatch(updateArticlesList(</span><br><span class=\"line\">    normalizeData,</span><br><span class=\"line\">    lastkey</span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将dispatch(action)整个动作取个别名，方便调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> updatePosts = <span class=\"function\">(<span class=\"params\">normalizeData, lastkey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(updateArticlesList(</span><br><span class=\"line\">        normalizeData,</span><br><span class=\"line\">        lastkey</span><br><span class=\"line\">    ));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">updatePosts(...);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"那么为什么需要action-creatore呢？\"><a href=\"#那么为什么需要action-creatore呢？\" class=\"headerlink\" title=\"那么为什么需要action creatore呢？\"></a>那么为什么需要action creatore呢？</h3><p>试想一个场景，我们有好几处dispatch(action)，现在突然想要修改这个action的定义，那么我们需要修改所有地方，代码也比较冗余!<br>而使用action creator，相当于对action做了简单的封装，避免了这些问题。既灵活又便于维护！</p>\n<h5 id=\"异步action-creator\"><a href=\"#异步action-creator\" class=\"headerlink\" title=\"异步action creator\"></a>异步action creator</h5><p>我们已经知道，修改state的唯一方式就是触发action，也就是dispatch(action)。<br>但是如果是异步操作，比如一个网络请求，我们需要等到请求返回之后才会返回action，怎么办呢？<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateArticlesList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GET(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 难道直接return action？</span></span><br><span class=\"line\">        <span class=\"comment\">// 显然是不行的，这儿的返回值并不是updateArticlesList函数的返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> action;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于异步场景，我们的解决方案是返回函数而不是直接返回action。就像下面这样。<br>为了让dispatch方法可以接受函数作为参数，我们需要使用redux-thunk这个中间件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; rootReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./reducer.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(</span><br><span class=\"line\">    rootReducer,</span><br><span class=\"line\">    applyMiddleware(thunk)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>然后你就可以dispatch一个函数了<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchArticlesList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传入dispatch/getstate，当然是为了获取state以及更新state</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GET(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            dispatch(updateArticlesList(</span><br><span class=\"line\">                normalizeData,</span><br><span class=\"line\">                lastkey</span><br><span class=\"line\">            ));</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看起来有点迷糊？其实就是把异步请求抽象成action creator，然后放到了redux的代码中。<br>试想一下，如果没有这种方式，你会怎么去处理异步请求？<br>是不是会在组件或者页面中去发异步请求，然后在回调函数中dispatch(action)更新state。本质上也没太大区别。但是好处却是很明显的。</p>\n<p>稍微提一下，如果我们可以使用async/await的话，异步action creator可以长得和同步action creator差不多。</p>\n<p>action就是一坨数据，它并没有告诉Redux应该怎么去更新state，接下来介绍的reducer就是负责如何更新state这个工作的。</p>\n<h5 id=\"reducer是什么鬼？\"><a href=\"#reducer是什么鬼？\" class=\"headerlink\" title=\"reducer是什么鬼？\"></a>reducer是什么鬼？</h5><p>action本身没有任何意义，就是一个描述性的普通对象。它并没有说明这个数据应该如何更新state。<br>具体如何更新state，是由reducer决定的。reducer的核心就一行代码：(state, action) =&gt; newstate<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Action Handlers</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ACTION_HANDLERS = &#123;</span><br><span class=\"line\">    [UPDATE_ARTICLES_DETAIL]: <span class=\"function\">(<span class=\"params\">articles, action</span>) =&gt;</span> articles,</span><br><span class=\"line\">    [UPDATE_ARTICLES_LIST]: <span class=\"function\">(<span class=\"params\">articles, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> payload = action.payload,</span><br><span class=\"line\">            normalizeData = payload.normalizeData,</span><br><span class=\"line\">            list = articles.list.concat(normalizeData.result),</span><br><span class=\"line\">            listLastkey = payload.listLastkey;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新articles.list字段和articles.lastkey字段</span></span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么不是state，而是articles呢？留着后文介绍</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateObject(articles, &#123;</span><br><span class=\"line\">            list,</span><br><span class=\"line\">            listLastkey</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Reducer</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">articlesReducer</span>(<span class=\"params\">articles = &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    list: [],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    listLastkey: <span class=\"number\">0</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = ACTION_HANDLERS[action.type]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> handler ? handler(articles, action) : articles</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>reducer函数应该是纯函数，它要保证：只要传入参数相同，那么返回的新state就一定相同。<br>所以永远不要再reducer中做如下操作：<br>✦ 修改传入的state参数<br>✦ 执行有副作用的操作，比如API请求，路由跳转等<br>✦ 调用非纯函数，比如Math.random()或Date.now()</p>\n<p>而一旦state变得复杂、层级较多的时候，如何设计reducer就是一个比较复杂的话题了。<br>关于如何设计state？如何分拆reducer？reducer之间如何共享数据？以及如何重构reducer的代码？可以移步另一篇博客：如何最佳实践的设计reducer。</p>\n<p>那么，回到最初的话题，引入Redux到我们的应用中，到底有什么好处？我们为什么需要一个专门的状态管理器？</p>\n<h3 id=\"为啥要使用redux？\"><a href=\"#为啥要使用redux？\" class=\"headerlink\" title=\"为啥要使用redux？\"></a>为啥要使用redux？</h3><p>早些时候，前端并没有这么复杂，几乎不怎么涉及数据管理。<br>随着前端的发展，前端也开始引入MVC之类的架构，对数据、视图、逻辑进行拆分处理。为了保持数据和视图的同步，我们会频繁的操作DOM元素。简直是噩梦。<br>而后KnockoutJS，angularJS等出现了，他们都支持数据绑定，终于让开发可以不在频繁的操作DOM，而是仅仅修改数据，然后自动同步到view。<br>但这还不够彻底，数据仍然是分散的。我们会在controller中写很多操作数据、操作视图的代码，甚至存在冗余数据，想要修改、更新、同步的话，有很大的隐患。<br>Redux的出现，提供了对数据的集中管理，让单向数据流成为了可能。<br>另外，Redux还让前后端彻底分离变成了可能，这一点也有极大的意义。</p>\n<h3 id=\"Redux的数据流\"><a href=\"#Redux的数据流\" class=\"headerlink\" title=\"Redux的数据流\"></a>Redux的数据流</h3><p>Redux通过一些限制告诉你：数据只能保存在我这儿，别想太分散！想要修改数据？告诉我一个带新数据的action，我会通过reducer自动修改，然后返回修改后的数据给你！<br>是的，redux很想“数据库”，数据被集中存储，并且只能通过“预先定义的action操作”来修改。</p>\n<p>更厉害的是，配上支持数据绑定的视图库，你会发现一个神奇的事情：<br>之前我们是面向view和controller编程，随着项目的复杂，代码会彼此影响而且数据会分散到各处。<br>而引入redux之后，我们单纯的面向数据编程即可，我们在Redux中统一的管理数据，然后数据变换会反映到view上，而数据上的交互，本质上也是触发了Redux中的action。如下图</p>\n<h3 id=\"Redux数据流\"><a href=\"#Redux数据流\" class=\"headerlink\" title=\"Redux数据流\"></a>Redux数据流</h3><p>所以，设计redux程序的时候，提前想清楚state的结构尤其重要，就好比设计数据库表结构之于后台。</p>\n<p>服务器渲染让前后端彻底分离成为了可能<br>上图也可以看出，Redux构建出一份单向数据流。这让服务端渲染变成了可能，而这个特性，让前后端彻底分离变成了可能，还不用担心SEO的问题。<br>想当初，为了解决前后端分离的问题，大家费尽心思，奈何进展甚微，淘宝甚至提出中途岛midway项目，通过中间搭建由前端维护的Nodejs服务器来实现简单的渲染然后返回HTML，但其实这个Nodejs服务器一点都不简单，需要考虑太多东西，比如安全、性能、缓存等。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Redux主要用于对数据进行集中管理，并且让整个应用的数据流变得清晰。让应用开发更流畅，数据管理更有效。有了Redux，开发者们慢慢的转化为面向数据编程，而不再是频繁的操作DOM，维护越来越复杂的controller逻辑。<br>简单来说，Redux的东西不多，更重要的是理解它的思路：<br>✦ 将整个应用的state储存在唯一的store对象中。<br>✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。<br>✦ 使用reducer来描述action如何改变state。<br>✦ Redux的单向数据流，可以实现服务端渲染，让前后端彻底分离成为可能，这个有里程碑的意义。<br>✦ Redux非常适合复杂的应用，尤其是多交互、多数据源的应用。</p>\n<p>还是那句话，Redux将数据管理拆得很细，所以会有很多新东西去了解，但其实只要了解它的思想，其他的就很顺其自然了。</p>\n<p>作者：齐修_qixiuss<br>链接：<a href=\"https://www.jianshu.com/p/d296a8c34936\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d296a8c34936</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n"},{"title":"前端周刊-2018年09月第2周","date":"2018-09-11T08:18:25.000Z","_content":"#### [es6常用基础合集](https://www.jianshu.com/p/cfb0893c34f1)\n\n##### url:https://www.jianshu.com/p/cfb0893c34f1\n\n##### 知识点:\nlet,const \n箭头函数  \n模板字符串  \n解析结构  \n函数默认参数 \n展开运算符 \n对象字面量与class \nPromise\n#### [ES6新特性概览](http://www.cnblogs.com/Wayou/p/es6_new_features.html)\n\n##### url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\n\n##### 知识点:\n箭头操作符\n类的支持\n增强的对象字面量\n字符串模板\n解构\n参数默认值，不定参数，拓展参数\nlet与const 关键字\nfor of 值遍历\niterator, generator\n模块\nMap，Set 和 WeakMap，WeakSet\nProxies\nSymbols\nMath，Number，String，Object 的新API\n#### [透彻掌握Promise的使用，读这篇就够了](https://www.jianshu.com/p/fe5f173276bd)\n##### url：https://www.jianshu.com/p/fe5f173276bd\n##### 知识点：\n实现方法\n1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。 \n2.resolve。成功的执行方法 \n3.reject。失败的执行方法 \n4.catch。失败的捕获。 \n5.then。链式调用下一步。\n原理：\n内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行\n```js\nclass Promise {\n\tresult: any;\n\tcallbacks = [];\n\tfailbacks = [];\n\tconstructor(fn) {\n\t\tfn(this.resolve.bind(this), this.reject.bind(this));\n\t}\n\tresolve(res) {\n\t\tif (this.callbacks.length > 0) this.callbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t}\n\treject(res) {\n\t\tthis.callbacks = [];\n\t\tif (this.failbacks.length > 0) this.failbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t} catch (fn) {\n\t\tthis.failbacks.push(fn);\n\t}\n\tthen(fn) {\n\t\tthis.callbacks.push(fn);\n\t\treturn this;\n\t}\n}\n```\n调用示例：\n```js\nvar a = new Promise(function(resolve, reject) {\n\tsetTimeout(function() {\n\t\tresolve(\"成功\");\n\t}, 1000);\n}).then(function(result, resolve, reject) {\n\tconsole.log(result)\n\treject(\"失败\")\n}).\ncatch (function(err) {\n\tconsole.log(err);\n});\n```\n\nes6写法：\n```js\n//创建promise\nvar promise = new Promise(function(resolve, reject) {\n    // 进行一些异步或耗时操作\n    if ( /*如果成功 */ ) {\n        resolve(\"Stuff worked!\");\n    } else {\n        reject(Error(\"It broke\"));\n    }\n});\n//绑定处理程序\npromise.then(function(result) {\n\t//promise成功的话会执行这里\n    console.log(result); // \"Stuff worked!\"\n}, function(err) {\n\t//promise失败会执行这里\n    console.log(err); // Error: \"It broke\"\n});\n```\n#### 4.[前端算法相关](https://github.com/qianbin01/frontend_train#sort)\n\n##### url:https://github.com/qianbin01/frontend_train#sort\n\n##### 知识点\n\n冒泡排序\n> 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样\n\n快速排序:\n>  1) 首先，在数组中选择一个中间项作为主元\n2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到\n 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作\n3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成\n\n选择排序:\n> 大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)\n\n归并排序:\n> 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)\n归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组\n\n堆排序：\n> 堆排序把数组当中二叉树来排序而得名。\n1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1\n本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个\n\n#### 5.[javaScript常用知识点](https://github.com/qianbin01/frontend_train#javascript)\n\n##### url: https://github.com/qianbin01/frontend_train#javascript\n\n##### 知识点\nmap,reduce,filter的用法\njs数据类型(7种)\n> 1.number;\n2.string;\n3.boolean;\n4.undefined;\n5.null;\n6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。\n7.Object.（包括Object，Array，Function）\n闭包\n```js\nfunction foo(x) {\n    var tmp = 3;\n    return function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nvar bar = foo(2); // bar 现在是一个闭包\nbar(10);\n```\n结果是16\nes6通常用let const块级作用域代替，\n闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题\n\n什么是立即执行函数？使用立即执行函数的目的是什么？\n```js\n//常见两种方式\n1.(function(){...})()\n  (function(x){\n\t  console.log(x);\n  })(12345)\n2.(function(){...}())\n  (function(x){\n\t  console.log(x);\n  }(12345))\n//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如\n（function(window){...}(window)）\n```\nasync/await 语法\n深浅拷贝\n数组去重\n思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中\n思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。\n思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。\n思路4（最常用）：使用es6 set\n```js\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];\nconsole.log([...new Set(arr)]);\n```\nJS原型","source":"_posts/前端周刊-2018年09月第2周.md","raw":"---\ntitle: 前端周刊-2018年09月第2周\ndate: 2018-09-11 16:18:25\ntags: [分享]\ncategories: \"前端周刊\" \n---\n#### [es6常用基础合集](https://www.jianshu.com/p/cfb0893c34f1)\n\n##### url:https://www.jianshu.com/p/cfb0893c34f1\n\n##### 知识点:\nlet,const \n箭头函数  \n模板字符串  \n解析结构  \n函数默认参数 \n展开运算符 \n对象字面量与class \nPromise\n#### [ES6新特性概览](http://www.cnblogs.com/Wayou/p/es6_new_features.html)\n\n##### url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\n\n##### 知识点:\n箭头操作符\n类的支持\n增强的对象字面量\n字符串模板\n解构\n参数默认值，不定参数，拓展参数\nlet与const 关键字\nfor of 值遍历\niterator, generator\n模块\nMap，Set 和 WeakMap，WeakSet\nProxies\nSymbols\nMath，Number，String，Object 的新API\n#### [透彻掌握Promise的使用，读这篇就够了](https://www.jianshu.com/p/fe5f173276bd)\n##### url：https://www.jianshu.com/p/fe5f173276bd\n##### 知识点：\n实现方法\n1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。 \n2.resolve。成功的执行方法 \n3.reject。失败的执行方法 \n4.catch。失败的捕获。 \n5.then。链式调用下一步。\n原理：\n内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行\n```js\nclass Promise {\n\tresult: any;\n\tcallbacks = [];\n\tfailbacks = [];\n\tconstructor(fn) {\n\t\tfn(this.resolve.bind(this), this.reject.bind(this));\n\t}\n\tresolve(res) {\n\t\tif (this.callbacks.length > 0) this.callbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t}\n\treject(res) {\n\t\tthis.callbacks = [];\n\t\tif (this.failbacks.length > 0) this.failbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this));\n\t} catch (fn) {\n\t\tthis.failbacks.push(fn);\n\t}\n\tthen(fn) {\n\t\tthis.callbacks.push(fn);\n\t\treturn this;\n\t}\n}\n```\n调用示例：\n```js\nvar a = new Promise(function(resolve, reject) {\n\tsetTimeout(function() {\n\t\tresolve(\"成功\");\n\t}, 1000);\n}).then(function(result, resolve, reject) {\n\tconsole.log(result)\n\treject(\"失败\")\n}).\ncatch (function(err) {\n\tconsole.log(err);\n});\n```\n\nes6写法：\n```js\n//创建promise\nvar promise = new Promise(function(resolve, reject) {\n    // 进行一些异步或耗时操作\n    if ( /*如果成功 */ ) {\n        resolve(\"Stuff worked!\");\n    } else {\n        reject(Error(\"It broke\"));\n    }\n});\n//绑定处理程序\npromise.then(function(result) {\n\t//promise成功的话会执行这里\n    console.log(result); // \"Stuff worked!\"\n}, function(err) {\n\t//promise失败会执行这里\n    console.log(err); // Error: \"It broke\"\n});\n```\n#### 4.[前端算法相关](https://github.com/qianbin01/frontend_train#sort)\n\n##### url:https://github.com/qianbin01/frontend_train#sort\n\n##### 知识点\n\n冒泡排序\n> 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样\n\n快速排序:\n>  1) 首先，在数组中选择一个中间项作为主元\n2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到\n 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作\n3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成\n\n选择排序:\n> 大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)\n\n归并排序:\n> 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)\n归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组\n\n堆排序：\n> 堆排序把数组当中二叉树来排序而得名。\n1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1\n本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个\n\n#### 5.[javaScript常用知识点](https://github.com/qianbin01/frontend_train#javascript)\n\n##### url: https://github.com/qianbin01/frontend_train#javascript\n\n##### 知识点\nmap,reduce,filter的用法\njs数据类型(7种)\n> 1.number;\n2.string;\n3.boolean;\n4.undefined;\n5.null;\n6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。\n7.Object.（包括Object，Array，Function）\n闭包\n```js\nfunction foo(x) {\n    var tmp = 3;\n    return function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nvar bar = foo(2); // bar 现在是一个闭包\nbar(10);\n```\n结果是16\nes6通常用let const块级作用域代替，\n闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题\n\n什么是立即执行函数？使用立即执行函数的目的是什么？\n```js\n//常见两种方式\n1.(function(){...})()\n  (function(x){\n\t  console.log(x);\n  })(12345)\n2.(function(){...}())\n  (function(x){\n\t  console.log(x);\n  }(12345))\n//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如\n（function(window){...}(window)）\n```\nasync/await 语法\n深浅拷贝\n数组去重\n思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中\n思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。\n思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。\n思路4（最常用）：使用es6 set\n```js\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];\nconsole.log([...new Set(arr)]);\n```\nJS原型","slug":"前端周刊-2018年09月第2周","published":1,"updated":"2018-09-30T10:30:56.144Z","_id":"cjmoq3q84000th4a1yvpimdh2","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"es6常用基础合集\"><a href=\"#es6常用基础合集\" class=\"headerlink\" title=\"es6常用基础合集\"></a><a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">es6常用基础合集</a></h4><h5 id=\"url-https-www-jianshu-com-p-cfb0893c34f1\"><a href=\"#url-https-www-jianshu-com-p-cfb0893c34f1\" class=\"headerlink\" title=\"url:https://www.jianshu.com/p/cfb0893c34f1\"></a>url:<a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cfb0893c34f1</a></h5><h5 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>let,const<br>箭头函数<br>模板字符串<br>解析结构<br>函数默认参数<br>展开运算符<br>对象字面量与class<br>Promise</p>\n<h4 id=\"ES6新特性概览\"><a href=\"#ES6新特性概览\" class=\"headerlink\" title=\"ES6新特性概览\"></a><a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">ES6新特性概览</a></h4><h5 id=\"url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\"><a href=\"#url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\" class=\"headerlink\" title=\"url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\"></a>url： <a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Wayou/p/es6_new_features.html</a></h5><h5 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>箭头操作符<br>类的支持<br>增强的对象字面量<br>字符串模板<br>解构<br>参数默认值，不定参数，拓展参数<br>let与const 关键字<br>for of 值遍历<br>iterator, generator<br>模块<br>Map，Set 和 WeakMap，WeakSet<br>Proxies<br>Symbols<br>Math，Number，String，Object 的新API</p>\n<h4 id=\"透彻掌握Promise的使用，读这篇就够了\"><a href=\"#透彻掌握Promise的使用，读这篇就够了\" class=\"headerlink\" title=\"透彻掌握Promise的使用，读这篇就够了\"></a><a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">透彻掌握Promise的使用，读这篇就够了</a></h4><h5 id=\"url：https-www-jianshu-com-p-fe5f173276bd\"><a href=\"#url：https-www-jianshu-com-p-fe5f173276bd\" class=\"headerlink\" title=\"url：https://www.jianshu.com/p/fe5f173276bd\"></a>url：<a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe5f173276bd</a></h5><h5 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h5><p>实现方法<br>1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。<br>2.resolve。成功的执行方法<br>3.reject。失败的执行方法<br>4.catch。失败的捕获。<br>5.then。链式调用下一步。<br>原理：<br>内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">\tresult: any;</span><br><span class=\"line\">\tcallbacks = [];</span><br><span class=\"line\">\tfailbacks = [];</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">\t\tfn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresolve(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.callbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.callbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treject(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.failbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.failbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.failbacks.push(fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthen(fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks.push(fn);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\treject(<span class=\"string\">\"失败\"</span>)</span><br><span class=\"line\">&#125;).</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>es6写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建promise</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 进行一些异步或耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"comment\">/*如果成功 */</span> ) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">\"Stuff worked!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"built_in\">Error</span>(<span class=\"string\">\"It broke\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//绑定处理程序</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise成功的话会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"Stuff worked!\"</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise失败会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// Error: \"It broke\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-前端算法相关\"><a href=\"#4-前端算法相关\" class=\"headerlink\" title=\"4.前端算法相关\"></a>4.<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">前端算法相关</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-sort\"><a href=\"#url-https-github-com-qianbin01-frontend-train-sort\" class=\"headerlink\" title=\"url:https://github.com/qianbin01/frontend_train#sort\"></a>url:<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#sort</a></h5><h5 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>冒泡排序</p>\n<blockquote>\n<p>比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</p>\n</blockquote>\n<p>快速排序:</p>\n<blockquote>\n<p> 1) 首先，在数组中选择一个中间项作为主元<br>2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到<br> 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作<br>3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</p>\n</blockquote>\n<p>选择排序:</p>\n<blockquote>\n<p>大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</p>\n</blockquote>\n<p>归并排序:</p>\n<blockquote>\n<p>归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)<br>归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</p>\n</blockquote>\n<p>堆排序：</p>\n<blockquote>\n<p>堆排序把数组当中二叉树来排序而得名。<br>1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2<em>L；4）节点R的右子节点为2</em>R + 1<br>本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</p>\n</blockquote>\n<h4 id=\"5-javaScript常用知识点\"><a href=\"#5-javaScript常用知识点\" class=\"headerlink\" title=\"5.javaScript常用知识点\"></a>5.<a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">javaScript常用知识点</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-javascript\"><a href=\"#url-https-github-com-qianbin01-frontend-train-javascript\" class=\"headerlink\" title=\"url: https://github.com/qianbin01/frontend_train#javascript\"></a>url: <a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#javascript</a></h5><h5 id=\"知识点-3\"><a href=\"#知识点-3\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>map,reduce,filter的用法<br>js数据类型(7种)</p>\n<blockquote>\n<p>1.number;<br>2.string;<br>3.boolean;<br>4.undefined;<br>5.null;<br>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。<br>7.Object.（包括Object，Array，Function）<br>闭包<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        alert(x + y + (++tmp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo(<span class=\"number\">2</span>); <span class=\"comment\">// bar 现在是一个闭包</span></span><br><span class=\"line\">bar(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是16<br>es6通常用let const块级作用域代替，<br>闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</p>\n<p>什么是立即执行函数？使用立即执行函数的目的是什么？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常见两种方式</span></span><br><span class=\"line\"><span class=\"number\">1.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)()</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;)(<span class=\"number\">12345</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;())</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span></span><br><span class=\"line\">（<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;...&#125;(<span class=\"built_in\">window</span>)）</span><br></pre></td></tr></table></figure></p>\n<p>async/await 语法<br>深浅拷贝<br>数组去重<br>思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中<br>思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。<br>思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。<br>思路4（最常用）：使用es6 set<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr= [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...new <span class=\"built_in\">Set</span>(arr)]);</span><br></pre></td></tr></table></figure></p>\n<p>JS原型</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"es6常用基础合集\"><a href=\"#es6常用基础合集\" class=\"headerlink\" title=\"es6常用基础合集\"></a><a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">es6常用基础合集</a></h4><h5 id=\"url-https-www-jianshu-com-p-cfb0893c34f1\"><a href=\"#url-https-www-jianshu-com-p-cfb0893c34f1\" class=\"headerlink\" title=\"url:https://www.jianshu.com/p/cfb0893c34f1\"></a>url:<a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cfb0893c34f1</a></h5><h5 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>let,const<br>箭头函数<br>模板字符串<br>解析结构<br>函数默认参数<br>展开运算符<br>对象字面量与class<br>Promise</p>\n<h4 id=\"ES6新特性概览\"><a href=\"#ES6新特性概览\" class=\"headerlink\" title=\"ES6新特性概览\"></a><a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">ES6新特性概览</a></h4><h5 id=\"url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\"><a href=\"#url：-http-www-cnblogs-com-Wayou-p-es6-new-features-html\" class=\"headerlink\" title=\"url： http://www.cnblogs.com/Wayou/p/es6_new_features.html\"></a>url： <a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Wayou/p/es6_new_features.html</a></h5><h5 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点:\"></a>知识点:</h5><p>箭头操作符<br>类的支持<br>增强的对象字面量<br>字符串模板<br>解构<br>参数默认值，不定参数，拓展参数<br>let与const 关键字<br>for of 值遍历<br>iterator, generator<br>模块<br>Map，Set 和 WeakMap，WeakSet<br>Proxies<br>Symbols<br>Math，Number，String，Object 的新API</p>\n<h4 id=\"透彻掌握Promise的使用，读这篇就够了\"><a href=\"#透彻掌握Promise的使用，读这篇就够了\" class=\"headerlink\" title=\"透彻掌握Promise的使用，读这篇就够了\"></a><a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">透彻掌握Promise的使用，读这篇就够了</a></h4><h5 id=\"url：https-www-jianshu-com-p-fe5f173276bd\"><a href=\"#url：https-www-jianshu-com-p-fe5f173276bd\" class=\"headerlink\" title=\"url：https://www.jianshu.com/p/fe5f173276bd\"></a>url：<a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe5f173276bd</a></h5><h5 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h5><p>实现方法<br>1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。<br>2.resolve。成功的执行方法<br>3.reject。失败的执行方法<br>4.catch。失败的捕获。<br>5.then。链式调用下一步。<br>原理：<br>内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</span><br><span class=\"line\">\tresult: any;</span><br><span class=\"line\">\tcallbacks = [];</span><br><span class=\"line\">\tfailbacks = [];</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">\t\tfn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresolve(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.callbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.callbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treject(res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.failbacks.length &gt; <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.failbacks.shift()(res, <span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.failbacks.push(fn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthen(fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.callbacks.push(fn);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\treject(<span class=\"string\">\"失败\"</span>)</span><br><span class=\"line\">&#125;).</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>es6写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建promise</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 进行一些异步或耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"comment\">/*如果成功 */</span> ) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">\"Stuff worked!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"built_in\">Error</span>(<span class=\"string\">\"It broke\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//绑定处理程序</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise成功的话会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"Stuff worked!\"</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//promise失败会执行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// Error: \"It broke\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-前端算法相关\"><a href=\"#4-前端算法相关\" class=\"headerlink\" title=\"4.前端算法相关\"></a>4.<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">前端算法相关</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-sort\"><a href=\"#url-https-github-com-qianbin01-frontend-train-sort\" class=\"headerlink\" title=\"url:https://github.com/qianbin01/frontend_train#sort\"></a>url:<a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#sort</a></h5><h5 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>冒泡排序</p>\n<blockquote>\n<p>比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</p>\n</blockquote>\n<p>快速排序:</p>\n<blockquote>\n<p> 1) 首先，在数组中选择一个中间项作为主元<br>2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到<br> 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作<br>3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</p>\n</blockquote>\n<p>选择排序:</p>\n<blockquote>\n<p>大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</p>\n</blockquote>\n<p>归并排序:</p>\n<blockquote>\n<p>归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)<br>归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</p>\n</blockquote>\n<p>堆排序：</p>\n<blockquote>\n<p>堆排序把数组当中二叉树来排序而得名。<br>1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2<em>L；4）节点R的右子节点为2</em>R + 1<br>本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</p>\n</blockquote>\n<h4 id=\"5-javaScript常用知识点\"><a href=\"#5-javaScript常用知识点\" class=\"headerlink\" title=\"5.javaScript常用知识点\"></a>5.<a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">javaScript常用知识点</a></h4><h5 id=\"url-https-github-com-qianbin01-frontend-train-javascript\"><a href=\"#url-https-github-com-qianbin01-frontend-train-javascript\" class=\"headerlink\" title=\"url: https://github.com/qianbin01/frontend_train#javascript\"></a>url: <a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/qianbin01/frontend_train#javascript</a></h5><h5 id=\"知识点-3\"><a href=\"#知识点-3\" class=\"headerlink\" title=\"知识点\"></a>知识点</h5><p>map,reduce,filter的用法<br>js数据类型(7种)</p>\n<blockquote>\n<p>1.number;<br>2.string;<br>3.boolean;<br>4.undefined;<br>5.null;<br>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。<br>7.Object.（包括Object，Array，Function）<br>闭包<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        alert(x + y + (++tmp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo(<span class=\"number\">2</span>); <span class=\"comment\">// bar 现在是一个闭包</span></span><br><span class=\"line\">bar(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是16<br>es6通常用let const块级作用域代替，<br>闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</p>\n<p>什么是立即执行函数？使用立即执行函数的目的是什么？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常见两种方式</span></span><br><span class=\"line\"><span class=\"number\">1.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)()</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;)(<span class=\"number\">12345</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;())</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"comment\">//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span></span><br><span class=\"line\">（<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;...&#125;(<span class=\"built_in\">window</span>)）</span><br></pre></td></tr></table></figure></p>\n<p>async/await 语法<br>深浅拷贝<br>数组去重<br>思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中<br>思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。<br>思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。<br>思路4（最常用）：使用es6 set<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr= [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...new <span class=\"built_in\">Set</span>(arr)]);</span><br></pre></td></tr></table></figure></p>\n<p>JS原型</p>\n"},{"title":"前端周刊-2018年09月第3周","date":"2018-09-21T08:24:00.000Z","_content":"\n## [编写「可读」代码的实践](http://taobaofed.org/blog/2017/01/05/writing-readable-code/)\n\n**链接:**\nhttp://taobaofed.org/blog/2017/01/05/writing-readable-code/\n\n**摘要**\n伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复打磨自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。\n\n## [React + Redux 组件化方案](http://imweb.io/topic/57c531bc6227a4f55a8872c2)\n\n**链接:**\nhttp://imweb.io/topic/57c531bc6227a4f55a8872c2\n\n**摘要**\n组件化方案:理想中的组件化，第一步应该就是组件的标签化， 例如有一个 Header 组件，无需关注组件内部的实现，我们只需要使用一个 <Header/> 标签就能调用它，通过设置属性的方式，来控制它的显示的内容，和对应的事件。借助 jsx 语法，React 已经实现上述想法。\n但是由于 React 的数据流向是单向的， 子组件的数据和方法只能由父级组件赋予，一旦组件嵌套层次变深，传递数据将会变得非常复杂。\nredux 框架解决了这个问题，简单来说，它将 react 由父级传递数据，变为了由一个统一的数据源 store 单向地向各个组件传递数据。\n所有数据都存放在 store 中，组件内部不维护任何数据。\n\nstore 提供了 dispatch 方法来触发改变 store 中数据。 dispatch 传入的值被称作 action。 dispatch(action) 之后，会进入到 store 中称为 reducer 的处理函数，这些 reducer 会依据不同的 action 的类型，进行不同的处理，reducer 返回的值就会作为 store 中新的数据，一个 reducer 对应的是 store 中一个数据字段，每多一个reducer， store 中就多一个数据字段。数据发生改变后， store 就会通知对应的组件重新渲染。\n\n通过 redux 框架提供的 connect 高阶函数， 直接从 store 选取需要的数据和申明需要使用的方法传入组件中，这些申明的方法是组件事件具体的逻辑的实现，例如发送请求，上报逻辑等等，所以通常调用 dispatch(action) 的逻辑也会包含在里面。\n\n## [ANT DESIGN PRO-开箱即用的中台前端/设计解决方案](http://imweb.io/topic/57c531bc6227a4f55a8872c2)\n\n**链接:**\nhttps://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension\n\n**摘要**\n💎 优雅美观：基于 Ant Design 体系精心设计；\n📐 常见设计模式：提炼自中后台应用的典型页面和场景；\n🚀 最新技术栈：使用 React/dva/antd 等前端前沿技术开发；\n📱 响应式：针对不同屏幕大小设计；\n🎨 主题：可配置的主题满足多样化的品牌诉求；\n🌐 国际化：内建业界通用的国际化方案；\n⚙️ 最佳实践：良好的工程实践助您持续产出高质量代码；\n🔢 Mock 数据：实用的本地数据调试方案；\n✅ UI 测试：自动化测试保障前端产品质量；\n\n## [实现一个完美符合Promise/A+规范的Promise](https://github.com/forthealllight/blog/issues/4)\n\n**链接:**\nhttps://github.com/forthealllight/blog/issues/4\n\n**摘要**\nPromise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise.\n\n\n## [Vue知识点整理](https://segmentfault.com/a/1190000016344599)\n\n**链接** \nhttps://segmentfault.com/a/1190000016344599\n\n- 对于MVVM的理解？\n\nModel代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。\nView 代表UI 组件，它负责将数据模型转化成UI 展现出来。\nViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。\n在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。\nViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n- Vue的生命周期（8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后)\n\nVue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。\nbeforeCreate（创建前） 在数据观测和初始化事件还未开始\ncreated（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来\nbeforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。\nmounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。\nbeforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。\nupdated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\nbeforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。\ndestroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n\n- Vue实现数据双向绑定的原理：Object.defineProperty（）\n\n- Vue组件间的参数传递\n1.父组件与子组件传值\n父组件传给子组件：子组件通过props方法接受数据;\n子组件传给父组件：$emit方法传递参数\n2.非父子组件间的数据传递，兄弟组件传值\neventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适\n\n- vue路由的钩子函数\n\n首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。\n\nbeforeEach主要有3个参数to，from，next：\n\nto：route即将进入的目标路由对象，\n\nfrom：route当前导航正要离开的路由\n\nnext：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。\n\n- vuex是什么？怎么使用？哪种功能场景使用它\n只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。\n在main.js引入store，注入。新建了一个目录store，….. export 。\n场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车","source":"_posts/前端周刊-2018年09月第3周.md","raw":"---\ntitle: 前端周刊-2018年09月第3周\ndate: 2018-09-21 16:24:00\ntags: [分享]\ncategories: \"前端周刊\" \n---\n\n## [编写「可读」代码的实践](http://taobaofed.org/blog/2017/01/05/writing-readable-code/)\n\n**链接:**\nhttp://taobaofed.org/blog/2017/01/05/writing-readable-code/\n\n**摘要**\n伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复打磨自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。\n\n## [React + Redux 组件化方案](http://imweb.io/topic/57c531bc6227a4f55a8872c2)\n\n**链接:**\nhttp://imweb.io/topic/57c531bc6227a4f55a8872c2\n\n**摘要**\n组件化方案:理想中的组件化，第一步应该就是组件的标签化， 例如有一个 Header 组件，无需关注组件内部的实现，我们只需要使用一个 <Header/> 标签就能调用它，通过设置属性的方式，来控制它的显示的内容，和对应的事件。借助 jsx 语法，React 已经实现上述想法。\n但是由于 React 的数据流向是单向的， 子组件的数据和方法只能由父级组件赋予，一旦组件嵌套层次变深，传递数据将会变得非常复杂。\nredux 框架解决了这个问题，简单来说，它将 react 由父级传递数据，变为了由一个统一的数据源 store 单向地向各个组件传递数据。\n所有数据都存放在 store 中，组件内部不维护任何数据。\n\nstore 提供了 dispatch 方法来触发改变 store 中数据。 dispatch 传入的值被称作 action。 dispatch(action) 之后，会进入到 store 中称为 reducer 的处理函数，这些 reducer 会依据不同的 action 的类型，进行不同的处理，reducer 返回的值就会作为 store 中新的数据，一个 reducer 对应的是 store 中一个数据字段，每多一个reducer， store 中就多一个数据字段。数据发生改变后， store 就会通知对应的组件重新渲染。\n\n通过 redux 框架提供的 connect 高阶函数， 直接从 store 选取需要的数据和申明需要使用的方法传入组件中，这些申明的方法是组件事件具体的逻辑的实现，例如发送请求，上报逻辑等等，所以通常调用 dispatch(action) 的逻辑也会包含在里面。\n\n## [ANT DESIGN PRO-开箱即用的中台前端/设计解决方案](http://imweb.io/topic/57c531bc6227a4f55a8872c2)\n\n**链接:**\nhttps://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension\n\n**摘要**\n💎 优雅美观：基于 Ant Design 体系精心设计；\n📐 常见设计模式：提炼自中后台应用的典型页面和场景；\n🚀 最新技术栈：使用 React/dva/antd 等前端前沿技术开发；\n📱 响应式：针对不同屏幕大小设计；\n🎨 主题：可配置的主题满足多样化的品牌诉求；\n🌐 国际化：内建业界通用的国际化方案；\n⚙️ 最佳实践：良好的工程实践助您持续产出高质量代码；\n🔢 Mock 数据：实用的本地数据调试方案；\n✅ UI 测试：自动化测试保障前端产品质量；\n\n## [实现一个完美符合Promise/A+规范的Promise](https://github.com/forthealllight/blog/issues/4)\n\n**链接:**\nhttps://github.com/forthealllight/blog/issues/4\n\n**摘要**\nPromise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise.\n\n\n## [Vue知识点整理](https://segmentfault.com/a/1190000016344599)\n\n**链接** \nhttps://segmentfault.com/a/1190000016344599\n\n- 对于MVVM的理解？\n\nModel代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。\nView 代表UI 组件，它负责将数据模型转化成UI 展现出来。\nViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。\n在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。\nViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n- Vue的生命周期（8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后)\n\nVue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。\nbeforeCreate（创建前） 在数据观测和初始化事件还未开始\ncreated（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来\nbeforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。\nmounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。\nbeforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。\nupdated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\nbeforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。\ndestroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n\n- Vue实现数据双向绑定的原理：Object.defineProperty（）\n\n- Vue组件间的参数传递\n1.父组件与子组件传值\n父组件传给子组件：子组件通过props方法接受数据;\n子组件传给父组件：$emit方法传递参数\n2.非父子组件间的数据传递，兄弟组件传值\neventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适\n\n- vue路由的钩子函数\n\n首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。\n\nbeforeEach主要有3个参数to，from，next：\n\nto：route即将进入的目标路由对象，\n\nfrom：route当前导航正要离开的路由\n\nnext：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。\n\n- vuex是什么？怎么使用？哪种功能场景使用它\n只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。\n在main.js引入store，注入。新建了一个目录store，….. export 。\n场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车","slug":"前端周刊-2018年09月第3周","published":1,"updated":"2018-09-30T10:30:58.442Z","_id":"cjmoq3q8d000wh4a13tsgv1kp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"编写「可读」代码的实践\"><a href=\"#编写「可读」代码的实践\" class=\"headerlink\" title=\"编写「可读」代码的实践\"></a><a href=\"http://taobaofed.org/blog/2017/01/05/writing-readable-code/\" target=\"_blank\" rel=\"noopener\">编写「可读」代码的实践</a></h2><p><strong>链接:</strong><br><a href=\"http://taobaofed.org/blog/2017/01/05/writing-readable-code/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2017/01/05/writing-readable-code/</a></p>\n<p><strong>摘要</strong><br>伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复打磨自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。</p>\n<h2 id=\"React-Redux-组件化方案\"><a href=\"#React-Redux-组件化方案\" class=\"headerlink\" title=\"React + Redux 组件化方案\"></a><a href=\"http://imweb.io/topic/57c531bc6227a4f55a8872c2\" target=\"_blank\" rel=\"noopener\">React + Redux 组件化方案</a></h2><p><strong>链接:</strong><br><a href=\"http://imweb.io/topic/57c531bc6227a4f55a8872c2\" target=\"_blank\" rel=\"noopener\">http://imweb.io/topic/57c531bc6227a4f55a8872c2</a></p>\n<p><strong>摘要</strong><br>组件化方案:理想中的组件化，第一步应该就是组件的标签化， 例如有一个 Header 组件，无需关注组件内部的实现，我们只需要使用一个 <header> 标签就能调用它，通过设置属性的方式，来控制它的显示的内容，和对应的事件。借助 jsx 语法，React 已经实现上述想法。<br>但是由于 React 的数据流向是单向的， 子组件的数据和方法只能由父级组件赋予，一旦组件嵌套层次变深，传递数据将会变得非常复杂。<br>redux 框架解决了这个问题，简单来说，它将 react 由父级传递数据，变为了由一个统一的数据源 store 单向地向各个组件传递数据。<br>所有数据都存放在 store 中，组件内部不维护任何数据。</header></p>\n<p>store 提供了 dispatch 方法来触发改变 store 中数据。 dispatch 传入的值被称作 action。 dispatch(action) 之后，会进入到 store 中称为 reducer 的处理函数，这些 reducer 会依据不同的 action 的类型，进行不同的处理，reducer 返回的值就会作为 store 中新的数据，一个 reducer 对应的是 store 中一个数据字段，每多一个reducer， store 中就多一个数据字段。数据发生改变后， store 就会通知对应的组件重新渲染。</p>\n<p>通过 redux 框架提供的 connect 高阶函数， 直接从 store 选取需要的数据和申明需要使用的方法传入组件中，这些申明的方法是组件事件具体的逻辑的实现，例如发送请求，上报逻辑等等，所以通常调用 dispatch(action) 的逻辑也会包含在里面。</p>\n<h2 id=\"ANT-DESIGN-PRO-开箱即用的中台前端-设计解决方案\"><a href=\"#ANT-DESIGN-PRO-开箱即用的中台前端-设计解决方案\" class=\"headerlink\" title=\"ANT DESIGN PRO-开箱即用的中台前端/设计解决方案\"></a><a href=\"http://imweb.io/topic/57c531bc6227a4f55a8872c2\" target=\"_blank\" rel=\"noopener\">ANT DESIGN PRO-开箱即用的中台前端/设计解决方案</a></h2><p><strong>链接:</strong><br><a href=\"https://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension</a></p>\n<p><strong>摘要</strong><br>💎 优雅美观：基于 Ant Design 体系精心设计；<br>📐 常见设计模式：提炼自中后台应用的典型页面和场景；<br>🚀 最新技术栈：使用 React/dva/antd 等前端前沿技术开发；<br>📱 响应式：针对不同屏幕大小设计；<br>🎨 主题：可配置的主题满足多样化的品牌诉求；<br>🌐 国际化：内建业界通用的国际化方案；<br>⚙️ 最佳实践：良好的工程实践助您持续产出高质量代码；<br>🔢 Mock 数据：实用的本地数据调试方案；<br>✅ UI 测试：自动化测试保障前端产品质量；</p>\n<h2 id=\"实现一个完美符合Promise-A-规范的Promise\"><a href=\"#实现一个完美符合Promise-A-规范的Promise\" class=\"headerlink\" title=\"实现一个完美符合Promise/A+规范的Promise\"></a><a href=\"https://github.com/forthealllight/blog/issues/4\" target=\"_blank\" rel=\"noopener\">实现一个完美符合Promise/A+规范的Promise</a></h2><p><strong>链接:</strong><br><a href=\"https://github.com/forthealllight/blog/issues/4\" target=\"_blank\" rel=\"noopener\">https://github.com/forthealllight/blog/issues/4</a></p>\n<p><strong>摘要</strong><br>Promise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise.</p>\n<h2 id=\"Vue知识点整理\"><a href=\"#Vue知识点整理\" class=\"headerlink\" title=\"Vue知识点整理\"></a><a href=\"https://segmentfault.com/a/1190000016344599\" target=\"_blank\" rel=\"noopener\">Vue知识点整理</a></h2><p><strong>链接</strong><br><a href=\"https://segmentfault.com/a/1190000016344599\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016344599</a></p>\n<ul>\n<li>对于MVVM的理解？</li>\n</ul>\n<p>Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。<br>View 代表UI 组件，它负责将数据模型转化成UI 展现出来。<br>ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。<br>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。<br>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p>\n<ul>\n<li>Vue的生命周期（8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后)</li>\n</ul>\n<p>Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。<br>beforeCreate（创建前） 在数据观测和初始化事件还未开始<br>created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来<br>beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。<br>mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。<br>beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br>updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。<br>beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。<br>destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<ul>\n<li><p>Vue实现数据双向绑定的原理：Object.defineProperty（）</p>\n</li>\n<li><p>Vue组件间的参数传递<br>1.父组件与子组件传值<br>父组件传给子组件：子组件通过props方法接受数据;<br>子组件传给父组件：$emit方法传递参数<br>2.非父子组件间的数据传递，兄弟组件传值<br>eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适</p>\n</li>\n<li><p>vue路由的钩子函数</p>\n</li>\n</ul>\n<p>首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。</p>\n<p>beforeEach主要有3个参数to，from，next：</p>\n<p>to：route即将进入的目标路由对象，</p>\n<p>from：route当前导航正要离开的路由</p>\n<p>next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。</p>\n<ul>\n<li>vuex是什么？怎么使用？哪种功能场景使用它<br>只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。<br>在main.js引入store，注入。新建了一个目录store，….. export 。<br>场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"编写「可读」代码的实践\"><a href=\"#编写「可读」代码的实践\" class=\"headerlink\" title=\"编写「可读」代码的实践\"></a><a href=\"http://taobaofed.org/blog/2017/01/05/writing-readable-code/\" target=\"_blank\" rel=\"noopener\">编写「可读」代码的实践</a></h2><p><strong>链接:</strong><br><a href=\"http://taobaofed.org/blog/2017/01/05/writing-readable-code/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2017/01/05/writing-readable-code/</a></p>\n<p><strong>摘要</strong><br>伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复打磨自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。</p>\n<h2 id=\"React-Redux-组件化方案\"><a href=\"#React-Redux-组件化方案\" class=\"headerlink\" title=\"React + Redux 组件化方案\"></a><a href=\"http://imweb.io/topic/57c531bc6227a4f55a8872c2\" target=\"_blank\" rel=\"noopener\">React + Redux 组件化方案</a></h2><p><strong>链接:</strong><br><a href=\"http://imweb.io/topic/57c531bc6227a4f55a8872c2\" target=\"_blank\" rel=\"noopener\">http://imweb.io/topic/57c531bc6227a4f55a8872c2</a></p>\n<p><strong>摘要</strong><br>组件化方案:理想中的组件化，第一步应该就是组件的标签化， 例如有一个 Header 组件，无需关注组件内部的实现，我们只需要使用一个 <header> 标签就能调用它，通过设置属性的方式，来控制它的显示的内容，和对应的事件。借助 jsx 语法，React 已经实现上述想法。<br>但是由于 React 的数据流向是单向的， 子组件的数据和方法只能由父级组件赋予，一旦组件嵌套层次变深，传递数据将会变得非常复杂。<br>redux 框架解决了这个问题，简单来说，它将 react 由父级传递数据，变为了由一个统一的数据源 store 单向地向各个组件传递数据。<br>所有数据都存放在 store 中，组件内部不维护任何数据。</header></p>\n<p>store 提供了 dispatch 方法来触发改变 store 中数据。 dispatch 传入的值被称作 action。 dispatch(action) 之后，会进入到 store 中称为 reducer 的处理函数，这些 reducer 会依据不同的 action 的类型，进行不同的处理，reducer 返回的值就会作为 store 中新的数据，一个 reducer 对应的是 store 中一个数据字段，每多一个reducer， store 中就多一个数据字段。数据发生改变后， store 就会通知对应的组件重新渲染。</p>\n<p>通过 redux 框架提供的 connect 高阶函数， 直接从 store 选取需要的数据和申明需要使用的方法传入组件中，这些申明的方法是组件事件具体的逻辑的实现，例如发送请求，上报逻辑等等，所以通常调用 dispatch(action) 的逻辑也会包含在里面。</p>\n<h2 id=\"ANT-DESIGN-PRO-开箱即用的中台前端-设计解决方案\"><a href=\"#ANT-DESIGN-PRO-开箱即用的中台前端-设计解决方案\" class=\"headerlink\" title=\"ANT DESIGN PRO-开箱即用的中台前端/设计解决方案\"></a><a href=\"http://imweb.io/topic/57c531bc6227a4f55a8872c2\" target=\"_blank\" rel=\"noopener\">ANT DESIGN PRO-开箱即用的中台前端/设计解决方案</a></h2><p><strong>链接:</strong><br><a href=\"https://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension</a></p>\n<p><strong>摘要</strong><br>💎 优雅美观：基于 Ant Design 体系精心设计；<br>📐 常见设计模式：提炼自中后台应用的典型页面和场景；<br>🚀 最新技术栈：使用 React/dva/antd 等前端前沿技术开发；<br>📱 响应式：针对不同屏幕大小设计；<br>🎨 主题：可配置的主题满足多样化的品牌诉求；<br>🌐 国际化：内建业界通用的国际化方案；<br>⚙️ 最佳实践：良好的工程实践助您持续产出高质量代码；<br>🔢 Mock 数据：实用的本地数据调试方案；<br>✅ UI 测试：自动化测试保障前端产品质量；</p>\n<h2 id=\"实现一个完美符合Promise-A-规范的Promise\"><a href=\"#实现一个完美符合Promise-A-规范的Promise\" class=\"headerlink\" title=\"实现一个完美符合Promise/A+规范的Promise\"></a><a href=\"https://github.com/forthealllight/blog/issues/4\" target=\"_blank\" rel=\"noopener\">实现一个完美符合Promise/A+规范的Promise</a></h2><p><strong>链接:</strong><br><a href=\"https://github.com/forthealllight/blog/issues/4\" target=\"_blank\" rel=\"noopener\">https://github.com/forthealllight/blog/issues/4</a></p>\n<p><strong>摘要</strong><br>Promise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise.</p>\n<h2 id=\"Vue知识点整理\"><a href=\"#Vue知识点整理\" class=\"headerlink\" title=\"Vue知识点整理\"></a><a href=\"https://segmentfault.com/a/1190000016344599\" target=\"_blank\" rel=\"noopener\">Vue知识点整理</a></h2><p><strong>链接</strong><br><a href=\"https://segmentfault.com/a/1190000016344599\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016344599</a></p>\n<ul>\n<li>对于MVVM的理解？</li>\n</ul>\n<p>Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。<br>View 代表UI 组件，它负责将数据模型转化成UI 展现出来。<br>ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。<br>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。<br>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p>\n<ul>\n<li>Vue的生命周期（8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后)</li>\n</ul>\n<p>Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。<br>beforeCreate（创建前） 在数据观测和初始化事件还未开始<br>created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来<br>beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。<br>mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。<br>beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br>updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。<br>beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。<br>destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<ul>\n<li><p>Vue实现数据双向绑定的原理：Object.defineProperty（）</p>\n</li>\n<li><p>Vue组件间的参数传递<br>1.父组件与子组件传值<br>父组件传给子组件：子组件通过props方法接受数据;<br>子组件传给父组件：$emit方法传递参数<br>2.非父子组件间的数据传递，兄弟组件传值<br>eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适</p>\n</li>\n<li><p>vue路由的钩子函数</p>\n</li>\n</ul>\n<p>首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。</p>\n<p>beforeEach主要有3个参数to，from，next：</p>\n<p>to：route即将进入的目标路由对象，</p>\n<p>from：route当前导航正要离开的路由</p>\n<p>next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。</p>\n<ul>\n<li>vuex是什么？怎么使用？哪种功能场景使用它<br>只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。<br>在main.js引入store，注入。新建了一个目录store，….. export 。<br>场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车</li>\n</ul>\n"},{"title":"前端开发规范-used by frank","date":"2018-09-21T08:20:34.000Z","_content":"\n### js方法注释规范\n\n### 规范的注释很重要\n代码是写给人看的，顺便给机器运行，多谢注释可以增加代码的可读性\n\n```js\n\n/** \n**************\n * @func 教师端请假功能 ;\n * @param {String} token 教师端头部的token;\n * @param {string} a - 参数a;\n * @param {number} b=1 - 参数b默认值为1;\n * @param {string} c=1 - 参数c有两种支持的取值</br>1—表示x</br>2—表示xx;\n * @param {object} d - 参数d为一个对象;\n * @param {string} d.e - 参数d的e属性;\n * @param {string} d.f - 参数d的f属性;\n * @param {object[]} g - 参数g为一个对象数组;\n * @param {string} g.h - 参数g数组中一项的h属性;\n * @param {string} g.i - 参数g数组中一项的i属性;\n * @param {string} [j] - 参数j是一个可选参数;\n * @description  2018年4月19日被frank开发于dev_sprint65分支，\n *   XX年XX月被XX在xx分支修改（原因或者修改的功能）;\n ****************/\n```\n\n### 变量命名规范\n\n1.标准变量命名使用驼峰式命名           `eg. let thisIsMyName;` \n2.常量全部大写，并使用下划线连接       `eg.  const MAX_COUNT = 10; `\n\n### 项目规范\n\n**变量声明尽量提在函数首部，用一个var声明，不允许出现连着的两个var声明(也包括let，const)**\n\n```js\nfunction doSomethingWithItems(items) {\n    // use one var\n    var value = 10,\n        result = value + 10,\n        i,\n        len;\n\n    for (i = 0, len = items.length; i < len; i++) {\n        result += 10;\n    }\n}\n```\n\n**undefind使用规范（永远不要直接使用undefined进行变量判断，使用typeof和字符串’undefined’对变量进行判断。）**\n\n```js\n// not good\nif (person === undefined) {\n    ...\n}\n\n// good\nif (typeof person === 'undefined') {\n    ...\n}\n```\n**用’===’和’!==’代替’==’, ‘!=’**\n**使用对象的属性简写**\n```js\nconst job = 'FrontEnd'\n// bad\nconst item = {\n  job: job\n}\n// good\nconst item = {\n  job\n}\n```\n\n**使用拓展运算符 … 复制数组**\n```js\n// bad\nconst items = []\nconst itemsCopy = []\nconst len = items.length\nlet i\n// bad\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i]\n}\n// good\nitemsCopy = [...items]\n```\n\n**render使用**\n```js\nrender: (h, params) => {\n    return h('div', [\n        h('span', {\n            attrs: {\n                class: \"table_details\"\n            },\n            on: {\n                click: () => {\n                    this.edit(params.index)\n                }\n            }\n        },),\n        h('span', {\n            attrs: {\n                class: \"table_continue\"\n            },\n            on: {\n                click: () => {\n                    this.show(params.index)\n                }\n            }\n        },),\n        h('span', {\n            attrs: {\n                class: \"table_more no_border_right\"\n            },\n            on: {\n                click: () => {\n                    this.remove(params.row.id)\n                }\n            }\n        },),\n        h('Poptip', {\n            props: {\n                title:\"项目变更\",\n                content:\"项目迁出\",\n                placement:\"bottom-end\"\n            },\n            on: {\n                'on-ok': () => {\n                }\n            }\n        }, [\n            h('span', {\n                attrs: {\n                    class: \"table_more no_border_right\"\n                }\n            })\n        ])\n    ])\n}     \n```\n\n文档：有时间整理一下http://taobaofed.org/blog/2017/01/05/writing-readable-code/\n","source":"_posts/前端开发规范-used-by-frank.md","raw":"---\ntitle: 前端开发规范-used by frank\ndate: 2018-09-21 16:20:34\ntags: [前端自动化]\ncategories: \"前端\" \n---\n\n### js方法注释规范\n\n### 规范的注释很重要\n代码是写给人看的，顺便给机器运行，多谢注释可以增加代码的可读性\n\n```js\n\n/** \n**************\n * @func 教师端请假功能 ;\n * @param {String} token 教师端头部的token;\n * @param {string} a - 参数a;\n * @param {number} b=1 - 参数b默认值为1;\n * @param {string} c=1 - 参数c有两种支持的取值</br>1—表示x</br>2—表示xx;\n * @param {object} d - 参数d为一个对象;\n * @param {string} d.e - 参数d的e属性;\n * @param {string} d.f - 参数d的f属性;\n * @param {object[]} g - 参数g为一个对象数组;\n * @param {string} g.h - 参数g数组中一项的h属性;\n * @param {string} g.i - 参数g数组中一项的i属性;\n * @param {string} [j] - 参数j是一个可选参数;\n * @description  2018年4月19日被frank开发于dev_sprint65分支，\n *   XX年XX月被XX在xx分支修改（原因或者修改的功能）;\n ****************/\n```\n\n### 变量命名规范\n\n1.标准变量命名使用驼峰式命名           `eg. let thisIsMyName;` \n2.常量全部大写，并使用下划线连接       `eg.  const MAX_COUNT = 10; `\n\n### 项目规范\n\n**变量声明尽量提在函数首部，用一个var声明，不允许出现连着的两个var声明(也包括let，const)**\n\n```js\nfunction doSomethingWithItems(items) {\n    // use one var\n    var value = 10,\n        result = value + 10,\n        i,\n        len;\n\n    for (i = 0, len = items.length; i < len; i++) {\n        result += 10;\n    }\n}\n```\n\n**undefind使用规范（永远不要直接使用undefined进行变量判断，使用typeof和字符串’undefined’对变量进行判断。）**\n\n```js\n// not good\nif (person === undefined) {\n    ...\n}\n\n// good\nif (typeof person === 'undefined') {\n    ...\n}\n```\n**用’===’和’!==’代替’==’, ‘!=’**\n**使用对象的属性简写**\n```js\nconst job = 'FrontEnd'\n// bad\nconst item = {\n  job: job\n}\n// good\nconst item = {\n  job\n}\n```\n\n**使用拓展运算符 … 复制数组**\n```js\n// bad\nconst items = []\nconst itemsCopy = []\nconst len = items.length\nlet i\n// bad\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i]\n}\n// good\nitemsCopy = [...items]\n```\n\n**render使用**\n```js\nrender: (h, params) => {\n    return h('div', [\n        h('span', {\n            attrs: {\n                class: \"table_details\"\n            },\n            on: {\n                click: () => {\n                    this.edit(params.index)\n                }\n            }\n        },),\n        h('span', {\n            attrs: {\n                class: \"table_continue\"\n            },\n            on: {\n                click: () => {\n                    this.show(params.index)\n                }\n            }\n        },),\n        h('span', {\n            attrs: {\n                class: \"table_more no_border_right\"\n            },\n            on: {\n                click: () => {\n                    this.remove(params.row.id)\n                }\n            }\n        },),\n        h('Poptip', {\n            props: {\n                title:\"项目变更\",\n                content:\"项目迁出\",\n                placement:\"bottom-end\"\n            },\n            on: {\n                'on-ok': () => {\n                }\n            }\n        }, [\n            h('span', {\n                attrs: {\n                    class: \"table_more no_border_right\"\n                }\n            })\n        ])\n    ])\n}     \n```\n\n文档：有时间整理一下http://taobaofed.org/blog/2017/01/05/writing-readable-code/\n","slug":"前端开发规范-used-by-frank","published":1,"updated":"2018-09-21T08:27:45.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q8j000yh4a1oqcz89jc","content":"<h3 id=\"js方法注释规范\"><a href=\"#js方法注释规范\" class=\"headerlink\" title=\"js方法注释规范\"></a>js方法注释规范</h3><h3 id=\"规范的注释很重要\"><a href=\"#规范的注释很重要\" class=\"headerlink\" title=\"规范的注释很重要\"></a>规范的注释很重要</h3><p>代码是写给人看的，顺便给机器运行，多谢注释可以增加代码的可读性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">**************</span></span><br><span class=\"line\"><span class=\"comment\"> * @func 教师端请假功能 ;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; token 教师端头部的token;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; a - 参数a;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; b=1 - 参数b默认值为1;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; c=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;object&#125; d - 参数d为一个对象;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; d.e - 参数d的e属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; d.f - 参数d的f属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;object[]&#125; g - 参数g为一个对象数组;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; g.h - 参数g数组中一项的h属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; g.i - 参数g数组中一项的i属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; [j] - 参数j是一个可选参数;</span></span><br><span class=\"line\"><span class=\"comment\"> * @description  2018年4月19日被frank开发于dev_sprint65分支，</span></span><br><span class=\"line\"><span class=\"comment\"> *   XX年XX月被XX在xx分支修改（原因或者修改的功能）;</span></span><br><span class=\"line\"><span class=\"comment\"> ****************/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量命名规范\"><a href=\"#变量命名规范\" class=\"headerlink\" title=\"变量命名规范\"></a>变量命名规范</h3><p>1.标准变量命名使用驼峰式命名           <code>eg. let thisIsMyName;</code><br>2.常量全部大写，并使用下划线连接       <code>eg.  const MAX_COUNT = 10;</code></p>\n<h3 id=\"项目规范\"><a href=\"#项目规范\" class=\"headerlink\" title=\"项目规范\"></a>项目规范</h3><p><strong>变量声明尽量提在函数首部，用一个var声明，不允许出现连着的两个var声明(也包括let，const)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingWithItems</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// use one var</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">10</span>,</span><br><span class=\"line\">        result = value + <span class=\"number\">10</span>,</span><br><span class=\"line\">        i,</span><br><span class=\"line\">        len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = items.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>undefind使用规范（永远不要直接使用undefined进行变量判断，使用typeof和字符串’undefined’对变量进行判断。）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// not good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (person === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> person === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>用’===’和’!==’代替’==’, ‘!=’</strong><br><strong>使用对象的属性简写</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> job = <span class=\"string\">'FrontEnd'</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = &#123;</span><br><span class=\"line\">  job: job</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = &#123;</span><br><span class=\"line\">  job</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用拓展运算符 … 复制数组</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> items = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> itemsCopy = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> len = items.length</span><br><span class=\"line\"><span class=\"keyword\">let</span> i</span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">  itemsCopy[i] = items[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">itemsCopy = [...items]</span><br></pre></td></tr></table></figure></p>\n<p><strong>render使用</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\">(<span class=\"params\">h, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">        h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            attrs: &#123;</span><br><span class=\"line\">                class: \"table_details\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.edit(params.index)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,),</span><br><span class=\"line\">        h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            attrs: &#123;</span><br><span class=\"line\">                class: \"table_continue\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.show(params.index)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,),</span><br><span class=\"line\">        h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            attrs: &#123;</span><br><span class=\"line\">                class: \"table_more no_border_right\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.remove(params.row.id)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,),</span><br><span class=\"line\">        h(<span class=\"string\">'Poptip'</span>, &#123;</span><br><span class=\"line\">            props: &#123;</span><br><span class=\"line\">                title:<span class=\"string\">\"项目变更\"</span>,</span><br><span class=\"line\">                content:<span class=\"string\">\"项目迁出\"</span>,</span><br><span class=\"line\">                placement:<span class=\"string\">\"bottom-end\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                <span class=\"string\">'on-ok'</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, [</span><br><span class=\"line\">            h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">                attrs: &#123;</span><br><span class=\"line\">                    class: \"table_more no_border_right\"</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>文档：有时间整理一下<a href=\"http://taobaofed.org/blog/2017/01/05/writing-readable-code/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2017/01/05/writing-readable-code/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"js方法注释规范\"><a href=\"#js方法注释规范\" class=\"headerlink\" title=\"js方法注释规范\"></a>js方法注释规范</h3><h3 id=\"规范的注释很重要\"><a href=\"#规范的注释很重要\" class=\"headerlink\" title=\"规范的注释很重要\"></a>规范的注释很重要</h3><p>代码是写给人看的，顺便给机器运行，多谢注释可以增加代码的可读性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">**************</span></span><br><span class=\"line\"><span class=\"comment\"> * @func 教师端请假功能 ;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; token 教师端头部的token;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; a - 参数a;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; b=1 - 参数b默认值为1;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; c=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;object&#125; d - 参数d为一个对象;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; d.e - 参数d的e属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; d.f - 参数d的f属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;object[]&#125; g - 参数g为一个对象数组;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; g.h - 参数g数组中一项的h属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; g.i - 参数g数组中一项的i属性;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; [j] - 参数j是一个可选参数;</span></span><br><span class=\"line\"><span class=\"comment\"> * @description  2018年4月19日被frank开发于dev_sprint65分支，</span></span><br><span class=\"line\"><span class=\"comment\"> *   XX年XX月被XX在xx分支修改（原因或者修改的功能）;</span></span><br><span class=\"line\"><span class=\"comment\"> ****************/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量命名规范\"><a href=\"#变量命名规范\" class=\"headerlink\" title=\"变量命名规范\"></a>变量命名规范</h3><p>1.标准变量命名使用驼峰式命名           <code>eg. let thisIsMyName;</code><br>2.常量全部大写，并使用下划线连接       <code>eg.  const MAX_COUNT = 10;</code></p>\n<h3 id=\"项目规范\"><a href=\"#项目规范\" class=\"headerlink\" title=\"项目规范\"></a>项目规范</h3><p><strong>变量声明尽量提在函数首部，用一个var声明，不允许出现连着的两个var声明(也包括let，const)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingWithItems</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// use one var</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">10</span>,</span><br><span class=\"line\">        result = value + <span class=\"number\">10</span>,</span><br><span class=\"line\">        i,</span><br><span class=\"line\">        len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = items.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>undefind使用规范（永远不要直接使用undefined进行变量判断，使用typeof和字符串’undefined’对变量进行判断。）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// not good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (person === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> person === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>用’===’和’!==’代替’==’, ‘!=’</strong><br><strong>使用对象的属性简写</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> job = <span class=\"string\">'FrontEnd'</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = &#123;</span><br><span class=\"line\">  job: job</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = &#123;</span><br><span class=\"line\">  job</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用拓展运算符 … 复制数组</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> items = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> itemsCopy = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> len = items.length</span><br><span class=\"line\"><span class=\"keyword\">let</span> i</span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">  itemsCopy[i] = items[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">itemsCopy = [...items]</span><br></pre></td></tr></table></figure></p>\n<p><strong>render使用</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\">(<span class=\"params\">h, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">        h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            attrs: &#123;</span><br><span class=\"line\">                class: \"table_details\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.edit(params.index)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,),</span><br><span class=\"line\">        h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            attrs: &#123;</span><br><span class=\"line\">                class: \"table_continue\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.show(params.index)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,),</span><br><span class=\"line\">        h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            attrs: &#123;</span><br><span class=\"line\">                class: \"table_more no_border_right\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.remove(params.row.id)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,),</span><br><span class=\"line\">        h(<span class=\"string\">'Poptip'</span>, &#123;</span><br><span class=\"line\">            props: &#123;</span><br><span class=\"line\">                title:<span class=\"string\">\"项目变更\"</span>,</span><br><span class=\"line\">                content:<span class=\"string\">\"项目迁出\"</span>,</span><br><span class=\"line\">                placement:<span class=\"string\">\"bottom-end\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123;</span><br><span class=\"line\">                <span class=\"string\">'on-ok'</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, [</span><br><span class=\"line\">            h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">                attrs: &#123;</span><br><span class=\"line\">                    class: \"table_more no_border_right\"</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>文档：有时间整理一下<a href=\"http://taobaofed.org/blog/2017/01/05/writing-readable-code/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2017/01/05/writing-readable-code/</a></p>\n"},{"title":"合并数组的相同的key值，并且计算相同key值的个数","date":"2018-08-30T07:33:19.000Z","issues":108,"_content":"\n#### 需求：\n合并数组的相同的key值，并且计算相同key值的个数\n#### 场景：\n根据list数组的每一项的key值coupon_sn合并数组，并且计数\n#### js代码\n##### json数组：\n```json\nlet list = [{\n\t\"id\": 5899,\n\t\"is_use\": 0,\n\t\"use_time\": null,\n\t\"expired_time\": \"2018-12-31 00:00:00\",\n\t\"coupon\": {\n\t\t\"coupon_sn\": \"1\",\n\t\t\"name\": \"满减\",\n\t\t\"type\": 2,\n\t\t\"count\": 99993,\n\t\t\"receive_count\": 6,\n\t\t\"is_fare\": 0,\n\t\t\"available_money\": \"2000.00\",\n\t\t\"reduce_money\": \"100.00\",\n\t\t\"discount\": \"1.000\",\n\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",\n\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",\n\t\t\"info\": \"\",\n\t\t\"created_at\": \"2018-07-27 21:22:51\",\n\t\t\"restriction_description\": \"仅限非板材使用\"\n\t}\n}, {\n\t\"id\": 5899,\n\t\"is_use\": 0,\n\t\"use_time\": null,\n\t\"expired_time\": \"2018-12-31 00:00:00\",\n\t\"coupon\": {\n\t\t\"coupon_sn\": \"2\",\n\t\t\"name\": \"满减\",\n\t\t\"type\": 2,\n\t\t\"count\": 99993,\n\t\t\"receive_count\": 6,\n\t\t\"is_fare\": 0,\n\t\t\"available_money\": \"2000.00\",\n\t\t\"reduce_money\": \"100.00\",\n\t\t\"discount\": \"1.000\",\n\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",\n\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",\n\t\t\"info\": \"\",\n\t\t\"created_at\": \"2018-07-27 21:22:51\",\n\t\t\"restriction_description\": \"仅限非板材使用\"\n\t}\n}, {\n\t\"id\": 5899,\n\t\"is_use\": 0,\n\t\"use_time\": null,\n\t\"expired_time\": \"2018-12-31 00:00:00\",\n\t\"coupon\": {\n\t\t\"coupon_sn\": \"2\",\n\t\t\"name\": \"满减\",\n\t\t\"type\": 2,\n\t\t\"count\": 99993,\n\t\t\"receive_count\": 6,\n\t\t\"is_fare\": 0,\n\t\t\"available_money\": \"2000.00\",\n\t\t\"reduce_money\": \"100.00\",\n\t\t\"discount\": \"1.000\",\n\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",\n\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",\n\t\t\"info\": \"\",\n\t\t\"created_at\": \"2018-07-27 21:22:51\",\n\t\t\"restriction_description\": \"仅限非板材使用\"\n\t}\n}]\n```\n\n##### js代码\n```js\n let hash = {\n\tcoupon: {},\n}, i = 0, res = [];\nlist.forEach(function(item ) {\n\tlet coupon_sn = item.coupon.coupon_sn;\n\tif (hash[coupon_sn]) {\n\t\tif (!res[hash[coupon_sn] - 1].count) {\n\t\t\tres[hash[coupon_sn] - 1].count = 1\n\t\t}\n\t\tres[hash[coupon_sn] - 1].count += 1\n\t} else {\n\t\thash[coupon_sn] = ++i && res.push({\n\t\t\t\"count\": 1,\n\t\t\t\"id\": item.id,\n\t\t\t\"is_use\": item.is_use,\n\t\t\t\"use_time\": item.use_time,\n\t\t\t\"expired_time\": item.expired_time,\n\t\t\t\"coupon\": item.coupon\n\t\t})\n\t}\n});\nconsole.log(res);\n```\n\n","source":"_posts/合并数组的相同的key值，并且计算相同key值的个数.md","raw":"---\ntitle: 合并数组的相同的key值，并且计算相同key值的个数\ndate: 2018-08-30 15:33:19\ncategories: \"前端\" \ntags: [js代码片段]\nissues: 108\n---\n\n#### 需求：\n合并数组的相同的key值，并且计算相同key值的个数\n#### 场景：\n根据list数组的每一项的key值coupon_sn合并数组，并且计数\n#### js代码\n##### json数组：\n```json\nlet list = [{\n\t\"id\": 5899,\n\t\"is_use\": 0,\n\t\"use_time\": null,\n\t\"expired_time\": \"2018-12-31 00:00:00\",\n\t\"coupon\": {\n\t\t\"coupon_sn\": \"1\",\n\t\t\"name\": \"满减\",\n\t\t\"type\": 2,\n\t\t\"count\": 99993,\n\t\t\"receive_count\": 6,\n\t\t\"is_fare\": 0,\n\t\t\"available_money\": \"2000.00\",\n\t\t\"reduce_money\": \"100.00\",\n\t\t\"discount\": \"1.000\",\n\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",\n\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",\n\t\t\"info\": \"\",\n\t\t\"created_at\": \"2018-07-27 21:22:51\",\n\t\t\"restriction_description\": \"仅限非板材使用\"\n\t}\n}, {\n\t\"id\": 5899,\n\t\"is_use\": 0,\n\t\"use_time\": null,\n\t\"expired_time\": \"2018-12-31 00:00:00\",\n\t\"coupon\": {\n\t\t\"coupon_sn\": \"2\",\n\t\t\"name\": \"满减\",\n\t\t\"type\": 2,\n\t\t\"count\": 99993,\n\t\t\"receive_count\": 6,\n\t\t\"is_fare\": 0,\n\t\t\"available_money\": \"2000.00\",\n\t\t\"reduce_money\": \"100.00\",\n\t\t\"discount\": \"1.000\",\n\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",\n\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",\n\t\t\"info\": \"\",\n\t\t\"created_at\": \"2018-07-27 21:22:51\",\n\t\t\"restriction_description\": \"仅限非板材使用\"\n\t}\n}, {\n\t\"id\": 5899,\n\t\"is_use\": 0,\n\t\"use_time\": null,\n\t\"expired_time\": \"2018-12-31 00:00:00\",\n\t\"coupon\": {\n\t\t\"coupon_sn\": \"2\",\n\t\t\"name\": \"满减\",\n\t\t\"type\": 2,\n\t\t\"count\": 99993,\n\t\t\"receive_count\": 6,\n\t\t\"is_fare\": 0,\n\t\t\"available_money\": \"2000.00\",\n\t\t\"reduce_money\": \"100.00\",\n\t\t\"discount\": \"1.000\",\n\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",\n\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",\n\t\t\"info\": \"\",\n\t\t\"created_at\": \"2018-07-27 21:22:51\",\n\t\t\"restriction_description\": \"仅限非板材使用\"\n\t}\n}]\n```\n\n##### js代码\n```js\n let hash = {\n\tcoupon: {},\n}, i = 0, res = [];\nlist.forEach(function(item ) {\n\tlet coupon_sn = item.coupon.coupon_sn;\n\tif (hash[coupon_sn]) {\n\t\tif (!res[hash[coupon_sn] - 1].count) {\n\t\t\tres[hash[coupon_sn] - 1].count = 1\n\t\t}\n\t\tres[hash[coupon_sn] - 1].count += 1\n\t} else {\n\t\thash[coupon_sn] = ++i && res.push({\n\t\t\t\"count\": 1,\n\t\t\t\"id\": item.id,\n\t\t\t\"is_use\": item.is_use,\n\t\t\t\"use_time\": item.use_time,\n\t\t\t\"expired_time\": item.expired_time,\n\t\t\t\"coupon\": item.coupon\n\t\t})\n\t}\n});\nconsole.log(res);\n```\n\n","slug":"合并数组的相同的key值，并且计算相同key值的个数","published":1,"updated":"2018-09-20T03:46:25.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q8v0012h4a1bpid6q6n","content":"<h4 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h4><p>合并数组的相同的key值，并且计算相同key值的个数</p>\n<h4 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h4><p>根据list数组的每一项的key值coupon_sn合并数组，并且计数</p>\n<h4 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h4><h5 id=\"json数组：\"><a href=\"#json数组：\" class=\"headerlink\" title=\"json数组：\"></a>json数组：</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list = [&#123;</span><br><span class=\"line\">\t\"id\": 5899,</span><br><span class=\"line\">\t\"is_use\": 0,</span><br><span class=\"line\">\t\"use_time\": null,</span><br><span class=\"line\">\t\"expired_time\": \"2018-12-31 00:00:00\",</span><br><span class=\"line\">\t\"coupon\": &#123;</span><br><span class=\"line\">\t\t\"coupon_sn\": \"1\",</span><br><span class=\"line\">\t\t\"name\": \"满减\",</span><br><span class=\"line\">\t\t\"type\": 2,</span><br><span class=\"line\">\t\t\"count\": 99993,</span><br><span class=\"line\">\t\t\"receive_count\": 6,</span><br><span class=\"line\">\t\t\"is_fare\": 0,</span><br><span class=\"line\">\t\t\"available_money\": \"2000.00\",</span><br><span class=\"line\">\t\t\"reduce_money\": \"100.00\",</span><br><span class=\"line\">\t\t\"discount\": \"1.000\",</span><br><span class=\"line\">\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",</span><br><span class=\"line\">\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",</span><br><span class=\"line\">\t\t\"info\": \"\",</span><br><span class=\"line\">\t\t\"created_at\": \"2018-07-27 21:22:51\",</span><br><span class=\"line\">\t\t\"restriction_description\": \"仅限非板材使用\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">\t\"id\": 5899,</span><br><span class=\"line\">\t\"is_use\": 0,</span><br><span class=\"line\">\t\"use_time\": null,</span><br><span class=\"line\">\t\"expired_time\": \"2018-12-31 00:00:00\",</span><br><span class=\"line\">\t\"coupon\": &#123;</span><br><span class=\"line\">\t\t\"coupon_sn\": \"2\",</span><br><span class=\"line\">\t\t\"name\": \"满减\",</span><br><span class=\"line\">\t\t\"type\": 2,</span><br><span class=\"line\">\t\t\"count\": 99993,</span><br><span class=\"line\">\t\t\"receive_count\": 6,</span><br><span class=\"line\">\t\t\"is_fare\": 0,</span><br><span class=\"line\">\t\t\"available_money\": \"2000.00\",</span><br><span class=\"line\">\t\t\"reduce_money\": \"100.00\",</span><br><span class=\"line\">\t\t\"discount\": \"1.000\",</span><br><span class=\"line\">\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",</span><br><span class=\"line\">\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",</span><br><span class=\"line\">\t\t\"info\": \"\",</span><br><span class=\"line\">\t\t\"created_at\": \"2018-07-27 21:22:51\",</span><br><span class=\"line\">\t\t\"restriction_description\": \"仅限非板材使用\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">\t\"id\": 5899,</span><br><span class=\"line\">\t\"is_use\": 0,</span><br><span class=\"line\">\t\"use_time\": null,</span><br><span class=\"line\">\t\"expired_time\": \"2018-12-31 00:00:00\",</span><br><span class=\"line\">\t\"coupon\": &#123;</span><br><span class=\"line\">\t\t\"coupon_sn\": \"2\",</span><br><span class=\"line\">\t\t\"name\": \"满减\",</span><br><span class=\"line\">\t\t\"type\": 2,</span><br><span class=\"line\">\t\t\"count\": 99993,</span><br><span class=\"line\">\t\t\"receive_count\": 6,</span><br><span class=\"line\">\t\t\"is_fare\": 0,</span><br><span class=\"line\">\t\t\"available_money\": \"2000.00\",</span><br><span class=\"line\">\t\t\"reduce_money\": \"100.00\",</span><br><span class=\"line\">\t\t\"discount\": \"1.000\",</span><br><span class=\"line\">\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",</span><br><span class=\"line\">\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",</span><br><span class=\"line\">\t\t\"info\": \"\",</span><br><span class=\"line\">\t\t\"created_at\": \"2018-07-27 21:22:51\",</span><br><span class=\"line\">\t\t\"restriction_description\": \"仅限非板材使用\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h5 id=\"js代码-1\"><a href=\"#js代码-1\" class=\"headerlink\" title=\"js代码\"></a>js代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> hash = &#123;</span><br><span class=\"line\">\tcoupon: &#123;&#125;,</span><br><span class=\"line\">&#125;, i = <span class=\"number\">0</span>, res = [];</span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> coupon_sn = item.coupon.coupon_sn;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hash[coupon_sn]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!res[hash[coupon_sn] - <span class=\"number\">1</span>].count) &#123;</span><br><span class=\"line\">\t\t\tres[hash[coupon_sn] - <span class=\"number\">1</span>].count = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres[hash[coupon_sn] - <span class=\"number\">1</span>].count += <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\thash[coupon_sn] = ++i &amp;&amp; res.push(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"count\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"id\"</span>: item.id,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"is_use\"</span>: item.is_use,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"use_time\"</span>: item.use_time,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"expired_time\"</span>: item.expired_time,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"coupon\"</span>: item.coupon</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h4><p>合并数组的相同的key值，并且计算相同key值的个数</p>\n<h4 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h4><p>根据list数组的每一项的key值coupon_sn合并数组，并且计数</p>\n<h4 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h4><h5 id=\"json数组：\"><a href=\"#json数组：\" class=\"headerlink\" title=\"json数组：\"></a>json数组：</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list = [&#123;</span><br><span class=\"line\">\t\"id\": 5899,</span><br><span class=\"line\">\t\"is_use\": 0,</span><br><span class=\"line\">\t\"use_time\": null,</span><br><span class=\"line\">\t\"expired_time\": \"2018-12-31 00:00:00\",</span><br><span class=\"line\">\t\"coupon\": &#123;</span><br><span class=\"line\">\t\t\"coupon_sn\": \"1\",</span><br><span class=\"line\">\t\t\"name\": \"满减\",</span><br><span class=\"line\">\t\t\"type\": 2,</span><br><span class=\"line\">\t\t\"count\": 99993,</span><br><span class=\"line\">\t\t\"receive_count\": 6,</span><br><span class=\"line\">\t\t\"is_fare\": 0,</span><br><span class=\"line\">\t\t\"available_money\": \"2000.00\",</span><br><span class=\"line\">\t\t\"reduce_money\": \"100.00\",</span><br><span class=\"line\">\t\t\"discount\": \"1.000\",</span><br><span class=\"line\">\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",</span><br><span class=\"line\">\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",</span><br><span class=\"line\">\t\t\"info\": \"\",</span><br><span class=\"line\">\t\t\"created_at\": \"2018-07-27 21:22:51\",</span><br><span class=\"line\">\t\t\"restriction_description\": \"仅限非板材使用\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">\t\"id\": 5899,</span><br><span class=\"line\">\t\"is_use\": 0,</span><br><span class=\"line\">\t\"use_time\": null,</span><br><span class=\"line\">\t\"expired_time\": \"2018-12-31 00:00:00\",</span><br><span class=\"line\">\t\"coupon\": &#123;</span><br><span class=\"line\">\t\t\"coupon_sn\": \"2\",</span><br><span class=\"line\">\t\t\"name\": \"满减\",</span><br><span class=\"line\">\t\t\"type\": 2,</span><br><span class=\"line\">\t\t\"count\": 99993,</span><br><span class=\"line\">\t\t\"receive_count\": 6,</span><br><span class=\"line\">\t\t\"is_fare\": 0,</span><br><span class=\"line\">\t\t\"available_money\": \"2000.00\",</span><br><span class=\"line\">\t\t\"reduce_money\": \"100.00\",</span><br><span class=\"line\">\t\t\"discount\": \"1.000\",</span><br><span class=\"line\">\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",</span><br><span class=\"line\">\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",</span><br><span class=\"line\">\t\t\"info\": \"\",</span><br><span class=\"line\">\t\t\"created_at\": \"2018-07-27 21:22:51\",</span><br><span class=\"line\">\t\t\"restriction_description\": \"仅限非板材使用\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">\t\"id\": 5899,</span><br><span class=\"line\">\t\"is_use\": 0,</span><br><span class=\"line\">\t\"use_time\": null,</span><br><span class=\"line\">\t\"expired_time\": \"2018-12-31 00:00:00\",</span><br><span class=\"line\">\t\"coupon\": &#123;</span><br><span class=\"line\">\t\t\"coupon_sn\": \"2\",</span><br><span class=\"line\">\t\t\"name\": \"满减\",</span><br><span class=\"line\">\t\t\"type\": 2,</span><br><span class=\"line\">\t\t\"count\": 99993,</span><br><span class=\"line\">\t\t\"receive_count\": 6,</span><br><span class=\"line\">\t\t\"is_fare\": 0,</span><br><span class=\"line\">\t\t\"available_money\": \"2000.00\",</span><br><span class=\"line\">\t\t\"reduce_money\": \"100.00\",</span><br><span class=\"line\">\t\t\"discount\": \"1.000\",</span><br><span class=\"line\">\t\t\"receive_start_time\": \"2018-07-27 00:00:00\",</span><br><span class=\"line\">\t\t\"receive_end_time\": \"2020-12-31 00:00:00\",</span><br><span class=\"line\">\t\t\"info\": \"\",</span><br><span class=\"line\">\t\t\"created_at\": \"2018-07-27 21:22:51\",</span><br><span class=\"line\">\t\t\"restriction_description\": \"仅限非板材使用\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h5 id=\"js代码-1\"><a href=\"#js代码-1\" class=\"headerlink\" title=\"js代码\"></a>js代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> hash = &#123;</span><br><span class=\"line\">\tcoupon: &#123;&#125;,</span><br><span class=\"line\">&#125;, i = <span class=\"number\">0</span>, res = [];</span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> coupon_sn = item.coupon.coupon_sn;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hash[coupon_sn]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!res[hash[coupon_sn] - <span class=\"number\">1</span>].count) &#123;</span><br><span class=\"line\">\t\t\tres[hash[coupon_sn] - <span class=\"number\">1</span>].count = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres[hash[coupon_sn] - <span class=\"number\">1</span>].count += <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\thash[coupon_sn] = ++i &amp;&amp; res.push(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"count\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"id\"</span>: item.id,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"is_use\"</span>: item.is_use,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"use_time\"</span>: item.use_time,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"expired_time\"</span>: item.expired_time,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"coupon\"</span>: item.coupon</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></figure>\n"},{"title":"怎么把数组倒置，又不影响原来数组，reverse不行","date":"2018-08-18T15:33:00.000Z","issues":105,"_content":"\n### 情景：\n怎么把数组倒置，又不影响原来数组，reverse不行，会把原数组也给反过来。\n```js\nvar arr = [\"1\",\"2\",\"3\",\"4\"];\nvar bbb = arr.reverse()\nconsole.log(arr); //[\"4\", \"3\", \"2\", \"1\"]\nconsole.log(bbb); //[\"4\", \"3\", \"2\", \"1\"]\n```\n\n直接改的话bbb和arr指向是同一个数组对象。reverse改变的是数组对象，a指向它，所以改变了，要改变就要让其指向不同\n\n### 解决方案\n```js\nvar arr = [\"1\",\"2\",\"3\",\"4\"];\n//列举4个解决方案\nvar bbb = [...arr].reverse() //方法1\nvar bbb = [].concat(arr).reverse()  //方法2\nvar bbb = Object.assign([],arr).reverse()//方法3\nvar bbb = arr.slice().reverse()//方法4\nconsole.log(arr); \nconsole.log(bbb); \n```\n\n ES6语法很方便~","source":"_posts/怎么把数组倒置，又不影响原来数组，reverse不行.md","raw":"---\ntitle: 怎么把数组倒置，又不影响原来数组，reverse不行\ndate: 2018-08-18 23:33\ntags: [js代码片段]\nissues: 105\n---\n\n### 情景：\n怎么把数组倒置，又不影响原来数组，reverse不行，会把原数组也给反过来。\n```js\nvar arr = [\"1\",\"2\",\"3\",\"4\"];\nvar bbb = arr.reverse()\nconsole.log(arr); //[\"4\", \"3\", \"2\", \"1\"]\nconsole.log(bbb); //[\"4\", \"3\", \"2\", \"1\"]\n```\n\n直接改的话bbb和arr指向是同一个数组对象。reverse改变的是数组对象，a指向它，所以改变了，要改变就要让其指向不同\n\n### 解决方案\n```js\nvar arr = [\"1\",\"2\",\"3\",\"4\"];\n//列举4个解决方案\nvar bbb = [...arr].reverse() //方法1\nvar bbb = [].concat(arr).reverse()  //方法2\nvar bbb = Object.assign([],arr).reverse()//方法3\nvar bbb = arr.slice().reverse()//方法4\nconsole.log(arr); \nconsole.log(bbb); \n```\n\n ES6语法很方便~","slug":"怎么把数组倒置，又不影响原来数组，reverse不行","published":1,"updated":"2018-09-20T03:46:25.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q970014h4a1fm8cgk8l","content":"<h3 id=\"情景：\"><a href=\"#情景：\" class=\"headerlink\" title=\"情景：\"></a>情景：</h3><p>怎么把数组倒置，又不影响原来数组，reverse不行，会把原数组也给反过来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = arr.reverse()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[\"4\", \"3\", \"2\", \"1\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bbb); <span class=\"comment\">//[\"4\", \"3\", \"2\", \"1\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>直接改的话bbb和arr指向是同一个数组对象。reverse改变的是数组对象，a指向它，所以改变了，要改变就要让其指向不同</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>];</span><br><span class=\"line\"><span class=\"comment\">//列举4个解决方案</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = [...arr].reverse() <span class=\"comment\">//方法1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = [].concat(arr).reverse()  <span class=\"comment\">//方法2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = <span class=\"built_in\">Object</span>.assign([],arr).reverse()<span class=\"comment\">//方法3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = arr.slice().reverse()<span class=\"comment\">//方法4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bbb);</span><br></pre></td></tr></table></figure>\n<p> ES6语法很方便~</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"情景：\"><a href=\"#情景：\" class=\"headerlink\" title=\"情景：\"></a>情景：</h3><p>怎么把数组倒置，又不影响原来数组，reverse不行，会把原数组也给反过来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = arr.reverse()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[\"4\", \"3\", \"2\", \"1\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bbb); <span class=\"comment\">//[\"4\", \"3\", \"2\", \"1\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>直接改的话bbb和arr指向是同一个数组对象。reverse改变的是数组对象，a指向它，所以改变了，要改变就要让其指向不同</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>];</span><br><span class=\"line\"><span class=\"comment\">//列举4个解决方案</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = [...arr].reverse() <span class=\"comment\">//方法1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = [].concat(arr).reverse()  <span class=\"comment\">//方法2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = <span class=\"built_in\">Object</span>.assign([],arr).reverse()<span class=\"comment\">//方法3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bbb = arr.slice().reverse()<span class=\"comment\">//方法4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bbb);</span><br></pre></td></tr></table></figure>\n<p> ES6语法很方便~</p>\n"},{"title":"错误码：events.js:183 throw er; // Unhandled 'error' event—解决办法","date":"2018-08-30T14:48:30.000Z","issues":109,"_content":"\n#### 控制台报错：\n```\nHash: 78f0873c3eb47a64bfae\nVersion: webpack 1.14.0\nTime: 16ms\nwebpack: Compiled successfully.\nevents.js:183\n      throw er; // Unhandled 'error' event\n      ^\n\nError: listen EADDRINUSE 127.0.0.1:8080\n    at Object._errnoException (util.js:1022:11)\n    at _exceptionWithHostPort (util.js:1044:20)\n    at Server.setupListenHandle [as _listen2] (net.js:1367:14)\n    at listenInCluster (net.js:1408:12)\n    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1517:7)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! webpack-demos@1.0.0 dev: `webpack-dev-server --devtool eval --progress --colors`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the webpack-demos@1.0.0 dev script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\qian\\AppData\\Roaming\\npm-cache\\_logs\\2018-08-30T14_46_37_546Z-debug.log\n```\n\n#### 错误原因： \n端口号被占用\n\n\n#### 解决方案 \n1.Win+R,cmd查询使用的端口号是否被占用：\nnetstat  -aon|findstr  \"8080\"\n按回车显示占用8080端口对应的程序的PID号；\n2.根据PID号找到对应的程序：继续输入命令：\ntasklist|findstr \"15008\"\n按回车后显示出占用该端口的程序；\n3.按快捷键“Ctrl+Shift+Esc”调出Windows任务管理器，根据PID/\n程序对应名称结束该程序进程即可。","source":"_posts/错误码：events-js-183-throw-er-Unhandled-error-event—解决办法.md","raw":"---\ntitle: '错误码：events.js:183 throw er; // Unhandled ''error'' event—解决办法'\ndate: 2018-08-30 22:48:30\ntags: \n    - npm\nissues: 109\n---\n\n#### 控制台报错：\n```\nHash: 78f0873c3eb47a64bfae\nVersion: webpack 1.14.0\nTime: 16ms\nwebpack: Compiled successfully.\nevents.js:183\n      throw er; // Unhandled 'error' event\n      ^\n\nError: listen EADDRINUSE 127.0.0.1:8080\n    at Object._errnoException (util.js:1022:11)\n    at _exceptionWithHostPort (util.js:1044:20)\n    at Server.setupListenHandle [as _listen2] (net.js:1367:14)\n    at listenInCluster (net.js:1408:12)\n    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1517:7)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! webpack-demos@1.0.0 dev: `webpack-dev-server --devtool eval --progress --colors`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the webpack-demos@1.0.0 dev script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\qian\\AppData\\Roaming\\npm-cache\\_logs\\2018-08-30T14_46_37_546Z-debug.log\n```\n\n#### 错误原因： \n端口号被占用\n\n\n#### 解决方案 \n1.Win+R,cmd查询使用的端口号是否被占用：\nnetstat  -aon|findstr  \"8080\"\n按回车显示占用8080端口对应的程序的PID号；\n2.根据PID号找到对应的程序：继续输入命令：\ntasklist|findstr \"15008\"\n按回车后显示出占用该端口的程序；\n3.按快捷键“Ctrl+Shift+Esc”调出Windows任务管理器，根据PID/\n程序对应名称结束该程序进程即可。","slug":"错误码：events-js-183-throw-er-Unhandled-error-event—解决办法","published":1,"updated":"2018-09-20T03:46:25.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q9c0017h4a1vtk8f3ly","content":"<h4 id=\"控制台报错：\"><a href=\"#控制台报错：\" class=\"headerlink\" title=\"控制台报错：\"></a>控制台报错：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 78f0873c3eb47a64bfae</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 16ms</span><br><span class=\"line\">webpack: Compiled successfully.</span><br><span class=\"line\">events.js:183</span><br><span class=\"line\">      throw er; // Unhandled &apos;error&apos; event</span><br><span class=\"line\">      ^</span><br><span class=\"line\"></span><br><span class=\"line\">Error: listen EADDRINUSE 127.0.0.1:8080</span><br><span class=\"line\">    at Object._errnoException (util.js:1022:11)</span><br><span class=\"line\">    at _exceptionWithHostPort (util.js:1044:20)</span><br><span class=\"line\">    at Server.setupListenHandle [as _listen2] (net.js:1367:14)</span><br><span class=\"line\">    at listenInCluster (net.js:1408:12)</span><br><span class=\"line\">    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1517:7)</span><br><span class=\"line\">    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)</span><br><span class=\"line\">npm ERR! code ELIFECYCLE</span><br><span class=\"line\">npm ERR! errno 1</span><br><span class=\"line\">npm ERR! webpack-demos@1.0.0 dev: `webpack-dev-server --devtool eval --progress --colors`</span><br><span class=\"line\">npm ERR! Exit status 1</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! Failed at the webpack-demos@1.0.0 dev script.</span><br><span class=\"line\">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete log of this run can be found in:</span><br><span class=\"line\">npm ERR!     C:\\Users\\qian\\AppData\\Roaming\\npm-cache\\_logs\\2018-08-30T14_46_37_546Z-debug.log</span><br></pre></td></tr></table></figure>\n<h4 id=\"错误原因：\"><a href=\"#错误原因：\" class=\"headerlink\" title=\"错误原因：\"></a>错误原因：</h4><p>端口号被占用</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>1.Win+R,cmd查询使用的端口号是否被占用：<br>netstat  -aon|findstr  “8080”<br>按回车显示占用8080端口对应的程序的PID号；<br>2.根据PID号找到对应的程序：继续输入命令：<br>tasklist|findstr “15008”<br>按回车后显示出占用该端口的程序；<br>3.按快捷键“Ctrl+Shift+Esc”调出Windows任务管理器，根据PID/<br>程序对应名称结束该程序进程即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"控制台报错：\"><a href=\"#控制台报错：\" class=\"headerlink\" title=\"控制台报错：\"></a>控制台报错：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 78f0873c3eb47a64bfae</span><br><span class=\"line\">Version: webpack 1.14.0</span><br><span class=\"line\">Time: 16ms</span><br><span class=\"line\">webpack: Compiled successfully.</span><br><span class=\"line\">events.js:183</span><br><span class=\"line\">      throw er; // Unhandled &apos;error&apos; event</span><br><span class=\"line\">      ^</span><br><span class=\"line\"></span><br><span class=\"line\">Error: listen EADDRINUSE 127.0.0.1:8080</span><br><span class=\"line\">    at Object._errnoException (util.js:1022:11)</span><br><span class=\"line\">    at _exceptionWithHostPort (util.js:1044:20)</span><br><span class=\"line\">    at Server.setupListenHandle [as _listen2] (net.js:1367:14)</span><br><span class=\"line\">    at listenInCluster (net.js:1408:12)</span><br><span class=\"line\">    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1517:7)</span><br><span class=\"line\">    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)</span><br><span class=\"line\">npm ERR! code ELIFECYCLE</span><br><span class=\"line\">npm ERR! errno 1</span><br><span class=\"line\">npm ERR! webpack-demos@1.0.0 dev: `webpack-dev-server --devtool eval --progress --colors`</span><br><span class=\"line\">npm ERR! Exit status 1</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! Failed at the webpack-demos@1.0.0 dev script.</span><br><span class=\"line\">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete log of this run can be found in:</span><br><span class=\"line\">npm ERR!     C:\\Users\\qian\\AppData\\Roaming\\npm-cache\\_logs\\2018-08-30T14_46_37_546Z-debug.log</span><br></pre></td></tr></table></figure>\n<h4 id=\"错误原因：\"><a href=\"#错误原因：\" class=\"headerlink\" title=\"错误原因：\"></a>错误原因：</h4><p>端口号被占用</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>1.Win+R,cmd查询使用的端口号是否被占用：<br>netstat  -aon|findstr  “8080”<br>按回车显示占用8080端口对应的程序的PID号；<br>2.根据PID号找到对应的程序：继续输入命令：<br>tasklist|findstr “15008”<br>按回车后显示出占用该端口的程序；<br>3.按快捷键“Ctrl+Shift+Esc”调出Windows任务管理器，根据PID/<br>程序对应名称结束该程序进程即可。</p>\n"},{"title":"移动端限制input框只能输入数字","date":"2018-09-03T08:56:58.000Z","description":"在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入","_content":"\nhtml5 中，input 的 type 属性规定 input 元素的类型。\n```html\n<input type=\"value\">\n```\n\n有很多选项，详细可以参考[HTML 5 type 属性](http://www.w3school.com.cn/html5/att_input_type.asp)\n\n但是在移动端，还要区分是安卓用户，还是ios用户，所以这样写：\n\n```html\n<input class=\"num_input\" type='number' pattern=\"[0-9]*\"/>\n```\n\n在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入。\n\n另： `autofocus=\"autofocus\"`可以自动对焦。\n","source":"_posts/移动端限制input框只能输入数字.md","raw":"---\ntitle: 移动端限制input框只能输入数字\ndate: 2018-09-03 16:56:58\ntags: \n     - html5\ndescription: 在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入\n---\n\nhtml5 中，input 的 type 属性规定 input 元素的类型。\n```html\n<input type=\"value\">\n```\n\n有很多选项，详细可以参考[HTML 5 type 属性](http://www.w3school.com.cn/html5/att_input_type.asp)\n\n但是在移动端，还要区分是安卓用户，还是ios用户，所以这样写：\n\n```html\n<input class=\"num_input\" type='number' pattern=\"[0-9]*\"/>\n```\n\n在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入。\n\n另： `autofocus=\"autofocus\"`可以自动对焦。\n","slug":"移动端限制input框只能输入数字","published":1,"updated":"2018-09-20T05:15:47.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmoq3q9m001ah4a16hea9ns6","content":"<p>html5 中，input 的 type 属性规定 input 元素的类型。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"value\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>有很多选项，详细可以参考<a href=\"http://www.w3school.com.cn/html5/att_input_type.asp\" target=\"_blank\" rel=\"noopener\">HTML 5 type 属性</a></p>\n<p>但是在移动端，还要区分是安卓用户，还是ios用户，所以这样写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num_input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">'number'</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"[0-9]*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入。</p>\n<p>另： <code>autofocus=&quot;autofocus&quot;</code>可以自动对焦。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>html5 中，input 的 type 属性规定 input 元素的类型。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"value\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>有很多选项，详细可以参考<a href=\"http://www.w3school.com.cn/html5/att_input_type.asp\" target=\"_blank\" rel=\"noopener\">HTML 5 type 属性</a></p>\n<p>但是在移动端，还要区分是安卓用户，还是ios用户，所以这样写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num_input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">'number'</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"[0-9]*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入。</p>\n<p>另： <code>autofocus=&quot;autofocus&quot;</code>可以自动对焦。</p>\n"},{"title":"前端开发最全面试题","date":"2018-09-30T10:13:33.000Z","_content":"\n### 前端问题记录\n1. [HTML相关](#html)\n2. [CSS相关](#css)\n3. [JAVASCRIPT相关](#javascript)\n4. [DOM相关](#dom)\n5. [HTTP相关](#http)\n4. [VUE相关](#vue)\n5. [算法相关](#sort)\n6. [网络安全相关](#web)\n7. [webpack相关](#webpack)\n8. [其他](#other)\n#### Html相关\n##### <div id=\"html\">1 html语义化</div>\n意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。\n注意：\n1.尽可能少的使用无语义的标签div和span；\n2.在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；\n3.不要使用纯样式标签，如：b、font、u等，改用css设置。\n4.需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；\n5.使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；\n6.表单域要用fieldset标签包起来，并用legend标签说明表单的用途；\n7.每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。\n\n新标签：\n![h5新元素](http://pd4ar0u4q.bkt.clouddn.com/h5%E6%96%B0%E5%85%83%E7%B4%A0.png)\n##### 2 meta viewport相关\n```htmlbars\n<!DOCTYPE html>  H5标准声明，使用 HTML5 doctype，不区分大小写\n<head lang=”en”> 标准的 lang 属性写法\n<meta charset=’utf-8′>    声明文档使用的字符编码\n<meta http-equiv=”X-UA-Compatible” content=”IE=edge,chrome=1″/>   优先使用 IE 最新版本和 Chrome\n<meta name=”description” content=”不超过150个字符”/>       页面描述\n<meta name=”keywords” content=””/>      页面关键词\n<meta name=”author” content=”name, email@gmail.com”/>    网页作者\n<meta name=”robots” content=”index,follow”/>      搜索引擎抓取\n<meta name=”viewport” content=”initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no”> 为移动设备添加 viewport\n<meta name=”apple-mobile-web-app-title” content=”标题”> iOS 设备 begin\n<meta name=”apple-mobile-web-app-capable” content=”yes”/>  添加到主屏后的标题（iOS 6 新增）\n是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏\n<meta name=”apple-itunes-app” content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”>\n添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）\n<meta name=”apple-mobile-web-app-status-bar-style” content=”black”/>\n<meta name=”format-detection” content=”telphone=no, email=no”/>  设置苹果工具栏颜色\n<meta name=”renderer” content=”webkit”>  启用360浏览器的极速模式(webkit)\n<meta http-equiv=”X-UA-Compatible” content=”IE=edge”>     避免IE使用兼容模式\n<meta http-equiv=”Cache-Control” content=”no-siteapp” />    不让百度转码\n<meta name=”HandheldFriendly” content=”true”>     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓\n<meta name=”MobileOptimized” content=”320″>   微软的老式浏览器\n<meta name=”screen-orientation” content=”portrait”>   uc强制竖屏\n<meta name=”x5-orientation” content=”portrait”>    QQ强制竖屏\n<meta name=”full-screen” content=”yes”>              UC强制全屏\n<meta name=”x5-fullscreen” content=”true”>       QQ强制全屏\n<meta name=”browsermode” content=”application”>   UC应用模式\n<meta name=”x5-page-mode” content=”app”>    QQ应用模式\n<meta name=”msapplication-tap-highlight” content=”no”>    windows phone 点击无高光\n设置页面不缓存\n<meta http-equiv=”pragma” content=”no-cache”>\n<meta http-equiv=”cache-control” content=”no-cache”>\n<meta http-equiv=”expires” content=”0″>\n```\n##### 3 canvas 相关\n```javascript\n使用前需要获得上下文环境，暂不支持3d\n常用api:\n\t1.fillRect(x,y,width,height)实心矩形\n\t2.strokeRect(x,y,width,height)空心矩形\n\t3.fillText(\"Hello world\",200,200);实心文字\n    4.strokeText(\"Hello world\",200,300)空心文字\n各种东西！！！\n```\n##### 新标签兼容低版本\n1. ie9之前版本通过createElement创建html5新标签\n2. 引入html5shiv.js\n#### <div id=\"css\">CSS相关</div>\n##### 1.盒模型\n1.ie盒模型算上border、padding及自身（不算margin），标准的只算上自身窗体的大小\ncss设置方法如下\n```css\n/* 标准模型 */\nbox-sizing:content-box;\n /*IE模型*/\nbox-sizing:border-box;\n```\n2.margin、border、padding、content由外到里\n3.几种获得宽高的方式\n+ dom.style.width/height \n　　这种方式只能取到dom元素内联样式所设置的宽高，也就是说如果该节点的样式是在style标签中或外联的CSS文件中设置的话，通过这种方法是获取不到dom的宽高的。\n+ dom.currentStyle.width/height \n　　这种方式获取的是在页面渲染完成后的结果，就是说不管是哪种方式设置的样式，都能获取到。但这种方式只有IE浏览器支持。\n+ window.getComputedStyle(dom).width/height\n　　这种方式的原理和2是一样的，这个可以兼容更多的浏览器，通用性好一些。\n+ dom.getBoundingClientRect().width/height\n　　这种方式是根据元素在视窗中的绝对位置来获取宽高的\n+ dom.offsetWidth/offsetHeight\n　　这个就没什么好说的了，最常用的，也是兼容最好的。\n\n4.拓展 各种获得宽高的方式\n+ 获取屏幕的高度和宽度（屏幕分辨率）：\nwindow.screen.height/width\n+ 获取屏幕工作区域的高度和宽度（去掉状态栏）：\nwindow.screen.availHeight/availWidth\n+ 网页全文的高度和宽度：\ndocument.body.scrollHeight/Width\n+ 滚动条卷上去的高度和向右卷的宽度：\ndocument.body.scrollTop/scrollLeft\n+ 网页可见区域的高度和宽度（不加边线）：\ndocument.body.clientHeight/clientWidth\n+ 网页可见区域的高度和宽度（加边线）：\ndocument.body.offsetHeight/offsetWidth\n\n5.边距重叠解决方案(BFC)\nBFC原理\n+ 内部的box会在垂直方向，一个接一个的放置\n每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）\n+ box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠\n+ bfc的区域不会与浮动区域的box重叠\n+ bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的\n+ 计算bfc高度的时候，浮动元素也会参与计算\n创建bfc\n+ float属性不为none（脱离文档流）\n+ position为absolute或fixed\n+ display为inline-block,table-cell,table-caption,flex,inine-flex\n+ overflow不为visible\n+ 根元素\ndemo\n```htmlbars\n<section class=\"top\">\n\t<h1>上</h1>\n\t这块margin-bottom:30px;\n</section>\n<!-- 给下面这个块添加一个父元素，在父元素上创建bfc -->\n<div style=\"overflow:hidden\">\n\t<section class=\"bottom\">\n\t<h1>下</h1>\n\t这块margin-top:50px;\n\t</section>\n</div>\n```\n##### css reset 和 normalize.css 有什么区别\n+ 两者都是通过重置样式，保持浏览器样式的一致性\n+ 前者几乎为所有标签添加了样式，后者保持了许多浏览器样式，保持尽可能的一致\n+ 后者修复了常见的桌面端和移动端浏览器的bug：包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。\n+ 前者中含有大段的继承链\n+ 后者模块化，文档较前者来说丰富\n##### 居中方法\n水平方向上\n```css\n针对inline, 内联块inline-block, 内联表inline-table, inline-flex元素及img,span,button等元素\n.text_div{\n\ttext-align:center;\n}\n```\n```css\n不定宽块状元素居中\n.text_div{\n    margin:0 auto;\n}\n\n```\n```css\n通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。\n.wrap{\n    float:left;\n    position:relative;\n    left:50%;\n    clear:both;\n}\n.wrap-center{\n    left:-50%;\n}\n```\n垂直居中\n```css\n单行内联(inline-)元素垂直居中 \n通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。\n\n.text_div{\n    height: 120px;\n    line-height: 120px;\n}\n```\n```css\n利用表布局\n.father {\n    display: table;\n}\n.children {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n```css\nflex布局\n.center-flex {\n    display: flex;\n    flex-direction: column;//上下排列\n    justify-content: center;\n}\n```\n```css\n绝对布局方式\n已知高度\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  height: 100px;\n  margin-top: -50px; \n}\n未知高度\n.parent {\n    position: relative;\n}\n.child {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n垂直水平居中根据上方结合\n```css\nflex方式\n.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\ngrid方式\n.parent {\n  height: 140px;\n  display: grid;\n}\n.child { \n  margin: auto;\n}\n```\n##### css优先级确定\n+ 每个选择器都有权值，权值越大越优先\n+ 继承的样式优先级低于自身指定样式\n+ ！important优先级最高 js也无法修改\n+ 权值相同时，靠近元素的样式优先级高  顺序为内联样式表（标签内部）> 内部样式表（当前文件中）> 外部样式表（外部文件中）\n##### bfc内容见盒模型\n##### 如何清除浮动\n不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）\n+ clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}\n+ 给浮动元素父级设置高度\n+ 父级同时浮动（需要给父级同级元素添加浮动）\n+ 父级设置成inline-block，其margin: 0 auto居中方式失效\n+ 利用br标签的clear属性\n+ 给父级添加overflow:hidden 清除浮动方法\n+ 万能清除法 after伪类 清浮动（现在主流方法，推荐使用）\n```css\n.float_div:after{\n\tcontent:\".\";\n\tclear:both;\n\tdisplay:block;\n\theight:0;\n\toverflow:hidden;\n\tvisibility:hidden;\n}\n.float_div{\n\tzoom:1\n} \n```\n##### 自适应布局\n思路：\n1. 左侧浮动或者绝对定位，然后右侧margin撑开\n2. 使用div包含，然后靠负margin形成bfc\n3. 使用flex\n##### 画三角形\n```css\n#item {\n\twidth: 0;\n\theight: 0;\n\tborder-left: 50px solid transparent;\n\tborder-right: 50px solid transparent;\n\tborder-top: 50px solid transparent;\n\tborder-bottom: 50px solid blue;\n\tbackground: white;\n}\n```\n##### link @import导入css\n1. link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n2. link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n3. link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n3. ink支持使用Javascript控制DOM去改变样式；而@import不支持。\n##### animation\n![](http://pd4ar0u4q.bkt.clouddn.com/animation.png)\n##### 长宽比方案\n1. 使用padding方式结合calc实现\n2. 长宽一项设置百分比另一项aspect-ratio实现（需借助插件实现）\n##### display相关\n1. block:div等容器类型\n2. inline:img span等行内类型\n3. table系列：将样式变成table类型\n4. flex:重点把握，非常强大\n5. grid:同上\n6. inline-block:可设置宽度，两者间有一点间隙\n7. inherit:继承父级\n#### <div id=\"javascript\">JavaScript相关</div>\n##### 1 [\"1\", \"2\", \"3\"].map(parseInt)\n```javascript\n首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值\n\n其中回调函数接受三个参数 currentValue, index, arrary;\n\n而题目中, map只传入了回调函数--parseInt.\n\n其次, parseInt 只接受两个两个参数 string, radix(基数).  \n本题理解来说也就是key与 index \n\n所以本题即问\nparseInt('1', 0);\nparseInt('2', 1);\nparseInt('3', 2);\n\nparseInt(string, radix)\nstring\t必需。要被解析的字符串。\nradix 可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。\n如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。\n```\n##### 2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]\n```javascript\narr.reduce(callback[, initialValue])\nreduce接受两个参数, 一个回调, 一个初始值.\n回调函数接受四个参数 previousValue, currentValue, currentIndex, array\n需要注意的是 If the array is empty and no initialValue was provided, TypeError would be thrown.\n所以第二个表达式会报异常. 第一个表达式等价于 Math.pow(3, 2) => 9; Math.pow(9, 1) =>9\n```\n##### 3\n```javascript\nvar ary = [0,1,2];\nary[10] = 10;\nary.filter(function(x) { return x === undefined;});\n我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.\n\n0 in ary; => true\n3 in ary; => false\n10 in ary; => true\n也就是说 从 3 - 9 都是没有初始化的bug !, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些坑的.\n```\n##### 4 [typeof null, null instanceof Object]\n```javascript\ntypeof 返回一个表示类型的字符串.\ninstanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上.\ntype         result\nUndefined   \"undefined\"\nNull        \"object\"\nBoolean     \"boolean\"\nNumber      \"number\"\nString      \"string\"\nSymbol      \"symbol\"\nHost object Implementation-dependent\nFunction    \"function\"\nObject      \"object\"\n```\n##### 5 js数据类型\n1.number; \n\n2.string;\n\n3.boolean;\n\n4.undefined;\n\n5.null;\n\n6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。\n\n7.Object.（包括Object，Array，Function）\n##### 6 promise 用法\n```javascript\n定义\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n使用\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n//等价于：\npromise.then(function(){\n  //success\n}).catch(function(){\n  //failure\n})\n```\n##### 7 es6 promise ajax\n```javascript\n定义\nconst myHttpClient = url => {\n  return new Promise((resolve, reject) => {\n    let client = new XMLHttpRequest();\n    client.open(\"GET\", url);\n    client.onreadystatechange = handler;\n    client.responseType = \"json\";\n    client.setRequestHeader(\"Accept\", \"application/json\");\n    client.send();\n    function handler() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    }\n  });\n};\n使用\nmyHttpClient('https://www.baidu.com').then(res => {\n  console.log(res);\n}).catch(error => {\n  console.log(error);\n});\n```\n##### 8闭包\n```javascript\nfunction foo(x) {\n    var tmp = 3;\n    return function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nvar bar = foo(2); // bar 现在是一个闭包\nbar(10);\n结果是16\nes6通常用let const块级作用域代替，\n闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题\n```\n##### 9 什么是立即执行函数？使用立即执行函数的目的是什么？\n```javascript\n常见两种方式\n1.(function(){...})()\n  (function(x){\n\t  console.log(x);\n  })(12345)\n2.(function(){...}())\n  (function(x){\n\t  console.log(x);\n  }(12345))\n作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如\n（function(window){...}(window)）\n```\n##### 10 async/await 语法\n```javascript\n作用：异步代码的新方式\npromise示例\nconst makeRequest = () => {\n  return getJSON()\n    .then(data => {\n      if (data.needsAnotherRequest) {\n        return makeAnotherRequest(data)\n          .then(moreData => {\n            console.log(moreData)\n            return moreData\n          })\n      } else {\n        console.log(data)\n        return data\n      }\n    })\n}\nasync/await示例\nconst makeRequest = async () => {\n  const data = await getJSON()\n  if (data.needsAnotherRequest) {\n    const moreData = await makeAnotherRequest(data);\n    console.log(moreData)\n    return moreData\n  } else {\n    console.log(data)\n    return data    \n  }\n}\n函数前面多了一个aync关键字。await关键字只能用在aync定义的函数内。async函数会隐式地返回一个promise，该promise的reosolve值就是函数return的值。(示例中reosolve值就是字符串\"done\")\n```\n##### 11 深浅拷贝\n```javascript\nlet a = {\n  aa: 1,\n  bb: 2,\n  cc: 3,\n  dd: {\n    ee: 5,\n  },\n  ff: {\n    gg: 6,\n  }\n};\nlet d = JSON.parse(JSON.stringify(a));//深复制包含子对象\nlet c = {...a};//深拷贝单不包含子对象\nlet b = a;//浅拷贝\nb.bb = 22;\nc.cc = 33;\nc.dd.ee = 55;\nd.ff.gg = 66;\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\nconsole.log(d);\n```\n##### 12数组去重 \n```javascript\n思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中\n思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。\n思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。\n思路4（最常用）：使用es6 set\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];\nconsole.log([...new Set(arr)]);\n```\n##### 13正则实现trim()功能\n```javascript\nfunction myTrim(str) {\n  let reg = /^\\s+|\\s+$/g;\n  return str.replace(reg, \"\");\n}\nconsole.log(myTrim('    asdf    '));\n```\n##### 14 JS原型\n```javascript\n1.每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性\n2.个人粗略理解与python的类方法静态方法实例方法差不多\n```\n#####15 es6 class \n``` javascript\n面向对象，java中类\n```\n##### 16 JS 如何实现继承\n```javascript\n1.使用原型继承（既继承了父类的模板，又继承了父类的原型对象。优点是继承了父类的模板，又继承了父类的原型对象，缺点就是父类实例传参，不是子类实例化传参，不符合常规语言的写法）\n2.使用call的方式（继承了父类的模板，不继承了父类的原型对象。优点是方便了子类实例传参，缺点就是不继承了父类的原型对象）\n```\n##### 17 手写jquery插件\n```javascript\n(function ($) {\n\t$.fn.myPlugins = function (options) {\n\t  //参数赋值\n\t  options = $.extend(defaults, options);//对象合并\n\t  this.each(function () {\n\t      //执行代码逻辑\n\t  });\n\t};\n})(jQuery);\n\n$(selector).myPlugins({参数});\n```\n##### 18 数组合并去重排序\n```javascript\nlet arr1 = [1, 25, 2, 26, 1234, 6, 213];\nlet arr2 = [2, 6, 2134, 6, 31, 623];\nlet c = [...new Set([...arr1, ...arr2])].sort((a, b) => {\n\treturn a - b;\n});\n```\n##### 19 call apply\n作用：在函数调用时改变函数的执行上下文也就是this的值\n区别：call采用不定长的参数列表，而apply使用一个参数数组。\n性能优化图\n![性能优化](http://pd4ar0u4q.bkt.clouddn.com/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg)\n##### 20 for 中setTimeOut\n要为循环题创建不同的循环副本\n##### 21 sort函数\nV8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。\n##### 22 navigator\n![Navigator](http://pd4ar0u4q.bkt.clouddn.com/Navigator.png)\n##### 23 jquery绑定方式\n1. click后者覆盖\n2. bind后者覆盖\n3. on(jquery>=1.7)\n4. live\n5. delegate\n##### 24 事件流向\n1. 冒泡：子节点一层层冒泡到根节点\n2. 捕获顺序与冒泡相反\n3. addEventListener最后个参数true代表捕获反之代表冒泡\n4. 阻止冒泡不停止父节点捕获\n##### 25原生操作class\n```javascript\n//判断有无\nfunction hasClass(ele, cls) {\n\treturn ele.className.match(new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\"));\n}\n\n//添加\nfunction addClass(ele, cls) {\n\tif (!this.hasClass(ele, cls)) ele.className += \" \" + cls;\n}\n\n//删除\nfunction removeClass(ele, cls) {\n\tif (hasClass(ele, cls)) {\n\t\tlet reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\");\n\t\tele.className = ele.className.replace(reg, \" \");\n\t}\n}\n\nhtml5中加入classList \n一系列操作\n兼容至IE10\n```\n#### <div id=\"dom\">DOM相关</div>\n##### dom事件模型\nDOM之事件模型分脚本模型、内联模型(同类一个，后者覆盖)、动态绑定(同类多个)\ndemo\n```javascript\n<body>\n<!--行内绑定：脚本模型-->\n<button onclick=\"javascrpt:alert('Hello')\">Hello1</button>\n<!--内联模型-->\n<button onclick=\"showHello()\">Hello2</button>\n<!--动态绑定-->\n<button id=\"btn3\">Hello3</button>\n</body>\n<script>\n/*DOM0：同一个元素，同类事件只能添加一个，如果添加多个，\n* 后面添加的会覆盖之前添加的*/\nfunction shoeHello() {\nalert(\"Hello\");\n}\nvar btn3 = document.getElementById(\"btn3\");\nbtn3.onclick = function () {\nalert(\"Hello\");\n}\n/*DOM2:可以给同一个元素添加多个同类事件*/\nbtn3.addEventListener(\"click\",function () {\nalert(\"hello1\");\n});\nbtn3.addEventListener(\"click\",function () {\nalert(\"hello2\");\n})\nif (btn3.attachEvent){\n/*IE*/\nbtn3.attachEvent(\"onclick\",function () {\nalert(\"IE Hello1\");\n})\n}else {\n/*W3C*/\nbtn3.addEventListener(\"click\",function () {\nalert(\"W3C Hello\");\n})\n}\n</script>\n```\n冒泡解释：当点击一个元素触发事件时. 事件会先从元素的最外层父元素一层一层进入到触发的元素, 然后在从触发元素一层一层返回到最外层父元素, 从最外层一层一层进入的阶段叫事件捕获阶段, 从最里层一层一层往外的阶段叫事件冒泡,\n\n##### 移动端触摸事件\n①touchstart：当手指触碰到屏幕的时候触发 \n②touchmove：当手指在屏幕上滑动的时候触发 \n③touchend：当手指离开屏幕的时候时候触发 \n④touchcancel事件：当系统停止跟踪触摸的时候触发(这个事件很少会用，一般不做深入研究)。 电话接入或者弹出信息等其他事件切入\nevent： \n1. touches：表示当前跟踪的触摸操作的touch对象的数组。 \n2. targetTouches：特定于事件目标的Touch对象的数组。 \n3. changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。 \n\n每个touch对象包含的属性 \n1. clientX：触摸目标在视口中的x坐标。 \n2. clientY：触摸目标在视口中的y坐标。 \n3. identifier：标识触摸的唯一ID。 \n4. pageX：触摸目标在页面中的x坐标。 \n5. pageY：触摸目标在页面中的y坐标。 \n6. screenX：触摸目标在屏幕中的x坐标。 \n7. screenY：触摸目标在屏幕中的y坐标。 \n8. target：触目的DOM节点目标。 \n\n##### 事件委托\n参考定义：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件\n好处：给重复的节点添加相同操作，减少dom交互，提高性能\n实现思路：给父组件添加事件，通过事件冒泡，排查元素是否为指定元素，并进行系列操作\n\n#### <div id=\"http\">HTTP相关</div>\n##### 常见状态码\n<b>2开头 （请求成功）表示成功处理了请求的状态代码。</b>\n\n200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 \n201   （已创建）  请求成功并且服务器创建了新的资源。 \n202   （已接受）  服务器已接受请求，但尚未处理。 \n203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。 \n204   （无内容）  服务器成功处理了请求，但没有返回任何内容。 \n205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206   （部分内容）  服务器成功处理了部分 GET 请求。\n\n<b>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</b>\n\n300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 \n301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 \n305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 \n307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n<b>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</b>\n\n400   （错误请求） 服务器不理解请求的语法。 \n401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 \n403   （禁止） 服务器拒绝请求。\n404   （未找到） 服务器找不到请求的网页。\n405   （方法禁用） 禁用请求中指定的方法。 \n406   （不接受） 无法使用请求的内容特性响应请求的网页。 \n407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408   （请求超时）  服务器等候请求时发生超时。 \n409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 \n410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。 \n411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。 \n412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。 \n413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 \n414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。 \n415   （不支持的媒体类型） 请求的格式不受请求页面的支持。 \n416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。 \n417   （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n<b>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</b>\n\n500   （服务器内部错误）  服务器遇到错误，无法完成请求。 \n501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 \n502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 \n503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 \n504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 \n505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。\n\n##### 缓存\n1. Expires在http1.0中使用，与服务器时间有误差，在1.1中由Cache-control替代\n<meta http-equiv=\"Cache-Control\" content=\"max-age=7200\" />\n<meta http-equiv=\"Expires\" content=\"Mon, 20 Jul 2009 23:00:00 GMT\" />\n2. cdn\n\n#####  Cache-Control 和 Etag 的区别\n如下图\n![区别图](http://pd4ar0u4q.bkt.clouddn.com/%E5%8C%BA%E5%88%AB%E5%9B%BE.png)\n\n##### Cookie sessionStorage  localStorage\n共同点：都是保存在浏览器端，且同源的。\n区别：cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据不能超过4k(适合保存小数据)。\nsessionStorage和localStorage容量较大，数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效。localStorage：始终有效，窗口或浏览器关闭也一直保存，需手动清楚；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同。\nsessionStorage不在不同的浏览器窗口中共享；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。\n\n应用场景：localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage ：敏感账号一次性登录； cookies与服务器交互。\n\n##### GET POST区别\n\n![get_post](http://pd4ar0u4q.bkt.clouddn.com/get_post.png)\n##### 请求行，请求头，请求体详解\n![如图](http://pd4ar0u4q.bkt.clouddn.com/http%E8%AF%B7%E6%B1%82%E4%B8%80%E4%BD%93.jpg)\n1,2,3请求行，4请求体，5请求体\n##### 跨域、JSONP 、CORS、postMessage\n跨域概念解释：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：我们认为若协议 + 域名 + 端口号均相同，那么就是同域。\n如下表\n![图](http://pd4ar0u4q.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F%E6%83%85%E5%86%B5%E6%A0%87%E8%AF%86.png)\n\njsoup实现\n```javascript\n原生\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n \n    // 传参并指定回调执行函数为onBack\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=onBack';\n    document.head.appendChild(script);\n \n    // 回调执行函数\n    function onBack(res) {\n        alert(JSON.stringify(res));\n    }\n </script>\n \njquery\n$.ajax({\n    url: 'http://www.domain2.com:8080/login',\n    type: 'get',\n    dataType: 'jsonp',  // 请求方式为jsonp\n    jsonpCallback: \"onBack\",    // 自定义回调函数名\n    data: {}\n});\n\nvue\nthis.$http.jsonp('http://www.domain2.com:8080/login', {\n    params: {},\n    jsonp: 'onBack'\n}).then((res) => {\n    console.log(res); \n})\n\n配合的后端node实现,其他服务器语言也可以\nconst querystring = require('querystring');\nconst http = require('http');\nconst server = http.createServer();\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.split('?')[1]);\n    var fn = params.callback;\n \n    // jsonp返回设置\n    res.writeHead(200, { 'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n \n    res.end();\n});\nserver.listen('8080');\n\njsoup缺点只能实现get请求\n```\n\nCORS：跨源资源共享 Cross-Origin Resource Sharing(CORS)，通常服务器设置，若带cookie请求，则前后端都需要设置\n后端常见设置\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://www.domain1.com\");  // 若有端口需写全（协议+域名+端口），允许那些外源请求\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); //是否需要验证\n\n前端示例\n\n```javascript\n原生\n\nvar xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容\n// 前端设置是否带cookie\nxhr.withCredentials = true;\nxhr.open('post', 'http://www.domain2.com:8080/login', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send('user=admin');\n \nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n    }\n\njquery\n$.ajax({\n    ...\n   xhrFields: {\n       withCredentials: true    // 前端设置是否带cookie\n   },\n   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie\n    ...\n});\n```\n\n```javascript\npostMessage(data,origin)方法接受两个参数\ndemo\n\na.html\n<iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\n<script>       \n    var iframe = document.getElementById('iframe');\n    iframe.onload = function() {\n        var data = {\n            name: 'aym'\n        };\n        // 向domain2传送跨域数据\n        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');\n    };\n \n    // 接受domain2返回数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain2 ---> ' + e.data);\n    }, false);\n</script>\n\nb.html  与a.html不同源\n\n<script>\n    // 接收domain1的数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain1 ---> ' + e.data);\n \n        var data = JSON.parse(e.data);\n        if (data) {\n            data.number = 16;\n \n            // 处理后再发回domain1\n            window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com');\n        }\n    }, false);\n</script>\n```\n##### osi模型\n七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层\ntcp ucp属于传输层；http属于应用层\n##### http2.0 http1\n1. HTTP2.0的基本单位为二进制帧\n2. HTTP2.0中帧具有优先级\n3. HTTP2.0的多路复用（ 1次连接）\n4. HTTP2.0压缩消息头\n5. HTTP2.0服务端推送\n6. HTTP2.0只适用于HTTPS的场景\n#### <div id=\"vue\">Vue相关</div>\n\n##### 生命周期顺序\n![生命周期](http://pd4ar0u4q.bkt.clouddn.com/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)\n\n##### 组件通信\n1.父传子用props,父用子用ref 子调父用$emit,无关系用Bus\n##### Vuex\n组件通信库，可以避免子组件无法改变props的弊端等\nmutations 同步操作， 用于改变状态 官方不推荐异步\naction 执行多个mutaions，官方推荐异步操作\nmapState、mapGetters、mapActions使用示例\n``` javascript\n<template>\n  <el-dialog :visible.sync=\"show\"></el-dialog>\n</template>\n\n<script>\nimport {mapState} from 'vuex';\nexport default {\n  computed:{\n\n    //这里的三点叫做 : 扩展运算符\n    ...mapState({\n      show:state=>state.dialog.show\n    }),\n  }\n}\n</script>\n\n后两者类似\n```\n##### VueRouter\n```javascript\n定义\nvar routes = [\n    {\n        path:\"/one\",\n\n        component:导入的组件1\n    },\n    {\n        path:\"/two\",\n        component:导入的组件2\n    },\n];\n// 定义路由组件\nvar router = new VueRouter({\n    routes\n});\n// 定义路由\nnew Vue({\n    el:\"#box\",\n    router\n});\n 访问设定的路由后 会将<router-view></router-view>替换成相应的模版\n html访问方式 <router-link to=\"/one\">One</router-link>(类似a标签)\n js访问方式 this.$router.push('/one'); \n replace方式 替换当前页面\n 携带的参数 可以通过this.$route.query.xxxx来获取\n``` \n##### Vue双向绑定\n原理：利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。\n缺点：双向数据流是自动管理状态的, 但是在实际应用中会有很多不得不手动处理状态变化的逻辑, 使得程序复杂度上升, 难以调试。\n##### computed  watch methods\n用法：\n区别：\n1. 前两者自动追踪数据，执行相关函数，最后一个手动调用；\n2. computed是计算属性，用法与data一致\n3. watch像事件监听，对象发生变化时，执行相关操作\n4. methods与js中执行方法类似\n5. computed通常只有get属性\n6. 数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择\n7. watch的对象必须事先声明\n#### <div id=\"sort\">算法相关</div>\n##### 各种排序实现\n相关数据\n![表格](http://pd4ar0u4q.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AD%89%E7%AD%89.png)\n```javascript\n// 冒泡排序: 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样\n冒泡demo:\nfunction bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - 1 - i; j++) {\n            if (arr[j] > arr[j+1]) {        //相邻元素两两对比\n                [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];\n            }\n        }\n    }\n    return arr;\n}\n// 1) 首先，在数组中选择一个中间项作为主元\n// 2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到\n// 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作\n// 3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成\n快排demo:\nfunction quickSort(arr, left, right) {\n    let len = arr.length;\n    let partitionIndex;\n    left = typeof left !== 'number' ? 0 : left;\n    right = typeof right !== 'number' ? len - 1 : right;\n    if (left < right) {\n        partitionIndex = partition(arr, left, right);\n        quickSort(arr, left, partitionIndex - 1);\n        quickSort(arr, partitionIndex + 1, right);\n    }\n    return arr;\n}\n\nfunction partition(arr, left, right) {     //分区操作\n    let pivot = left;                      //设定基准值（pivot）\n    let index = pivot + 1;\n    for (let i = index; i <= right; i++) {\n        if (arr[i] < arr[pivot]) {\n            [arr[i], arr[index]] = [arr[index], arr[i]];\n            index++;\n        }\n    }\n    [arr[pivot], arr[index - 1]] = [arr[index - 1], arr[pivot]];\n    return index - 1;\n}\n// 选择排序：大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)\n选择demo:\nfunction selectionSort(arr) {\n\tlet len = arr.length;\n\tlet minIndex;\n\tfor (let i = 0; i < len - 1; i++) {\n\t\tminIndex = i;\n\t\tfor (let j = i + 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[minIndex]) {     //寻找最小的数\n\t\t\t    minIndex = j;                 //将最小数的索引保存\n\t\t    }\n\t\t}\n\t\t[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\t}\nreturn arr;\n}\n// 插入排序：每次排一个数组项，假设数组的第一项已经排序，接着，把第二项与第一项进行对比，第二项是该插入到第一项之前还是之后，第三项是该插入到第一项之前还是第一项之后还是第三项\n插入demo:\nfunction insertionSort(arr) {\n\tlet len = arr.length;\n\tlet preIndex, current;\n\tfor (let i = 1; i < len; i++) {\n\t    preIndex = i - 1;\n\t    current = arr[i];\n\t    while (preIndex >= 0 && arr[preIndex] > current) {\n\t\t    arr[preIndex + 1] = arr[preIndex];\n\t\t    preIndex--;\n\t    }\n\t    arr[preIndex + 1] = current;\n\t}\n\treturn arr;\n}\n// 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)\n// 归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组\n归并demo:\nfunction mergeSort(arr) {  //采用自上而下的递归方法\n    let len = arr.length;\n    if(len < 2) {\n        return arr;\n    }\n    let middle = Math.floor(len / 2),\n    left = arr.slice(0, middle),\n    right = arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right){\n    let result = [];\n    while (left.length && right.length) {\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n    result.push(...left);\n    result.push(...right);\n    return result;\n}\n//堆排序：堆排序把数组当中二叉树来排序而得名。\n// 1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1\n// 本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个\n堆demo:\nvar len;    //因为声明的多个函数都需要数据长度，所以把len设置成为全局变量\n\nfunction buildMaxHeap(arr) {   //建立大顶堆\n    len = arr.length;\n    for (let i = Math.floor(len / 2); i >= 0; i--) {\n        heapify(arr, i);\n    }\n}\n\nfunction heapify(arr, i) {     //堆调整\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    let largest = i;\n    if (left < len && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    if (right < len && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    if (largest !== i) {\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        heapify(arr, largest);\n    }\n}\n\nfunction heapSort(arr) {\n    buildMaxHeap(arr);\n    for (let i = arr.length - 1; i > 0; i--) {\n        [arr[0],arr[i]]=[arr[i],arr[0]];\n        len--;\n        heapify(arr, 0);\n    }\n    return arr;\n}\n```\n##### 二分查找\n思路\n（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。\n（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。\n（3）如果某一步数组为空，则表示找不到目标元素。\n```javascript\n// 非递归算法\nfunction binary_search(arr, key) {\n    let low = 0;\n    let high = arr.length - 1;\n    while(low <= high){\n        let mid = parseInt((high + low) / 2);\n        if(key === arr[mid]){\n            return  mid;\n        }else if(key > arr[mid]){\n            low = mid + 1;\n        }else if(key < arr[mid]){\n            high = mid -1;\n        }else{\n            return -1;\n        }\n    }\n}\n      \n\n// 递归算法\nfunction binary_search(arr,low, high, key) {\n    if (low > high){\n        return -1;\n    }\n    let mid = parseInt((high + low) / 2);\n    if(arr[mid] === key){\n        return mid;\n    }else if (arr[mid] > key){\n        high = mid - 1;\n        return binary_search(arr, low, high, key);\n    }else if (arr[mid] < key){\n        low = mid + 1;\n        return binary_search(arr, low, high, key);\n    }\n};\n```\n##### 二叉树相关\n``` javascript\n创建\nfunction Node(data,left,right){\n\tthis.data = data;//数值\n\tthis.left = left;//左节点\n\tthis.right = right;//右节点\n};\n插入二叉树\nfunction insert(node,data){\n\t//创建一个新的节点\n\tlet newNode  = new Node(data,null,null);\n\t//判断是否存在根节点，没有将新节点存入\n\tif(node == null){\n\t\tnode = newNode;\n\t}else{\n\t\t//获取根节点\n\t\tlet current = node;\n\t\tlet parent;\n\t\twhile(true){\n\t\t\t//将当前节点保存为父节点\n\t\t\tparent = current;\n\t\t\t//将小的数据放在左节点\n\t\t\tif(data < current.data){\n\t\t\t\t//获取当前节点的左节点\n\t\t\t\t//判断当前节点下的左节点是否有数据\n\t\t\t\tcurrent = current.left;\n\t\t\t\tif(current == null){\n\t\t\t\t\t//如果没有数据将新节点存入当前节点下的左节点\n\t\t\t\t\tparent.left = newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tcurrent = current.right;\n\t\t\t\tif(current == null){\n\t\t\t\t\tparent.right = newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}    \n\t}\n}\n翻转二叉树\nfunction invertTree(node) {\n\tif (node !== null) {\n\t\tnode.left, node.right = node.left, node.right;\n\t\tinvertTree(node.left);\n\t\tinvertTree(node.right);\n\t}\n\treturn node;\n}\n```\n``` javascript\n查找链表中倒数第k个结点\n2个思路\n1：先遍历出长度，然后查找长度-k+1的值\n2：2个指针，一个指针先走k-1，然后两个一起走到底部，后者就是结果\n```\n\n#### <div id=\"web\">网络安全相关</div>\n##### XSS CSRF\nXSS(跨站脚本攻击)，恶意的注入html代码，其他用户访问时，会被执行\n特点：能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击\n防御手段：\n+ 浏览器禁止页面的JS访问带有HttpOnly属性的Cookie\n+ 两端进行输入格式检查\n+ 通过编码转义的方式进行输出检查\nCSRF(攻击跨站请求伪造)\n特点：重要操作的所有参数都是可以被攻击者猜测到的。攻击者预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求。\n防御手段：\n+ token验证机制，比如请求数据字段中添加一个token，响应请求时校验其有效性\n+ 用户操作限制，比如验证码（繁琐，用户体验差）\n+ 请求来源限制，比如限制HTTP Referer才能完成操作（防御效果相比较差）\n实践中常用第一种\n#### <div id=\"webpack\"> webpack相关</div>\n#####打包体积\n优化思路\n1. 提取第三方库或通过引用外部文件的方式引入第三方库\n2. 代码压缩插件UglifyJsPlugin\n3. 服务器启用gzip压缩\n4. 按需加载资源文件 require.ensure\n5. 优化devtool中的source-map\n6. 剥离css文件，单独打包\n7. 去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致\n#####打包效率\n1. 开发环境采用增量构建，启用热更新\n2. 开发环境不做无意义的工作如提取css计算文件hash等\n3. 配置devtool\n4. 选择合适的loader\n5. 个别loader开启cache 如babel-loader\n6. 第三方库采用引入方式\n7. 提取公共代码\n8. 优化构建时的搜索路径 指明需要构建目录及不需要构建目录\n9. 模块化引入需要的部分\n##### Loader\n编写一个loader\n```javascript\nloader就是一个node模块，它输出了一个函数。当某种资源需要用这个loader转换时，这个函数会被调用。并且，这个函数可以通过提供给它的this上下文访问Loader API。\nreverse-txt-loader\n定义\nmodule.exports = function(src) {\n  //src是原文件内容（abcde），下面对内容进行处理，这里是反转\n  var result = src.split('').reverse().join(''); \n  //返回JavaScript源码，必须是String或者Buffer\n  return `module.exports = '${result}'`;\n}\n使用\n{\n\ttest: /\\.txt$/,\n\tuse: [\n\t\t{\n\t\t\t'./path/reverse-txt-loader'\n\t\t}\n\t]\n},\n```\n##### plugins\n使用范围更广，通常只需要require()然后添加到plugins数组中，且需要new一个\n#### <div id=\"other\">其他</div>\n##### URL到界面显示发生了什么\n1. DNS解析\n先本地缓存找，在一层层找\n将常见的地址解析成唯一对应的ip地址基本顺序为：本地域名服务器->根域名服务器->com顶级域名服务器依次类推下去,找到后记录并缓存下来如www.google.com为<br><b>. -> .com -> google.com. -> www.google.com.</b>\n2. TCP连接\n三次握手，只要没收到确认消息就要重新发\n\t1. 主机向服务器发送一个建立连接的请求（您好，我想认识您）；\n\t2. 服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；\n\t3. 主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。\n3. 发送HTTP请求\n浏览器会分析这个url，并设置好请求报文发出。请求报文中包括请求行、请求头、空行、请求主体。https默认请求端口443， http默认80。\n常见的http请求如下\n``` htmlbars\nPOST / HTTP1.1\nHost:www.wrox.com\nUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type:application/x-www-form-urlencoded\nContent-Length:40\nConnection: Keep-Alive\n\nname=Professional%20Ajax&publisher=Wiley\n第一部分：请求行，第一行说明是post请求，以及http1.1版本。\n第二部分：请求头部，第二行至第六行。\n第三部分：空行，第七行的空行。\n第四部分：请求数据，第八行。\n4. 服务器处理请求并返回HTTP报文\n后端处理返回http报文如下\n```\n\n``` htmlbars\nHTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n<html>\n      <head></head>\n      <body>\n            <!--body goes here-->\n      </body>\n</html>\n第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）\n第二行和第三行为消息报头，\nDate:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8\n第三部分：空行，消息报头后面的空行是必须的\n第四部分：响应正文，服务器返回给客户端的文本信息。\n空行后面的html部分为响应正文。\n```\n5. 浏览器解析渲染页面\n+ 通过HTML解析器解析HTML文档，构建一个DOM Tree，同时通过CSS解析器解析HTML中存在的CSS，构建Style Rules，两者结合形成一个Attachment。\n+ 通过Attachment构造出一个呈现树（Render Tree）\n+ Render Tree构建完毕，进入到布局阶段（layout/reflow），将会为每个阶段分配一个应出现在屏幕上的确切坐标。\n+ 最后将全部的节点遍历绘制出来后，一个页面就展现出来了。\n遇到script会停下来执行，所以通常把script放在底部\n6. 连接结束\n\n##### 组件封装\n目的：为了重用，提高开发效率和代码质量\n注意：低耦合，单一职责，可复用性，可维护性\n常用操作：\n1. 分析布局\n2. 初步开发\n3. 化繁为简\n4. 组件抽象\n\n##### JS异步加载\n1. 动态生成script标签\n2. 添加h5的async defer属性，前者乱序不适合依赖性加载\n3. async 是“下载完就执行”， defer 是“渲染完再执行”\n\n##### css与js动画差异\n1. css性能好\n2. css代码逻辑相对简单\n3. js动画控制好\n4. js兼容性好\n5. js可实现的动画多\n6. js可以添加事件\n\n#####  负载均衡\n多台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用\n1. http重定向负载均衡：调度者根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器\n2. dns负载均衡：解析域名时，访问多个ip服务器中的一个（可监控性较弱）\n3. 反向代理负载均衡：访问统一的服务器，由服务器进行调度访问实际的某个服务器，对统一的服务器要求大，性能受到 服务器群的数量\n\n##### CDN\n内容分发网络，基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。\n\n#####  内存泄漏\n定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题\njs中可能出现的内存泄漏情况\n结果：变慢，崩溃，延迟大等\n原因：\n1. 全局变量\n2. dom清空时，还存在引用\n3. ie中使用闭包\n4. 定时器未清理\n5. 子元素存在引起的内存泄露\n\n避免策略：\n1. 减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；\n2. 注意程序逻辑，避免“死循环”之类的 ；\n3. 避免创建过多的对象  原则：不用了的东西要及时归还。 \n4. 减少层级过多的引用\n#####  babel原理\nES6、7代码输入 -> babylon进行解析 -> 得到AST（抽象语法树）-> plugin用babel-traverse对AST树进行遍历转译 ->得到新的AST树->用babel-generator通过AST树生成ES5代码、\n\n##### promise\n特性：Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止，也即是说，错误总会被下一个catch语句捕获\n\n##### js自定义事件\n三要素：\ndocument.createEvent()\nevent.initEvent()\nelement.dispatchEvent()\n``` javascript\ndemo:\n(en:自定义事件名称，fn:事件处理函数，addEvent:为DOM元素添加自定义事件，triggerEvent:触发自定义事件)\nwindow.onload = function(){\n    var demo = document.getElementById(\"demo\");\n    demo.addEvent(\"test\",function(){console.log(\"handler1\")});\n    demo.addEvent(\"test\",function(){console.log(\"handler2\")});\n    demo.onclick = function(){\n        this.triggerEvent(\"test\");\n    }\n}\nElement.prototype.addEvent = function(en,fn){\n    this.pools = this.pools || {};\n    if(en in this.pools){\n        this.pools[en].push(fn);\n    }else{\n        this.pools[en] = [];\n        this.pools[en].push(fn);\n    }\n}\nElement.prototype.triggerEvent  = function(en){\n    if(en in this.pools){\n        var fns = this.pools[en];\n        for(var i=0,il=fns.length;i<il;i++){\n            fns[i]();\n        }\n    }else{\n        return;\n    }\n}\n```\n\n#####  es6模块 commonjs  amd cmd\n1.  CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。\n2.  CommonJS是同步加载模块,在浏览器中会出现堵塞情况，所以不适用\n3.  AMD 异步，需要定义回调define方式\n4.  es6 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量\n5.  es6还可以导出类、方法，自动适用严格模式\n\n##### 前后端路由差别\n\n1.后端每次路由请求都是重新访问服务器\n2.前端路由实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。\n","source":"_posts/前端开发最全面试题.md","raw":"---\ntitle: 前端开发最全面试题\ncategories: \"前端周刊\" \ndate: 2018-09-30 18:13:33\ntags: [分享]\n---\n\n### 前端问题记录\n1. [HTML相关](#html)\n2. [CSS相关](#css)\n3. [JAVASCRIPT相关](#javascript)\n4. [DOM相关](#dom)\n5. [HTTP相关](#http)\n4. [VUE相关](#vue)\n5. [算法相关](#sort)\n6. [网络安全相关](#web)\n7. [webpack相关](#webpack)\n8. [其他](#other)\n#### Html相关\n##### <div id=\"html\">1 html语义化</div>\n意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。\n注意：\n1.尽可能少的使用无语义的标签div和span；\n2.在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；\n3.不要使用纯样式标签，如：b、font、u等，改用css设置。\n4.需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；\n5.使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；\n6.表单域要用fieldset标签包起来，并用legend标签说明表单的用途；\n7.每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。\n\n新标签：\n![h5新元素](http://pd4ar0u4q.bkt.clouddn.com/h5%E6%96%B0%E5%85%83%E7%B4%A0.png)\n##### 2 meta viewport相关\n```htmlbars\n<!DOCTYPE html>  H5标准声明，使用 HTML5 doctype，不区分大小写\n<head lang=”en”> 标准的 lang 属性写法\n<meta charset=’utf-8′>    声明文档使用的字符编码\n<meta http-equiv=”X-UA-Compatible” content=”IE=edge,chrome=1″/>   优先使用 IE 最新版本和 Chrome\n<meta name=”description” content=”不超过150个字符”/>       页面描述\n<meta name=”keywords” content=””/>      页面关键词\n<meta name=”author” content=”name, email@gmail.com”/>    网页作者\n<meta name=”robots” content=”index,follow”/>      搜索引擎抓取\n<meta name=”viewport” content=”initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no”> 为移动设备添加 viewport\n<meta name=”apple-mobile-web-app-title” content=”标题”> iOS 设备 begin\n<meta name=”apple-mobile-web-app-capable” content=”yes”/>  添加到主屏后的标题（iOS 6 新增）\n是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏\n<meta name=”apple-itunes-app” content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”>\n添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）\n<meta name=”apple-mobile-web-app-status-bar-style” content=”black”/>\n<meta name=”format-detection” content=”telphone=no, email=no”/>  设置苹果工具栏颜色\n<meta name=”renderer” content=”webkit”>  启用360浏览器的极速模式(webkit)\n<meta http-equiv=”X-UA-Compatible” content=”IE=edge”>     避免IE使用兼容模式\n<meta http-equiv=”Cache-Control” content=”no-siteapp” />    不让百度转码\n<meta name=”HandheldFriendly” content=”true”>     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓\n<meta name=”MobileOptimized” content=”320″>   微软的老式浏览器\n<meta name=”screen-orientation” content=”portrait”>   uc强制竖屏\n<meta name=”x5-orientation” content=”portrait”>    QQ强制竖屏\n<meta name=”full-screen” content=”yes”>              UC强制全屏\n<meta name=”x5-fullscreen” content=”true”>       QQ强制全屏\n<meta name=”browsermode” content=”application”>   UC应用模式\n<meta name=”x5-page-mode” content=”app”>    QQ应用模式\n<meta name=”msapplication-tap-highlight” content=”no”>    windows phone 点击无高光\n设置页面不缓存\n<meta http-equiv=”pragma” content=”no-cache”>\n<meta http-equiv=”cache-control” content=”no-cache”>\n<meta http-equiv=”expires” content=”0″>\n```\n##### 3 canvas 相关\n```javascript\n使用前需要获得上下文环境，暂不支持3d\n常用api:\n\t1.fillRect(x,y,width,height)实心矩形\n\t2.strokeRect(x,y,width,height)空心矩形\n\t3.fillText(\"Hello world\",200,200);实心文字\n    4.strokeText(\"Hello world\",200,300)空心文字\n各种东西！！！\n```\n##### 新标签兼容低版本\n1. ie9之前版本通过createElement创建html5新标签\n2. 引入html5shiv.js\n#### <div id=\"css\">CSS相关</div>\n##### 1.盒模型\n1.ie盒模型算上border、padding及自身（不算margin），标准的只算上自身窗体的大小\ncss设置方法如下\n```css\n/* 标准模型 */\nbox-sizing:content-box;\n /*IE模型*/\nbox-sizing:border-box;\n```\n2.margin、border、padding、content由外到里\n3.几种获得宽高的方式\n+ dom.style.width/height \n　　这种方式只能取到dom元素内联样式所设置的宽高，也就是说如果该节点的样式是在style标签中或外联的CSS文件中设置的话，通过这种方法是获取不到dom的宽高的。\n+ dom.currentStyle.width/height \n　　这种方式获取的是在页面渲染完成后的结果，就是说不管是哪种方式设置的样式，都能获取到。但这种方式只有IE浏览器支持。\n+ window.getComputedStyle(dom).width/height\n　　这种方式的原理和2是一样的，这个可以兼容更多的浏览器，通用性好一些。\n+ dom.getBoundingClientRect().width/height\n　　这种方式是根据元素在视窗中的绝对位置来获取宽高的\n+ dom.offsetWidth/offsetHeight\n　　这个就没什么好说的了，最常用的，也是兼容最好的。\n\n4.拓展 各种获得宽高的方式\n+ 获取屏幕的高度和宽度（屏幕分辨率）：\nwindow.screen.height/width\n+ 获取屏幕工作区域的高度和宽度（去掉状态栏）：\nwindow.screen.availHeight/availWidth\n+ 网页全文的高度和宽度：\ndocument.body.scrollHeight/Width\n+ 滚动条卷上去的高度和向右卷的宽度：\ndocument.body.scrollTop/scrollLeft\n+ 网页可见区域的高度和宽度（不加边线）：\ndocument.body.clientHeight/clientWidth\n+ 网页可见区域的高度和宽度（加边线）：\ndocument.body.offsetHeight/offsetWidth\n\n5.边距重叠解决方案(BFC)\nBFC原理\n+ 内部的box会在垂直方向，一个接一个的放置\n每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）\n+ box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠\n+ bfc的区域不会与浮动区域的box重叠\n+ bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的\n+ 计算bfc高度的时候，浮动元素也会参与计算\n创建bfc\n+ float属性不为none（脱离文档流）\n+ position为absolute或fixed\n+ display为inline-block,table-cell,table-caption,flex,inine-flex\n+ overflow不为visible\n+ 根元素\ndemo\n```htmlbars\n<section class=\"top\">\n\t<h1>上</h1>\n\t这块margin-bottom:30px;\n</section>\n<!-- 给下面这个块添加一个父元素，在父元素上创建bfc -->\n<div style=\"overflow:hidden\">\n\t<section class=\"bottom\">\n\t<h1>下</h1>\n\t这块margin-top:50px;\n\t</section>\n</div>\n```\n##### css reset 和 normalize.css 有什么区别\n+ 两者都是通过重置样式，保持浏览器样式的一致性\n+ 前者几乎为所有标签添加了样式，后者保持了许多浏览器样式，保持尽可能的一致\n+ 后者修复了常见的桌面端和移动端浏览器的bug：包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。\n+ 前者中含有大段的继承链\n+ 后者模块化，文档较前者来说丰富\n##### 居中方法\n水平方向上\n```css\n针对inline, 内联块inline-block, 内联表inline-table, inline-flex元素及img,span,button等元素\n.text_div{\n\ttext-align:center;\n}\n```\n```css\n不定宽块状元素居中\n.text_div{\n    margin:0 auto;\n}\n\n```\n```css\n通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。\n.wrap{\n    float:left;\n    position:relative;\n    left:50%;\n    clear:both;\n}\n.wrap-center{\n    left:-50%;\n}\n```\n垂直居中\n```css\n单行内联(inline-)元素垂直居中 \n通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。\n\n.text_div{\n    height: 120px;\n    line-height: 120px;\n}\n```\n```css\n利用表布局\n.father {\n    display: table;\n}\n.children {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n```css\nflex布局\n.center-flex {\n    display: flex;\n    flex-direction: column;//上下排列\n    justify-content: center;\n}\n```\n```css\n绝对布局方式\n已知高度\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  height: 100px;\n  margin-top: -50px; \n}\n未知高度\n.parent {\n    position: relative;\n}\n.child {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n垂直水平居中根据上方结合\n```css\nflex方式\n.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\ngrid方式\n.parent {\n  height: 140px;\n  display: grid;\n}\n.child { \n  margin: auto;\n}\n```\n##### css优先级确定\n+ 每个选择器都有权值，权值越大越优先\n+ 继承的样式优先级低于自身指定样式\n+ ！important优先级最高 js也无法修改\n+ 权值相同时，靠近元素的样式优先级高  顺序为内联样式表（标签内部）> 内部样式表（当前文件中）> 外部样式表（外部文件中）\n##### bfc内容见盒模型\n##### 如何清除浮动\n不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）\n+ clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}\n+ 给浮动元素父级设置高度\n+ 父级同时浮动（需要给父级同级元素添加浮动）\n+ 父级设置成inline-block，其margin: 0 auto居中方式失效\n+ 利用br标签的clear属性\n+ 给父级添加overflow:hidden 清除浮动方法\n+ 万能清除法 after伪类 清浮动（现在主流方法，推荐使用）\n```css\n.float_div:after{\n\tcontent:\".\";\n\tclear:both;\n\tdisplay:block;\n\theight:0;\n\toverflow:hidden;\n\tvisibility:hidden;\n}\n.float_div{\n\tzoom:1\n} \n```\n##### 自适应布局\n思路：\n1. 左侧浮动或者绝对定位，然后右侧margin撑开\n2. 使用div包含，然后靠负margin形成bfc\n3. 使用flex\n##### 画三角形\n```css\n#item {\n\twidth: 0;\n\theight: 0;\n\tborder-left: 50px solid transparent;\n\tborder-right: 50px solid transparent;\n\tborder-top: 50px solid transparent;\n\tborder-bottom: 50px solid blue;\n\tbackground: white;\n}\n```\n##### link @import导入css\n1. link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n2. link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n3. link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n3. ink支持使用Javascript控制DOM去改变样式；而@import不支持。\n##### animation\n![](http://pd4ar0u4q.bkt.clouddn.com/animation.png)\n##### 长宽比方案\n1. 使用padding方式结合calc实现\n2. 长宽一项设置百分比另一项aspect-ratio实现（需借助插件实现）\n##### display相关\n1. block:div等容器类型\n2. inline:img span等行内类型\n3. table系列：将样式变成table类型\n4. flex:重点把握，非常强大\n5. grid:同上\n6. inline-block:可设置宽度，两者间有一点间隙\n7. inherit:继承父级\n#### <div id=\"javascript\">JavaScript相关</div>\n##### 1 [\"1\", \"2\", \"3\"].map(parseInt)\n```javascript\n首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值\n\n其中回调函数接受三个参数 currentValue, index, arrary;\n\n而题目中, map只传入了回调函数--parseInt.\n\n其次, parseInt 只接受两个两个参数 string, radix(基数).  \n本题理解来说也就是key与 index \n\n所以本题即问\nparseInt('1', 0);\nparseInt('2', 1);\nparseInt('3', 2);\n\nparseInt(string, radix)\nstring\t必需。要被解析的字符串。\nradix 可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。\n如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。\n```\n##### 2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]\n```javascript\narr.reduce(callback[, initialValue])\nreduce接受两个参数, 一个回调, 一个初始值.\n回调函数接受四个参数 previousValue, currentValue, currentIndex, array\n需要注意的是 If the array is empty and no initialValue was provided, TypeError would be thrown.\n所以第二个表达式会报异常. 第一个表达式等价于 Math.pow(3, 2) => 9; Math.pow(9, 1) =>9\n```\n##### 3\n```javascript\nvar ary = [0,1,2];\nary[10] = 10;\nary.filter(function(x) { return x === undefined;});\n我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.\n\n0 in ary; => true\n3 in ary; => false\n10 in ary; => true\n也就是说 从 3 - 9 都是没有初始化的bug !, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些坑的.\n```\n##### 4 [typeof null, null instanceof Object]\n```javascript\ntypeof 返回一个表示类型的字符串.\ninstanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上.\ntype         result\nUndefined   \"undefined\"\nNull        \"object\"\nBoolean     \"boolean\"\nNumber      \"number\"\nString      \"string\"\nSymbol      \"symbol\"\nHost object Implementation-dependent\nFunction    \"function\"\nObject      \"object\"\n```\n##### 5 js数据类型\n1.number; \n\n2.string;\n\n3.boolean;\n\n4.undefined;\n\n5.null;\n\n6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。\n\n7.Object.（包括Object，Array，Function）\n##### 6 promise 用法\n```javascript\n定义\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n使用\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n//等价于：\npromise.then(function(){\n  //success\n}).catch(function(){\n  //failure\n})\n```\n##### 7 es6 promise ajax\n```javascript\n定义\nconst myHttpClient = url => {\n  return new Promise((resolve, reject) => {\n    let client = new XMLHttpRequest();\n    client.open(\"GET\", url);\n    client.onreadystatechange = handler;\n    client.responseType = \"json\";\n    client.setRequestHeader(\"Accept\", \"application/json\");\n    client.send();\n    function handler() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    }\n  });\n};\n使用\nmyHttpClient('https://www.baidu.com').then(res => {\n  console.log(res);\n}).catch(error => {\n  console.log(error);\n});\n```\n##### 8闭包\n```javascript\nfunction foo(x) {\n    var tmp = 3;\n    return function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nvar bar = foo(2); // bar 现在是一个闭包\nbar(10);\n结果是16\nes6通常用let const块级作用域代替，\n闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题\n```\n##### 9 什么是立即执行函数？使用立即执行函数的目的是什么？\n```javascript\n常见两种方式\n1.(function(){...})()\n  (function(x){\n\t  console.log(x);\n  })(12345)\n2.(function(){...}())\n  (function(x){\n\t  console.log(x);\n  }(12345))\n作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如\n（function(window){...}(window)）\n```\n##### 10 async/await 语法\n```javascript\n作用：异步代码的新方式\npromise示例\nconst makeRequest = () => {\n  return getJSON()\n    .then(data => {\n      if (data.needsAnotherRequest) {\n        return makeAnotherRequest(data)\n          .then(moreData => {\n            console.log(moreData)\n            return moreData\n          })\n      } else {\n        console.log(data)\n        return data\n      }\n    })\n}\nasync/await示例\nconst makeRequest = async () => {\n  const data = await getJSON()\n  if (data.needsAnotherRequest) {\n    const moreData = await makeAnotherRequest(data);\n    console.log(moreData)\n    return moreData\n  } else {\n    console.log(data)\n    return data    \n  }\n}\n函数前面多了一个aync关键字。await关键字只能用在aync定义的函数内。async函数会隐式地返回一个promise，该promise的reosolve值就是函数return的值。(示例中reosolve值就是字符串\"done\")\n```\n##### 11 深浅拷贝\n```javascript\nlet a = {\n  aa: 1,\n  bb: 2,\n  cc: 3,\n  dd: {\n    ee: 5,\n  },\n  ff: {\n    gg: 6,\n  }\n};\nlet d = JSON.parse(JSON.stringify(a));//深复制包含子对象\nlet c = {...a};//深拷贝单不包含子对象\nlet b = a;//浅拷贝\nb.bb = 22;\nc.cc = 33;\nc.dd.ee = 55;\nd.ff.gg = 66;\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\nconsole.log(d);\n```\n##### 12数组去重 \n```javascript\n思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中\n思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。\n思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。\n思路4（最常用）：使用es6 set\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];\nconsole.log([...new Set(arr)]);\n```\n##### 13正则实现trim()功能\n```javascript\nfunction myTrim(str) {\n  let reg = /^\\s+|\\s+$/g;\n  return str.replace(reg, \"\");\n}\nconsole.log(myTrim('    asdf    '));\n```\n##### 14 JS原型\n```javascript\n1.每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性\n2.个人粗略理解与python的类方法静态方法实例方法差不多\n```\n#####15 es6 class \n``` javascript\n面向对象，java中类\n```\n##### 16 JS 如何实现继承\n```javascript\n1.使用原型继承（既继承了父类的模板，又继承了父类的原型对象。优点是继承了父类的模板，又继承了父类的原型对象，缺点就是父类实例传参，不是子类实例化传参，不符合常规语言的写法）\n2.使用call的方式（继承了父类的模板，不继承了父类的原型对象。优点是方便了子类实例传参，缺点就是不继承了父类的原型对象）\n```\n##### 17 手写jquery插件\n```javascript\n(function ($) {\n\t$.fn.myPlugins = function (options) {\n\t  //参数赋值\n\t  options = $.extend(defaults, options);//对象合并\n\t  this.each(function () {\n\t      //执行代码逻辑\n\t  });\n\t};\n})(jQuery);\n\n$(selector).myPlugins({参数});\n```\n##### 18 数组合并去重排序\n```javascript\nlet arr1 = [1, 25, 2, 26, 1234, 6, 213];\nlet arr2 = [2, 6, 2134, 6, 31, 623];\nlet c = [...new Set([...arr1, ...arr2])].sort((a, b) => {\n\treturn a - b;\n});\n```\n##### 19 call apply\n作用：在函数调用时改变函数的执行上下文也就是this的值\n区别：call采用不定长的参数列表，而apply使用一个参数数组。\n性能优化图\n![性能优化](http://pd4ar0u4q.bkt.clouddn.com/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg)\n##### 20 for 中setTimeOut\n要为循环题创建不同的循环副本\n##### 21 sort函数\nV8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。\n##### 22 navigator\n![Navigator](http://pd4ar0u4q.bkt.clouddn.com/Navigator.png)\n##### 23 jquery绑定方式\n1. click后者覆盖\n2. bind后者覆盖\n3. on(jquery>=1.7)\n4. live\n5. delegate\n##### 24 事件流向\n1. 冒泡：子节点一层层冒泡到根节点\n2. 捕获顺序与冒泡相反\n3. addEventListener最后个参数true代表捕获反之代表冒泡\n4. 阻止冒泡不停止父节点捕获\n##### 25原生操作class\n```javascript\n//判断有无\nfunction hasClass(ele, cls) {\n\treturn ele.className.match(new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\"));\n}\n\n//添加\nfunction addClass(ele, cls) {\n\tif (!this.hasClass(ele, cls)) ele.className += \" \" + cls;\n}\n\n//删除\nfunction removeClass(ele, cls) {\n\tif (hasClass(ele, cls)) {\n\t\tlet reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\");\n\t\tele.className = ele.className.replace(reg, \" \");\n\t}\n}\n\nhtml5中加入classList \n一系列操作\n兼容至IE10\n```\n#### <div id=\"dom\">DOM相关</div>\n##### dom事件模型\nDOM之事件模型分脚本模型、内联模型(同类一个，后者覆盖)、动态绑定(同类多个)\ndemo\n```javascript\n<body>\n<!--行内绑定：脚本模型-->\n<button onclick=\"javascrpt:alert('Hello')\">Hello1</button>\n<!--内联模型-->\n<button onclick=\"showHello()\">Hello2</button>\n<!--动态绑定-->\n<button id=\"btn3\">Hello3</button>\n</body>\n<script>\n/*DOM0：同一个元素，同类事件只能添加一个，如果添加多个，\n* 后面添加的会覆盖之前添加的*/\nfunction shoeHello() {\nalert(\"Hello\");\n}\nvar btn3 = document.getElementById(\"btn3\");\nbtn3.onclick = function () {\nalert(\"Hello\");\n}\n/*DOM2:可以给同一个元素添加多个同类事件*/\nbtn3.addEventListener(\"click\",function () {\nalert(\"hello1\");\n});\nbtn3.addEventListener(\"click\",function () {\nalert(\"hello2\");\n})\nif (btn3.attachEvent){\n/*IE*/\nbtn3.attachEvent(\"onclick\",function () {\nalert(\"IE Hello1\");\n})\n}else {\n/*W3C*/\nbtn3.addEventListener(\"click\",function () {\nalert(\"W3C Hello\");\n})\n}\n</script>\n```\n冒泡解释：当点击一个元素触发事件时. 事件会先从元素的最外层父元素一层一层进入到触发的元素, 然后在从触发元素一层一层返回到最外层父元素, 从最外层一层一层进入的阶段叫事件捕获阶段, 从最里层一层一层往外的阶段叫事件冒泡,\n\n##### 移动端触摸事件\n①touchstart：当手指触碰到屏幕的时候触发 \n②touchmove：当手指在屏幕上滑动的时候触发 \n③touchend：当手指离开屏幕的时候时候触发 \n④touchcancel事件：当系统停止跟踪触摸的时候触发(这个事件很少会用，一般不做深入研究)。 电话接入或者弹出信息等其他事件切入\nevent： \n1. touches：表示当前跟踪的触摸操作的touch对象的数组。 \n2. targetTouches：特定于事件目标的Touch对象的数组。 \n3. changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。 \n\n每个touch对象包含的属性 \n1. clientX：触摸目标在视口中的x坐标。 \n2. clientY：触摸目标在视口中的y坐标。 \n3. identifier：标识触摸的唯一ID。 \n4. pageX：触摸目标在页面中的x坐标。 \n5. pageY：触摸目标在页面中的y坐标。 \n6. screenX：触摸目标在屏幕中的x坐标。 \n7. screenY：触摸目标在屏幕中的y坐标。 \n8. target：触目的DOM节点目标。 \n\n##### 事件委托\n参考定义：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件\n好处：给重复的节点添加相同操作，减少dom交互，提高性能\n实现思路：给父组件添加事件，通过事件冒泡，排查元素是否为指定元素，并进行系列操作\n\n#### <div id=\"http\">HTTP相关</div>\n##### 常见状态码\n<b>2开头 （请求成功）表示成功处理了请求的状态代码。</b>\n\n200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 \n201   （已创建）  请求成功并且服务器创建了新的资源。 \n202   （已接受）  服务器已接受请求，但尚未处理。 \n203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。 \n204   （无内容）  服务器成功处理了请求，但没有返回任何内容。 \n205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206   （部分内容）  服务器成功处理了部分 GET 请求。\n\n<b>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</b>\n\n300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 \n301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 \n305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 \n307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n<b>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</b>\n\n400   （错误请求） 服务器不理解请求的语法。 \n401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 \n403   （禁止） 服务器拒绝请求。\n404   （未找到） 服务器找不到请求的网页。\n405   （方法禁用） 禁用请求中指定的方法。 \n406   （不接受） 无法使用请求的内容特性响应请求的网页。 \n407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408   （请求超时）  服务器等候请求时发生超时。 \n409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 \n410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。 \n411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。 \n412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。 \n413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 \n414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。 \n415   （不支持的媒体类型） 请求的格式不受请求页面的支持。 \n416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。 \n417   （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n<b>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</b>\n\n500   （服务器内部错误）  服务器遇到错误，无法完成请求。 \n501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 \n502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 \n503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 \n504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 \n505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。\n\n##### 缓存\n1. Expires在http1.0中使用，与服务器时间有误差，在1.1中由Cache-control替代\n<meta http-equiv=\"Cache-Control\" content=\"max-age=7200\" />\n<meta http-equiv=\"Expires\" content=\"Mon, 20 Jul 2009 23:00:00 GMT\" />\n2. cdn\n\n#####  Cache-Control 和 Etag 的区别\n如下图\n![区别图](http://pd4ar0u4q.bkt.clouddn.com/%E5%8C%BA%E5%88%AB%E5%9B%BE.png)\n\n##### Cookie sessionStorage  localStorage\n共同点：都是保存在浏览器端，且同源的。\n区别：cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据不能超过4k(适合保存小数据)。\nsessionStorage和localStorage容量较大，数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效。localStorage：始终有效，窗口或浏览器关闭也一直保存，需手动清楚；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同。\nsessionStorage不在不同的浏览器窗口中共享；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。\n\n应用场景：localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage ：敏感账号一次性登录； cookies与服务器交互。\n\n##### GET POST区别\n\n![get_post](http://pd4ar0u4q.bkt.clouddn.com/get_post.png)\n##### 请求行，请求头，请求体详解\n![如图](http://pd4ar0u4q.bkt.clouddn.com/http%E8%AF%B7%E6%B1%82%E4%B8%80%E4%BD%93.jpg)\n1,2,3请求行，4请求体，5请求体\n##### 跨域、JSONP 、CORS、postMessage\n跨域概念解释：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：我们认为若协议 + 域名 + 端口号均相同，那么就是同域。\n如下表\n![图](http://pd4ar0u4q.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F%E6%83%85%E5%86%B5%E6%A0%87%E8%AF%86.png)\n\njsoup实现\n```javascript\n原生\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n \n    // 传参并指定回调执行函数为onBack\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=onBack';\n    document.head.appendChild(script);\n \n    // 回调执行函数\n    function onBack(res) {\n        alert(JSON.stringify(res));\n    }\n </script>\n \njquery\n$.ajax({\n    url: 'http://www.domain2.com:8080/login',\n    type: 'get',\n    dataType: 'jsonp',  // 请求方式为jsonp\n    jsonpCallback: \"onBack\",    // 自定义回调函数名\n    data: {}\n});\n\nvue\nthis.$http.jsonp('http://www.domain2.com:8080/login', {\n    params: {},\n    jsonp: 'onBack'\n}).then((res) => {\n    console.log(res); \n})\n\n配合的后端node实现,其他服务器语言也可以\nconst querystring = require('querystring');\nconst http = require('http');\nconst server = http.createServer();\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.split('?')[1]);\n    var fn = params.callback;\n \n    // jsonp返回设置\n    res.writeHead(200, { 'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n \n    res.end();\n});\nserver.listen('8080');\n\njsoup缺点只能实现get请求\n```\n\nCORS：跨源资源共享 Cross-Origin Resource Sharing(CORS)，通常服务器设置，若带cookie请求，则前后端都需要设置\n后端常见设置\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://www.domain1.com\");  // 若有端口需写全（协议+域名+端口），允许那些外源请求\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); //是否需要验证\n\n前端示例\n\n```javascript\n原生\n\nvar xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容\n// 前端设置是否带cookie\nxhr.withCredentials = true;\nxhr.open('post', 'http://www.domain2.com:8080/login', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send('user=admin');\n \nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n    }\n\njquery\n$.ajax({\n    ...\n   xhrFields: {\n       withCredentials: true    // 前端设置是否带cookie\n   },\n   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie\n    ...\n});\n```\n\n```javascript\npostMessage(data,origin)方法接受两个参数\ndemo\n\na.html\n<iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\n<script>       \n    var iframe = document.getElementById('iframe');\n    iframe.onload = function() {\n        var data = {\n            name: 'aym'\n        };\n        // 向domain2传送跨域数据\n        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');\n    };\n \n    // 接受domain2返回数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain2 ---> ' + e.data);\n    }, false);\n</script>\n\nb.html  与a.html不同源\n\n<script>\n    // 接收domain1的数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain1 ---> ' + e.data);\n \n        var data = JSON.parse(e.data);\n        if (data) {\n            data.number = 16;\n \n            // 处理后再发回domain1\n            window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com');\n        }\n    }, false);\n</script>\n```\n##### osi模型\n七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层\ntcp ucp属于传输层；http属于应用层\n##### http2.0 http1\n1. HTTP2.0的基本单位为二进制帧\n2. HTTP2.0中帧具有优先级\n3. HTTP2.0的多路复用（ 1次连接）\n4. HTTP2.0压缩消息头\n5. HTTP2.0服务端推送\n6. HTTP2.0只适用于HTTPS的场景\n#### <div id=\"vue\">Vue相关</div>\n\n##### 生命周期顺序\n![生命周期](http://pd4ar0u4q.bkt.clouddn.com/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)\n\n##### 组件通信\n1.父传子用props,父用子用ref 子调父用$emit,无关系用Bus\n##### Vuex\n组件通信库，可以避免子组件无法改变props的弊端等\nmutations 同步操作， 用于改变状态 官方不推荐异步\naction 执行多个mutaions，官方推荐异步操作\nmapState、mapGetters、mapActions使用示例\n``` javascript\n<template>\n  <el-dialog :visible.sync=\"show\"></el-dialog>\n</template>\n\n<script>\nimport {mapState} from 'vuex';\nexport default {\n  computed:{\n\n    //这里的三点叫做 : 扩展运算符\n    ...mapState({\n      show:state=>state.dialog.show\n    }),\n  }\n}\n</script>\n\n后两者类似\n```\n##### VueRouter\n```javascript\n定义\nvar routes = [\n    {\n        path:\"/one\",\n\n        component:导入的组件1\n    },\n    {\n        path:\"/two\",\n        component:导入的组件2\n    },\n];\n// 定义路由组件\nvar router = new VueRouter({\n    routes\n});\n// 定义路由\nnew Vue({\n    el:\"#box\",\n    router\n});\n 访问设定的路由后 会将<router-view></router-view>替换成相应的模版\n html访问方式 <router-link to=\"/one\">One</router-link>(类似a标签)\n js访问方式 this.$router.push('/one'); \n replace方式 替换当前页面\n 携带的参数 可以通过this.$route.query.xxxx来获取\n``` \n##### Vue双向绑定\n原理：利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。\n缺点：双向数据流是自动管理状态的, 但是在实际应用中会有很多不得不手动处理状态变化的逻辑, 使得程序复杂度上升, 难以调试。\n##### computed  watch methods\n用法：\n区别：\n1. 前两者自动追踪数据，执行相关函数，最后一个手动调用；\n2. computed是计算属性，用法与data一致\n3. watch像事件监听，对象发生变化时，执行相关操作\n4. methods与js中执行方法类似\n5. computed通常只有get属性\n6. 数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择\n7. watch的对象必须事先声明\n#### <div id=\"sort\">算法相关</div>\n##### 各种排序实现\n相关数据\n![表格](http://pd4ar0u4q.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AD%89%E7%AD%89.png)\n```javascript\n// 冒泡排序: 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样\n冒泡demo:\nfunction bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - 1 - i; j++) {\n            if (arr[j] > arr[j+1]) {        //相邻元素两两对比\n                [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];\n            }\n        }\n    }\n    return arr;\n}\n// 1) 首先，在数组中选择一个中间项作为主元\n// 2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到\n// 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作\n// 3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成\n快排demo:\nfunction quickSort(arr, left, right) {\n    let len = arr.length;\n    let partitionIndex;\n    left = typeof left !== 'number' ? 0 : left;\n    right = typeof right !== 'number' ? len - 1 : right;\n    if (left < right) {\n        partitionIndex = partition(arr, left, right);\n        quickSort(arr, left, partitionIndex - 1);\n        quickSort(arr, partitionIndex + 1, right);\n    }\n    return arr;\n}\n\nfunction partition(arr, left, right) {     //分区操作\n    let pivot = left;                      //设定基准值（pivot）\n    let index = pivot + 1;\n    for (let i = index; i <= right; i++) {\n        if (arr[i] < arr[pivot]) {\n            [arr[i], arr[index]] = [arr[index], arr[i]];\n            index++;\n        }\n    }\n    [arr[pivot], arr[index - 1]] = [arr[index - 1], arr[pivot]];\n    return index - 1;\n}\n// 选择排序：大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)\n选择demo:\nfunction selectionSort(arr) {\n\tlet len = arr.length;\n\tlet minIndex;\n\tfor (let i = 0; i < len - 1; i++) {\n\t\tminIndex = i;\n\t\tfor (let j = i + 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[minIndex]) {     //寻找最小的数\n\t\t\t    minIndex = j;                 //将最小数的索引保存\n\t\t    }\n\t\t}\n\t\t[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\t}\nreturn arr;\n}\n// 插入排序：每次排一个数组项，假设数组的第一项已经排序，接着，把第二项与第一项进行对比，第二项是该插入到第一项之前还是之后，第三项是该插入到第一项之前还是第一项之后还是第三项\n插入demo:\nfunction insertionSort(arr) {\n\tlet len = arr.length;\n\tlet preIndex, current;\n\tfor (let i = 1; i < len; i++) {\n\t    preIndex = i - 1;\n\t    current = arr[i];\n\t    while (preIndex >= 0 && arr[preIndex] > current) {\n\t\t    arr[preIndex + 1] = arr[preIndex];\n\t\t    preIndex--;\n\t    }\n\t    arr[preIndex + 1] = current;\n\t}\n\treturn arr;\n}\n// 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)\n// 归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组\n归并demo:\nfunction mergeSort(arr) {  //采用自上而下的递归方法\n    let len = arr.length;\n    if(len < 2) {\n        return arr;\n    }\n    let middle = Math.floor(len / 2),\n    left = arr.slice(0, middle),\n    right = arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right){\n    let result = [];\n    while (left.length && right.length) {\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n    result.push(...left);\n    result.push(...right);\n    return result;\n}\n//堆排序：堆排序把数组当中二叉树来排序而得名。\n// 1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1\n// 本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个\n堆demo:\nvar len;    //因为声明的多个函数都需要数据长度，所以把len设置成为全局变量\n\nfunction buildMaxHeap(arr) {   //建立大顶堆\n    len = arr.length;\n    for (let i = Math.floor(len / 2); i >= 0; i--) {\n        heapify(arr, i);\n    }\n}\n\nfunction heapify(arr, i) {     //堆调整\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    let largest = i;\n    if (left < len && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    if (right < len && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    if (largest !== i) {\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        heapify(arr, largest);\n    }\n}\n\nfunction heapSort(arr) {\n    buildMaxHeap(arr);\n    for (let i = arr.length - 1; i > 0; i--) {\n        [arr[0],arr[i]]=[arr[i],arr[0]];\n        len--;\n        heapify(arr, 0);\n    }\n    return arr;\n}\n```\n##### 二分查找\n思路\n（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。\n（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。\n（3）如果某一步数组为空，则表示找不到目标元素。\n```javascript\n// 非递归算法\nfunction binary_search(arr, key) {\n    let low = 0;\n    let high = arr.length - 1;\n    while(low <= high){\n        let mid = parseInt((high + low) / 2);\n        if(key === arr[mid]){\n            return  mid;\n        }else if(key > arr[mid]){\n            low = mid + 1;\n        }else if(key < arr[mid]){\n            high = mid -1;\n        }else{\n            return -1;\n        }\n    }\n}\n      \n\n// 递归算法\nfunction binary_search(arr,low, high, key) {\n    if (low > high){\n        return -1;\n    }\n    let mid = parseInt((high + low) / 2);\n    if(arr[mid] === key){\n        return mid;\n    }else if (arr[mid] > key){\n        high = mid - 1;\n        return binary_search(arr, low, high, key);\n    }else if (arr[mid] < key){\n        low = mid + 1;\n        return binary_search(arr, low, high, key);\n    }\n};\n```\n##### 二叉树相关\n``` javascript\n创建\nfunction Node(data,left,right){\n\tthis.data = data;//数值\n\tthis.left = left;//左节点\n\tthis.right = right;//右节点\n};\n插入二叉树\nfunction insert(node,data){\n\t//创建一个新的节点\n\tlet newNode  = new Node(data,null,null);\n\t//判断是否存在根节点，没有将新节点存入\n\tif(node == null){\n\t\tnode = newNode;\n\t}else{\n\t\t//获取根节点\n\t\tlet current = node;\n\t\tlet parent;\n\t\twhile(true){\n\t\t\t//将当前节点保存为父节点\n\t\t\tparent = current;\n\t\t\t//将小的数据放在左节点\n\t\t\tif(data < current.data){\n\t\t\t\t//获取当前节点的左节点\n\t\t\t\t//判断当前节点下的左节点是否有数据\n\t\t\t\tcurrent = current.left;\n\t\t\t\tif(current == null){\n\t\t\t\t\t//如果没有数据将新节点存入当前节点下的左节点\n\t\t\t\t\tparent.left = newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tcurrent = current.right;\n\t\t\t\tif(current == null){\n\t\t\t\t\tparent.right = newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}    \n\t}\n}\n翻转二叉树\nfunction invertTree(node) {\n\tif (node !== null) {\n\t\tnode.left, node.right = node.left, node.right;\n\t\tinvertTree(node.left);\n\t\tinvertTree(node.right);\n\t}\n\treturn node;\n}\n```\n``` javascript\n查找链表中倒数第k个结点\n2个思路\n1：先遍历出长度，然后查找长度-k+1的值\n2：2个指针，一个指针先走k-1，然后两个一起走到底部，后者就是结果\n```\n\n#### <div id=\"web\">网络安全相关</div>\n##### XSS CSRF\nXSS(跨站脚本攻击)，恶意的注入html代码，其他用户访问时，会被执行\n特点：能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击\n防御手段：\n+ 浏览器禁止页面的JS访问带有HttpOnly属性的Cookie\n+ 两端进行输入格式检查\n+ 通过编码转义的方式进行输出检查\nCSRF(攻击跨站请求伪造)\n特点：重要操作的所有参数都是可以被攻击者猜测到的。攻击者预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求。\n防御手段：\n+ token验证机制，比如请求数据字段中添加一个token，响应请求时校验其有效性\n+ 用户操作限制，比如验证码（繁琐，用户体验差）\n+ 请求来源限制，比如限制HTTP Referer才能完成操作（防御效果相比较差）\n实践中常用第一种\n#### <div id=\"webpack\"> webpack相关</div>\n#####打包体积\n优化思路\n1. 提取第三方库或通过引用外部文件的方式引入第三方库\n2. 代码压缩插件UglifyJsPlugin\n3. 服务器启用gzip压缩\n4. 按需加载资源文件 require.ensure\n5. 优化devtool中的source-map\n6. 剥离css文件，单独打包\n7. 去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致\n#####打包效率\n1. 开发环境采用增量构建，启用热更新\n2. 开发环境不做无意义的工作如提取css计算文件hash等\n3. 配置devtool\n4. 选择合适的loader\n5. 个别loader开启cache 如babel-loader\n6. 第三方库采用引入方式\n7. 提取公共代码\n8. 优化构建时的搜索路径 指明需要构建目录及不需要构建目录\n9. 模块化引入需要的部分\n##### Loader\n编写一个loader\n```javascript\nloader就是一个node模块，它输出了一个函数。当某种资源需要用这个loader转换时，这个函数会被调用。并且，这个函数可以通过提供给它的this上下文访问Loader API。\nreverse-txt-loader\n定义\nmodule.exports = function(src) {\n  //src是原文件内容（abcde），下面对内容进行处理，这里是反转\n  var result = src.split('').reverse().join(''); \n  //返回JavaScript源码，必须是String或者Buffer\n  return `module.exports = '${result}'`;\n}\n使用\n{\n\ttest: /\\.txt$/,\n\tuse: [\n\t\t{\n\t\t\t'./path/reverse-txt-loader'\n\t\t}\n\t]\n},\n```\n##### plugins\n使用范围更广，通常只需要require()然后添加到plugins数组中，且需要new一个\n#### <div id=\"other\">其他</div>\n##### URL到界面显示发生了什么\n1. DNS解析\n先本地缓存找，在一层层找\n将常见的地址解析成唯一对应的ip地址基本顺序为：本地域名服务器->根域名服务器->com顶级域名服务器依次类推下去,找到后记录并缓存下来如www.google.com为<br><b>. -> .com -> google.com. -> www.google.com.</b>\n2. TCP连接\n三次握手，只要没收到确认消息就要重新发\n\t1. 主机向服务器发送一个建立连接的请求（您好，我想认识您）；\n\t2. 服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；\n\t3. 主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。\n3. 发送HTTP请求\n浏览器会分析这个url，并设置好请求报文发出。请求报文中包括请求行、请求头、空行、请求主体。https默认请求端口443， http默认80。\n常见的http请求如下\n``` htmlbars\nPOST / HTTP1.1\nHost:www.wrox.com\nUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type:application/x-www-form-urlencoded\nContent-Length:40\nConnection: Keep-Alive\n\nname=Professional%20Ajax&publisher=Wiley\n第一部分：请求行，第一行说明是post请求，以及http1.1版本。\n第二部分：请求头部，第二行至第六行。\n第三部分：空行，第七行的空行。\n第四部分：请求数据，第八行。\n4. 服务器处理请求并返回HTTP报文\n后端处理返回http报文如下\n```\n\n``` htmlbars\nHTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n<html>\n      <head></head>\n      <body>\n            <!--body goes here-->\n      </body>\n</html>\n第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）\n第二行和第三行为消息报头，\nDate:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8\n第三部分：空行，消息报头后面的空行是必须的\n第四部分：响应正文，服务器返回给客户端的文本信息。\n空行后面的html部分为响应正文。\n```\n5. 浏览器解析渲染页面\n+ 通过HTML解析器解析HTML文档，构建一个DOM Tree，同时通过CSS解析器解析HTML中存在的CSS，构建Style Rules，两者结合形成一个Attachment。\n+ 通过Attachment构造出一个呈现树（Render Tree）\n+ Render Tree构建完毕，进入到布局阶段（layout/reflow），将会为每个阶段分配一个应出现在屏幕上的确切坐标。\n+ 最后将全部的节点遍历绘制出来后，一个页面就展现出来了。\n遇到script会停下来执行，所以通常把script放在底部\n6. 连接结束\n\n##### 组件封装\n目的：为了重用，提高开发效率和代码质量\n注意：低耦合，单一职责，可复用性，可维护性\n常用操作：\n1. 分析布局\n2. 初步开发\n3. 化繁为简\n4. 组件抽象\n\n##### JS异步加载\n1. 动态生成script标签\n2. 添加h5的async defer属性，前者乱序不适合依赖性加载\n3. async 是“下载完就执行”， defer 是“渲染完再执行”\n\n##### css与js动画差异\n1. css性能好\n2. css代码逻辑相对简单\n3. js动画控制好\n4. js兼容性好\n5. js可实现的动画多\n6. js可以添加事件\n\n#####  负载均衡\n多台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用\n1. http重定向负载均衡：调度者根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器\n2. dns负载均衡：解析域名时，访问多个ip服务器中的一个（可监控性较弱）\n3. 反向代理负载均衡：访问统一的服务器，由服务器进行调度访问实际的某个服务器，对统一的服务器要求大，性能受到 服务器群的数量\n\n##### CDN\n内容分发网络，基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。\n\n#####  内存泄漏\n定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题\njs中可能出现的内存泄漏情况\n结果：变慢，崩溃，延迟大等\n原因：\n1. 全局变量\n2. dom清空时，还存在引用\n3. ie中使用闭包\n4. 定时器未清理\n5. 子元素存在引起的内存泄露\n\n避免策略：\n1. 减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；\n2. 注意程序逻辑，避免“死循环”之类的 ；\n3. 避免创建过多的对象  原则：不用了的东西要及时归还。 \n4. 减少层级过多的引用\n#####  babel原理\nES6、7代码输入 -> babylon进行解析 -> 得到AST（抽象语法树）-> plugin用babel-traverse对AST树进行遍历转译 ->得到新的AST树->用babel-generator通过AST树生成ES5代码、\n\n##### promise\n特性：Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止，也即是说，错误总会被下一个catch语句捕获\n\n##### js自定义事件\n三要素：\ndocument.createEvent()\nevent.initEvent()\nelement.dispatchEvent()\n``` javascript\ndemo:\n(en:自定义事件名称，fn:事件处理函数，addEvent:为DOM元素添加自定义事件，triggerEvent:触发自定义事件)\nwindow.onload = function(){\n    var demo = document.getElementById(\"demo\");\n    demo.addEvent(\"test\",function(){console.log(\"handler1\")});\n    demo.addEvent(\"test\",function(){console.log(\"handler2\")});\n    demo.onclick = function(){\n        this.triggerEvent(\"test\");\n    }\n}\nElement.prototype.addEvent = function(en,fn){\n    this.pools = this.pools || {};\n    if(en in this.pools){\n        this.pools[en].push(fn);\n    }else{\n        this.pools[en] = [];\n        this.pools[en].push(fn);\n    }\n}\nElement.prototype.triggerEvent  = function(en){\n    if(en in this.pools){\n        var fns = this.pools[en];\n        for(var i=0,il=fns.length;i<il;i++){\n            fns[i]();\n        }\n    }else{\n        return;\n    }\n}\n```\n\n#####  es6模块 commonjs  amd cmd\n1.  CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。\n2.  CommonJS是同步加载模块,在浏览器中会出现堵塞情况，所以不适用\n3.  AMD 异步，需要定义回调define方式\n4.  es6 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量\n5.  es6还可以导出类、方法，自动适用严格模式\n\n##### 前后端路由差别\n\n1.后端每次路由请求都是重新访问服务器\n2.前端路由实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。\n","slug":"前端开发最全面试题","published":1,"updated":"2018-09-30T10:31:13.879Z","_id":"cjmoq3q9s001eh4a1d4nfo3zl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前端问题记录\"><a href=\"#前端问题记录\" class=\"headerlink\" title=\"前端问题记录\"></a>前端问题记录</h3><ol>\n<li><a href=\"#html\">HTML相关</a></li>\n<li><a href=\"#css\">CSS相关</a></li>\n<li><a href=\"#javascript\">JAVASCRIPT相关</a></li>\n<li><a href=\"#dom\">DOM相关</a></li>\n<li><a href=\"#http\">HTTP相关</a></li>\n<li><a href=\"#vue\">VUE相关</a></li>\n<li><a href=\"#sort\">算法相关</a></li>\n<li><a href=\"#web\">网络安全相关</a></li>\n<li><a href=\"#webpack\">webpack相关</a></li>\n<li><a href=\"#other\">其他</a><h4 id=\"Html相关\"><a href=\"#Html相关\" class=\"headerlink\" title=\"Html相关\"></a>Html相关</h4><h5 id=\"1-html语义化\"><a href=\"#1-html语义化\" class=\"headerlink\" title=\"1 html语义化\"></a><div id=\"html\">1 html语义化</div></h5>意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。<br>注意：<br>1.尽可能少的使用无语义的标签div和span；<br>2.在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；<br>3.不要使用纯样式标签，如：b、font、u等，改用css设置。<br>4.需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；<br>5.使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；<br>6.表单域要用fieldset标签包起来，并用legend标签说明表单的用途；<br>7.每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</li>\n</ol>\n<p>新标签：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/h5%E6%96%B0%E5%85%83%E7%B4%A0.png\" alt=\"h5新元素\" title=\"\">\n                </div>\n                <div class=\"image-caption\">h5新元素</div>\n            </figure></p>\n<h5 id=\"2-meta-viewport相关\"><a href=\"#2-meta-viewport相关\" class=\"headerlink\" title=\"2 meta viewport相关\"></a>2 meta viewport相关</h5><figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>  H5标准声明，使用 HTML5 doctype，不区分大小写</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">”en”</span>&gt;</span> 标准的 lang 属性写法</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">’utf-8′</span>&gt;</span>    声明文档使用的字符编码</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span> <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge,chrome</span>=<span class=\"string\">1″/</span>&gt;</span>   优先使用 IE 最新版本和 Chrome</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”description”</span> <span class=\"attr\">content</span>=<span class=\"string\">”不超过150个字符”/</span>&gt;</span>       页面描述</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”keywords”</span> <span class=\"attr\">content</span>=<span class=\"string\">””/</span>&gt;</span>      页面关键词</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”author”</span> <span class=\"attr\">content</span>=<span class=\"string\">”name,</span> <span class=\"attr\">email</span>@<span class=\"attr\">gmail.com</span>”/&gt;</span>    网页作者</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”robots”</span> <span class=\"attr\">content</span>=<span class=\"string\">”index,follow”/</span>&gt;</span>      搜索引擎抓取</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”viewport”</span> <span class=\"attr\">content</span>=<span class=\"string\">”initial-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">maximum-scale</span>=<span class=\"string\">3,</span> <span class=\"attr\">minimum-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">user-scalable</span>=<span class=\"string\">no”</span>&gt;</span> 为移动设备添加 viewport</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-mobile-web-app-title”</span> <span class=\"attr\">content</span>=<span class=\"string\">”标题”</span>&gt;</span> iOS 设备 begin</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-mobile-web-app-capable”</span> <span class=\"attr\">content</span>=<span class=\"string\">”yes”/</span>&gt;</span>  添加到主屏后的标题（iOS 6 新增）</span></span><br><span class=\"line\"><span class=\"xml\">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-itunes-app”</span> <span class=\"attr\">content</span>=<span class=\"string\">”app-id</span>=<span class=\"string\">myAppStoreID,</span> <span class=\"attr\">affiliate-data</span>=<span class=\"string\">myAffiliateData,</span> <span class=\"attr\">app-argument</span>=<span class=\"string\">myURL”</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-mobile-web-app-status-bar-style”</span> <span class=\"attr\">content</span>=<span class=\"string\">”black”/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”format-detection”</span> <span class=\"attr\">content</span>=<span class=\"string\">”telphone</span>=<span class=\"string\">no,</span> <span class=\"attr\">email</span>=<span class=\"string\">no”/</span>&gt;</span>  设置苹果工具栏颜色</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”renderer”</span> <span class=\"attr\">content</span>=<span class=\"string\">”webkit”</span>&gt;</span>  启用360浏览器的极速模式(webkit)</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span> <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge”</span>&gt;</span>     避免IE使用兼容模式</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”Cache-Control”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no-siteapp”</span> /&gt;</span>    不让百度转码</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”HandheldFriendly”</span> <span class=\"attr\">content</span>=<span class=\"string\">”true”</span>&gt;</span>     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”MobileOptimized”</span> <span class=\"attr\">content</span>=<span class=\"string\">”320″</span>&gt;</span>   微软的老式浏览器</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”screen-orientation”</span> <span class=\"attr\">content</span>=<span class=\"string\">”portrait”</span>&gt;</span>   uc强制竖屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”x5-orientation”</span> <span class=\"attr\">content</span>=<span class=\"string\">”portrait”</span>&gt;</span>    QQ强制竖屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”full-screen”</span> <span class=\"attr\">content</span>=<span class=\"string\">”yes”</span>&gt;</span>              UC强制全屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”x5-fullscreen”</span> <span class=\"attr\">content</span>=<span class=\"string\">”true”</span>&gt;</span>       QQ强制全屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”browsermode”</span> <span class=\"attr\">content</span>=<span class=\"string\">”application”</span>&gt;</span>   UC应用模式</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”x5-page-mode”</span> <span class=\"attr\">content</span>=<span class=\"string\">”app”</span>&gt;</span>    QQ应用模式</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”msapplication-tap-highlight”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no”</span>&gt;</span>    windows phone 点击无高光</span></span><br><span class=\"line\"><span class=\"xml\">设置页面不缓存</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”pragma”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no-cache”</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”cache-control”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no-cache”</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”expires”</span> <span class=\"attr\">content</span>=<span class=\"string\">”0″</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-canvas-相关\"><a href=\"#3-canvas-相关\" class=\"headerlink\" title=\"3 canvas 相关\"></a>3 canvas 相关</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用前需要获得上下文环境，暂不支持<span class=\"number\">3</span>d</span><br><span class=\"line\">常用api:</span><br><span class=\"line\">\t<span class=\"number\">1.</span>fillRect(x,y,width,height)实心矩形</span><br><span class=\"line\">\t<span class=\"number\">2.</span>strokeRect(x,y,width,height)空心矩形</span><br><span class=\"line\">\t<span class=\"number\">3.</span>fillText(<span class=\"string\">\"Hello world\"</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>);实心文字</span><br><span class=\"line\">    <span class=\"number\">4.</span>strokeText(<span class=\"string\">\"Hello world\"</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>)空心文字</span><br><span class=\"line\">各种东西！！！</span><br></pre></td></tr></table></figure>\n<h5 id=\"新标签兼容低版本\"><a href=\"#新标签兼容低版本\" class=\"headerlink\" title=\"新标签兼容低版本\"></a>新标签兼容低版本</h5><ol>\n<li>ie9之前版本通过createElement创建html5新标签</li>\n<li>引入html5shiv.js<h4 id=\"CSS相关\"><a href=\"#CSS相关\" class=\"headerlink\" title=\"CSS相关\"></a><div id=\"css\">CSS相关</div></h4><h5 id=\"1-盒模型\"><a href=\"#1-盒模型\" class=\"headerlink\" title=\"1.盒模型\"></a>1.盒模型</h5>1.ie盒模型算上border、padding及自身（不算margin），标准的只算上自身窗体的大小<br>css设置方法如下<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 标准模型 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">box-sizing</span><span class=\"selector-pseudo\">:content-box</span>;</span><br><span class=\"line\"> <span class=\"comment\">/*IE模型*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">box-sizing</span><span class=\"selector-pseudo\">:border-box</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.margin、border、padding、content由外到里<br>3.几种获得宽高的方式</p>\n<ul>\n<li>dom.style.width/height<br>　　这种方式只能取到dom元素内联样式所设置的宽高，也就是说如果该节点的样式是在style标签中或外联的CSS文件中设置的话，通过这种方法是获取不到dom的宽高的。</li>\n<li>dom.currentStyle.width/height<br>　　这种方式获取的是在页面渲染完成后的结果，就是说不管是哪种方式设置的样式，都能获取到。但这种方式只有IE浏览器支持。</li>\n<li>window.getComputedStyle(dom).width/height<br>　　这种方式的原理和2是一样的，这个可以兼容更多的浏览器，通用性好一些。</li>\n<li>dom.getBoundingClientRect().width/height<br>　　这种方式是根据元素在视窗中的绝对位置来获取宽高的</li>\n<li>dom.offsetWidth/offsetHeight<br>　　这个就没什么好说的了，最常用的，也是兼容最好的。</li>\n</ul>\n<p>4.拓展 各种获得宽高的方式</p>\n<ul>\n<li>获取屏幕的高度和宽度（屏幕分辨率）：<br>window.screen.height/width</li>\n<li>获取屏幕工作区域的高度和宽度（去掉状态栏）：<br>window.screen.availHeight/availWidth</li>\n<li>网页全文的高度和宽度：<br>document.body.scrollHeight/Width</li>\n<li>滚动条卷上去的高度和向右卷的宽度：<br>document.body.scrollTop/scrollLeft</li>\n<li>网页可见区域的高度和宽度（不加边线）：<br>document.body.clientHeight/clientWidth</li>\n<li>网页可见区域的高度和宽度（加边线）：<br>document.body.offsetHeight/offsetWidth</li>\n</ul>\n<p>5.边距重叠解决方案(BFC)<br>BFC原理</p>\n<ul>\n<li>内部的box会在垂直方向，一个接一个的放置<br>每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）</li>\n<li>box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠</li>\n<li>bfc的区域不会与浮动区域的box重叠</li>\n<li>bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的</li>\n<li>计算bfc高度的时候，浮动元素也会参与计算<br>创建bfc</li>\n<li>float属性不为none（脱离文档流）</li>\n<li>position为absolute或fixed</li>\n<li>display为inline-block,table-cell,table-caption,flex,inine-flex</li>\n<li>overflow不为visible</li>\n<li>根元素<br>demo<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>上<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t这块margin-bottom:30px;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 给下面这个块添加一个父元素，在父元素上创建bfc --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>下<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t这块margin-top:50px;</span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"css-reset-和-normalize-css-有什么区别\"><a href=\"#css-reset-和-normalize-css-有什么区别\" class=\"headerlink\" title=\"css reset 和 normalize.css 有什么区别\"></a>css reset 和 normalize.css 有什么区别</h5><ul>\n<li>两者都是通过重置样式，保持浏览器样式的一致性</li>\n<li>前者几乎为所有标签添加了样式，后者保持了许多浏览器样式，保持尽可能的一致</li>\n<li>后者修复了常见的桌面端和移动端浏览器的bug：包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。</li>\n<li>前者中含有大段的继承链</li>\n<li>后者模块化，文档较前者来说丰富<h5 id=\"居中方法\"><a href=\"#居中方法\" class=\"headerlink\" title=\"居中方法\"></a>居中方法</h5>水平方向上<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">针对<span class=\"selector-tag\">inline</span>, 内联块<span class=\"selector-tag\">inline-block</span>, 内联表<span class=\"selector-tag\">inline-table</span>, <span class=\"selector-tag\">inline-flex</span>元素及<span class=\"selector-tag\">img</span>,<span class=\"selector-tag\">span</span>,<span class=\"selector-tag\">button</span>等元素</span><br><span class=\"line\"><span class=\"selector-class\">.text_div</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不定宽块状元素居中</span><br><span class=\"line\"><span class=\"selector-class\">.text_div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过给父元素设置 <span class=\"selector-tag\">float</span>，然后给父元素设置 <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:relative</span> 和 <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%，子元素设置 <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:relative</span> 和 <span class=\"selector-tag\">left</span>: <span class=\"selector-tag\">-50</span>% 来实现水平居中。</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap-center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:-<span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>垂直居中<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行内联(<span class=\"selector-tag\">inline-</span>)元素垂直居中 </span><br><span class=\"line\">通过设置内联元素的高度(<span class=\"selector-tag\">height</span>)和行高(<span class=\"selector-tag\">line-height</span>)相等，从而使元素垂直居中。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.text_div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用表布局</span><br><span class=\"line\"><span class=\"selector-class\">.father</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.children</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">flex</span>布局</span><br><span class=\"line\"><span class=\"selector-class\">.center-flex</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    flex-direction: column;//上下排列</span><br><span class=\"line\">    <span class=\"selector-tag\">justify-content</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绝对布局方式</span><br><span class=\"line\">已知高度</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">未知高度</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>垂直水平居中根据上方结合<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">flex</span>方式</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">grid</span>方式</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"css优先级确定\"><a href=\"#css优先级确定\" class=\"headerlink\" title=\"css优先级确定\"></a>css优先级确定</h5><ul>\n<li>每个选择器都有权值，权值越大越优先</li>\n<li>继承的样式优先级低于自身指定样式</li>\n<li>！important优先级最高 js也无法修改</li>\n<li>权值相同时，靠近元素的样式优先级高  顺序为内联样式表（标签内部）&gt; 内部样式表（当前文件中）&gt; 外部样式表（外部文件中）<h5 id=\"bfc内容见盒模型\"><a href=\"#bfc内容见盒模型\" class=\"headerlink\" title=\"bfc内容见盒模型\"></a>bfc内容见盒模型</h5><h5 id=\"如何清除浮动\"><a href=\"#如何清除浮动\" class=\"headerlink\" title=\"如何清除浮动\"></a>如何清除浮动</h5>不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）</li>\n<li>clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}</li>\n<li>给浮动元素父级设置高度</li>\n<li>父级同时浮动（需要给父级同级元素添加浮动）</li>\n<li>父级设置成inline-block，其margin: 0 auto居中方式失效</li>\n<li>利用br标签的clear属性</li>\n<li>给父级添加overflow:hidden 清除浮动方法</li>\n<li>万能清除法 after伪类 清浮动（现在主流方法，推荐使用）<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.float_div</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">\t<span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.float_div</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">zoom</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"自适应布局\"><a href=\"#自适应布局\" class=\"headerlink\" title=\"自适应布局\"></a>自适应布局</h5><p>思路：</p>\n<ol>\n<li>左侧浮动或者绝对定位，然后右侧margin撑开</li>\n<li>使用div包含，然后靠负margin形成bfc</li>\n<li>使用flex<h5 id=\"画三角形\"><a href=\"#画三角形\" class=\"headerlink\" title=\"画三角形\"></a>画三角形</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid blue;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"link-import导入css\"><a href=\"#link-import导入css\" class=\"headerlink\" title=\"link @import导入css\"></a>link @import导入css</h5><ol>\n<li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li>\n<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>\n<li>link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li>\n<li>ink支持使用Javascript控制DOM去改变样式；而@import不支持。<h5 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/animation.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h5 id=\"长宽比方案\"><a href=\"#长宽比方案\" class=\"headerlink\" title=\"长宽比方案\"></a>长宽比方案</h5></li>\n<li>使用padding方式结合calc实现</li>\n<li>长宽一项设置百分比另一项aspect-ratio实现（需借助插件实现）<h5 id=\"display相关\"><a href=\"#display相关\" class=\"headerlink\" title=\"display相关\"></a>display相关</h5></li>\n<li>block:div等容器类型</li>\n<li>inline:img span等行内类型</li>\n<li>table系列：将样式变成table类型</li>\n<li>flex:重点把握，非常强大</li>\n<li>grid:同上</li>\n<li>inline-block:可设置宽度，两者间有一点间隙</li>\n<li>inherit:继承父级<h4 id=\"JavaScript相关\"><a href=\"#JavaScript相关\" class=\"headerlink\" title=\"JavaScript相关\"></a><div id=\"javascript\">JavaScript相关</div></h4><h5 id=\"1-“1”-“2”-“3”-map-parseInt\"><a href=\"#1-“1”-“2”-“3”-map-parseInt\" class=\"headerlink\" title=\"1 [“1”, “2”, “3”].map(parseInt)\"></a>1 [“1”, “2”, “3”].map(parseInt)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的<span class=\"keyword\">this</span>值</span><br><span class=\"line\"></span><br><span class=\"line\">其中回调函数接受三个参数 currentValue, index, arrary;</span><br><span class=\"line\"></span><br><span class=\"line\">而题目中, map只传入了回调函数--<span class=\"built_in\">parseInt</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">其次, <span class=\"built_in\">parseInt</span> 只接受两个两个参数 string, radix(基数).  </span><br><span class=\"line\">本题理解来说也就是key与 index </span><br><span class=\"line\"></span><br><span class=\"line\">所以本题即问</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'1'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'2'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'3'</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(string, radix)</span><br><span class=\"line\">string\t必需。要被解析的字符串。</span><br><span class=\"line\">radix 可选。表示要解析的数字的基数。该值介于 <span class=\"number\">2</span> ~ <span class=\"number\">36</span> 之间。</span><br><span class=\"line\">如果省略该参数或其值为 <span class=\"number\">0</span>，则数字将以 <span class=\"number\">10</span> 为基础来解析。如果它以 “<span class=\"number\">0</span>x” 或 “<span class=\"number\">0</span>X” 开头，将以 <span class=\"number\">16</span> 为基数。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"2-3-2-1-reduce-Math-pow-reduce-Math-pow\"><a href=\"#2-3-2-1-reduce-Math-pow-reduce-Math-pow\" class=\"headerlink\" title=\"2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]\"></a>2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[, initialValue])</span><br><span class=\"line\">reduce接受两个参数, 一个回调, 一个初始值.</span><br><span class=\"line\">回调函数接受四个参数 previousValue, currentValue, currentIndex, array</span><br><span class=\"line\">需要注意的是 If the array is empty and no initialValue was provided, <span class=\"built_in\">TypeError</span> would be thrown.</span><br><span class=\"line\">所以第二个表达式会报异常. 第一个表达式等价于 <span class=\"built_in\">Math</span>.pow(<span class=\"number\">3</span>, <span class=\"number\">2</span>) =&gt; <span class=\"number\">9</span>; <span class=\"built_in\">Math</span>.pow(<span class=\"number\">9</span>, <span class=\"number\">1</span>) =&gt;<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">ary[<span class=\"number\">10</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">ary.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x === <span class=\"literal\">undefined</span>;&#125;);</span><br><span class=\"line\">我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> ary; =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">in</span> ary; =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"keyword\">in</span> ary; =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">也就是说 从 <span class=\"number\">3</span> - <span class=\"number\">9</span> 都是没有初始化的bug !, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些坑的.</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-typeof-null-null-instanceof-Object\"><a href=\"#4-typeof-null-null-instanceof-Object\" class=\"headerlink\" title=\"4 [typeof null, null instanceof Object]\"></a>4 [typeof null, null instanceof Object]</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> 返回一个表示类型的字符串.</span><br><span class=\"line\"><span class=\"keyword\">instanceof</span> 运算符用来检测 <span class=\"keyword\">constructor</span>.prototype 是否存在于参数 object 的原型链上.</span><br><span class=\"line\">type         result</span><br><span class=\"line\">Undefined   \"undefined\"</span><br><span class=\"line\">Null        \"object\"</span><br><span class=\"line\">Boolean     \"boolean\"</span><br><span class=\"line\">Number      \"number\"</span><br><span class=\"line\">String      \"string\"</span><br><span class=\"line\">Symbol      \"symbol\"</span><br><span class=\"line\">Host object Implementation-dependent</span><br><span class=\"line\">Function    \"function\"</span><br><span class=\"line\">Object      \"object\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-js数据类型\"><a href=\"#5-js数据类型\" class=\"headerlink\" title=\"5 js数据类型\"></a>5 js数据类型</h5><p>1.number; </p>\n<p>2.string;</p>\n<p>3.boolean;</p>\n<p>4.undefined;</p>\n<p>5.null;</p>\n<p>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。</p>\n<p>7.Object.（包括Object，Array，Function）</p>\n<h5 id=\"6-promise-用法\"><a href=\"#6-promise-用法\" class=\"headerlink\" title=\"6 promise 用法\"></a>6 promise 用法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">使用</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//等价于：</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//success</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//failure</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-es6-promise-ajax\"><a href=\"#7-es6-promise-ajax\" class=\"headerlink\" title=\"7 es6 promise ajax\"></a>7 es6 promise ajax</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"keyword\">const</span> myHttpClient = <span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">\"GET\"</span>, url);</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.responseType = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">使用</span><br><span class=\"line\">myHttpClient(<span class=\"string\">'https://www.baidu.com'</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"8闭包\"><a href=\"#8闭包\" class=\"headerlink\" title=\"8闭包\"></a>8闭包</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        alert(x + y + (++tmp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo(<span class=\"number\">2</span>); <span class=\"comment\">// bar 现在是一个闭包</span></span><br><span class=\"line\">bar(<span class=\"number\">10</span>);</span><br><span class=\"line\">结果是<span class=\"number\">16</span></span><br><span class=\"line\">es6通常用<span class=\"keyword\">let</span> <span class=\"keyword\">const</span>块级作用域代替，</span><br><span class=\"line\">闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</span><br></pre></td></tr></table></figure>\n<h5 id=\"9-什么是立即执行函数？使用立即执行函数的目的是什么？\"><a href=\"#9-什么是立即执行函数？使用立即执行函数的目的是什么？\" class=\"headerlink\" title=\"9 什么是立即执行函数？使用立即执行函数的目的是什么？\"></a>9 什么是立即执行函数？使用立即执行函数的目的是什么？</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见两种方式</span><br><span class=\"line\"><span class=\"number\">1.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)()</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;)(<span class=\"number\">12345</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;())</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;(<span class=\"number\">12345</span>))</span><br><span class=\"line\">作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span><br><span class=\"line\">（<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;...&#125;(<span class=\"built_in\">window</span>)）</span><br></pre></td></tr></table></figure>\n<h5 id=\"10-async-await-语法\"><a href=\"#10-async-await-语法\" class=\"headerlink\" title=\"10 async/await 语法\"></a>10 async/await 语法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：异步代码的新方式</span><br><span class=\"line\">promise示例</span><br><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getJSON()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.needsAnotherRequest) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> makeAnotherRequest(data)</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">moreData</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(moreData)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> moreData</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span>/<span class=\"keyword\">await</span>示例</span><br><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> getJSON()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.needsAnotherRequest) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> moreData = <span class=\"keyword\">await</span> makeAnotherRequest(data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(moreData)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> moreData</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">函数前面多了一个aync关键字。<span class=\"keyword\">await</span>关键字只能用在aync定义的函数内。<span class=\"keyword\">async</span>函数会隐式地返回一个promise，该promise的reosolve值就是函数<span class=\"keyword\">return</span>的值。(示例中reosolve值就是字符串<span class=\"string\">\"done\"</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"11-深浅拷贝\"><a href=\"#11-深浅拷贝\" class=\"headerlink\" title=\"11 深浅拷贝\"></a>11 深浅拷贝</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  aa: <span class=\"number\">1</span>,</span><br><span class=\"line\">  bb: <span class=\"number\">2</span>,</span><br><span class=\"line\">  cc: <span class=\"number\">3</span>,</span><br><span class=\"line\">  dd: &#123;</span><br><span class=\"line\">    ee: <span class=\"number\">5</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ff: &#123;</span><br><span class=\"line\">    gg: <span class=\"number\">6</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));<span class=\"comment\">//深复制包含子对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;...a&#125;;<span class=\"comment\">//深拷贝单不包含子对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a;<span class=\"comment\">//浅拷贝</span></span><br><span class=\"line\">b.bb = <span class=\"number\">22</span>;</span><br><span class=\"line\">c.cc = <span class=\"number\">33</span>;</span><br><span class=\"line\">c.dd.ee = <span class=\"number\">55</span>;</span><br><span class=\"line\">d.ff.gg = <span class=\"number\">66</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);</span><br></pre></td></tr></table></figure>\n<h5 id=\"12数组去重\"><a href=\"#12数组去重\" class=\"headerlink\" title=\"12数组去重\"></a>12数组去重</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">思路<span class=\"number\">1</span>：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中</span><br><span class=\"line\">思路<span class=\"number\">2</span>：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。</span><br><span class=\"line\">思路<span class=\"number\">3</span>：利用对象属性存在的特性，如果没有该属性则存入新数组。</span><br><span class=\"line\">思路<span class=\"number\">4</span>（最常用）：使用es6 set</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr= [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...new <span class=\"built_in\">Set</span>(arr)]);</span><br></pre></td></tr></table></figure>\n<h5 id=\"13正则实现trim-功能\"><a href=\"#13正则实现trim-功能\" class=\"headerlink\" title=\"13正则实现trim()功能\"></a>13正则实现trim()功能</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTrim</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(reg, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myTrim(<span class=\"string\">'    asdf    '</span>));</span><br></pre></td></tr></table></figure>\n<h5 id=\"14-JS原型\"><a href=\"#14-JS原型\" class=\"headerlink\" title=\"14 JS原型\"></a>14 JS原型</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性</span><br><span class=\"line\"><span class=\"number\">2.</span>个人粗略理解与python的类方法静态方法实例方法差不多</span><br></pre></td></tr></table></figure>\n<p>#####15 es6 class<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象，java中类</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"16-JS-如何实现继承\"><a href=\"#16-JS-如何实现继承\" class=\"headerlink\" title=\"16 JS 如何实现继承\"></a>16 JS 如何实现继承</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>使用原型继承（既继承了父类的模板，又继承了父类的原型对象。优点是继承了父类的模板，又继承了父类的原型对象，缺点就是父类实例传参，不是子类实例化传参，不符合常规语言的写法）</span><br><span class=\"line\"><span class=\"number\">2.</span>使用call的方式（继承了父类的模板，不继承了父类的原型对象。优点是方便了子类实例传参，缺点就是不继承了父类的原型对象）</span><br></pre></td></tr></table></figure>\n<h5 id=\"17-手写jquery插件\"><a href=\"#17-手写jquery插件\" class=\"headerlink\" title=\"17 手写jquery插件\"></a>17 手写jquery插件</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">\t$.fn.myPlugins = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//参数赋值</span></span><br><span class=\"line\">\t  options = $.extend(defaults, options);<span class=\"comment\">//对象合并</span></span><br><span class=\"line\">\t  <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t      <span class=\"comment\">//执行代码逻辑</span></span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)(jQuery);</span><br><span class=\"line\"></span><br><span class=\"line\">$(selector).myPlugins(&#123;参数&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"18-数组合并去重排序\"><a href=\"#18-数组合并去重排序\" class=\"headerlink\" title=\"18 数组合并去重排序\"></a>18 数组合并去重排序</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">25</span>, <span class=\"number\">2</span>, <span class=\"number\">26</span>, <span class=\"number\">1234</span>, <span class=\"number\">6</span>, <span class=\"number\">213</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">2134</span>, <span class=\"number\">6</span>, <span class=\"number\">31</span>, <span class=\"number\">623</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [...new <span class=\"built_in\">Set</span>([...arr1, ...arr2])].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"19-call-apply\"><a href=\"#19-call-apply\" class=\"headerlink\" title=\"19 call apply\"></a>19 call apply</h5><p>作用：在函数调用时改变函数的执行上下文也就是this的值<br>区别：call采用不定长的参数列表，而apply使用一个参数数组。<br>性能优化图<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg\" alt=\"性能优化\" title=\"\">\n                </div>\n                <div class=\"image-caption\">性能优化</div>\n            </figure></p>\n<h5 id=\"20-for-中setTimeOut\"><a href=\"#20-for-中setTimeOut\" class=\"headerlink\" title=\"20 for 中setTimeOut\"></a>20 for 中setTimeOut</h5><p>要为循环题创建不同的循环副本</p>\n<h5 id=\"21-sort函数\"><a href=\"#21-sort函数\" class=\"headerlink\" title=\"21 sort函数\"></a>21 sort函数</h5><p>V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。</p>\n<h5 id=\"22-navigator\"><a href=\"#22-navigator\" class=\"headerlink\" title=\"22 navigator\"></a>22 navigator</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/Navigator.png\" alt=\"Navigator\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Navigator</div>\n            </figure>\n<h5 id=\"23-jquery绑定方式\"><a href=\"#23-jquery绑定方式\" class=\"headerlink\" title=\"23 jquery绑定方式\"></a>23 jquery绑定方式</h5><ol>\n<li>click后者覆盖</li>\n<li>bind后者覆盖</li>\n<li>on(jquery&gt;=1.7)</li>\n<li>live</li>\n<li>delegate<h5 id=\"24-事件流向\"><a href=\"#24-事件流向\" class=\"headerlink\" title=\"24 事件流向\"></a>24 事件流向</h5></li>\n<li>冒泡：子节点一层层冒泡到根节点</li>\n<li>捕获顺序与冒泡相反</li>\n<li>addEventListener最后个参数true代表捕获反之代表冒泡</li>\n<li>阻止冒泡不停止父节点捕获<h5 id=\"25原生操作class\"><a href=\"#25原生操作class\" class=\"headerlink\" title=\"25原生操作class\"></a>25原生操作class</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断有无</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">ele, cls</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ele.className.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\\\\s|^)\"</span> + cls + <span class=\"string\">\"(\\\\s|$)\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span>(<span class=\"params\">ele, cls</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasClass(ele, cls)) ele.className += <span class=\"string\">\" \"</span> + cls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeClass</span>(<span class=\"params\">ele, cls</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasClass(ele, cls)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\\\\s|^)\"</span> + cls + <span class=\"string\">\"(\\\\s|$)\"</span>);</span><br><span class=\"line\">\t\tele.className = ele.className.replace(reg, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">html5中加入classList </span><br><span class=\"line\">一系列操作</span><br><span class=\"line\">兼容至IE10</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"DOM相关\"><a href=\"#DOM相关\" class=\"headerlink\" title=\"DOM相关\"></a><div id=\"dom\">DOM相关</div></h4><h5 id=\"dom事件模型\"><a href=\"#dom事件模型\" class=\"headerlink\" title=\"dom事件模型\"></a>dom事件模型</h5><p>DOM之事件模型分脚本模型、内联模型(同类一个，后者覆盖)、动态绑定(同类多个)<br>demo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;!--行内绑定：脚本模型--&gt;</span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">\"javascrpt:alert('Hello')\"</span>&gt;Hello1&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--内联模型--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onclick=\"showHello()\"&gt;Hello2&lt;/</span>button&gt;</span><br><span class=\"line\">&lt;!--动态绑定--&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">\"btn3\"</span>&gt;Hello3&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"comment\">/*DOM0：同一个元素，同类事件只能添加一个，如果添加多个，</span></span><br><span class=\"line\"><span class=\"comment\">* 后面添加的会覆盖之前添加的*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shoeHello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn3\"</span>);</span><br><span class=\"line\">btn3.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*DOM2:可以给同一个元素添加多个同类事件*/</span></span><br><span class=\"line\">btn3.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"hello1\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">btn3.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"hello2\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (btn3.attachEvent)&#123;</span><br><span class=\"line\"><span class=\"comment\">/*IE*/</span></span><br><span class=\"line\">btn3.attachEvent(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"IE Hello1\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/*W3C*/</span></span><br><span class=\"line\">btn3.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"W3C Hello\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>冒泡解释：当点击一个元素触发事件时. 事件会先从元素的最外层父元素一层一层进入到触发的元素, 然后在从触发元素一层一层返回到最外层父元素, 从最外层一层一层进入的阶段叫事件捕获阶段, 从最里层一层一层往外的阶段叫事件冒泡,</p>\n<h5 id=\"移动端触摸事件\"><a href=\"#移动端触摸事件\" class=\"headerlink\" title=\"移动端触摸事件\"></a>移动端触摸事件</h5><p>①touchstart：当手指触碰到屏幕的时候触发<br>②touchmove：当手指在屏幕上滑动的时候触发<br>③touchend：当手指离开屏幕的时候时候触发<br>④touchcancel事件：当系统停止跟踪触摸的时候触发(这个事件很少会用，一般不做深入研究)。 电话接入或者弹出信息等其他事件切入<br>event： </p>\n<ol>\n<li>touches：表示当前跟踪的触摸操作的touch对象的数组。 </li>\n<li>targetTouches：特定于事件目标的Touch对象的数组。 </li>\n<li>changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。 </li>\n</ol>\n<p>每个touch对象包含的属性 </p>\n<ol>\n<li>clientX：触摸目标在视口中的x坐标。 </li>\n<li>clientY：触摸目标在视口中的y坐标。 </li>\n<li>identifier：标识触摸的唯一ID。 </li>\n<li>pageX：触摸目标在页面中的x坐标。 </li>\n<li>pageY：触摸目标在页面中的y坐标。 </li>\n<li>screenX：触摸目标在屏幕中的x坐标。 </li>\n<li>screenY：触摸目标在屏幕中的y坐标。 </li>\n<li>target：触目的DOM节点目标。 </li>\n</ol>\n<h5 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h5><p>参考定义：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件<br>好处：给重复的节点添加相同操作，减少dom交互，提高性能<br>实现思路：给父组件添加事件，通过事件冒泡，排查元素是否为指定元素，并进行系列操作</p>\n<h4 id=\"HTTP相关\"><a href=\"#HTTP相关\" class=\"headerlink\" title=\"HTTP相关\"></a><div id=\"http\">HTTP相关</div></h4><h5 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h5><p><b>2开头 （请求成功）表示成功处理了请求的状态代码。</b></p>\n<p>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201   （已创建）  请求成功并且服务器创建了新的资源。<br>202   （已接受）  服务器已接受请求，但尚未处理。<br>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。<br>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br>206   （部分内容）  服务器成功处理了部分 GET 请求。</p>\n<p><b>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</b></p>\n<p>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>\n<p><b>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</b></p>\n<p>400   （错误请求） 服务器不理解请求的语法。<br>401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403   （禁止） 服务器拒绝请求。<br>404   （未找到） 服务器找不到请求的网页。<br>405   （方法禁用） 禁用请求中指定的方法。<br>406   （不接受） 无法使用请求的内容特性响应请求的网页。<br>407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408   （请求超时）  服务器等候请求时发生超时。<br>409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。<br>411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br>412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br>415   （不支持的媒体类型） 请求的格式不受请求页面的支持。<br>416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p>\n<p><b>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</b></p>\n<p>500   （服务器内部错误）  服务器遇到错误，无法完成请求。<br>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><ol>\n<li>Expires在http1.0中使用，与服务器时间有误差，在1.1中由Cache-control替代<br><meta http-equiv=\"Cache-Control\" content=\"max-age=7200\"><meta http-equiv=\"Expires\" content=\"Mon, 20 Jul 2009 23:00:00 GMT\"></li>\n<li>cdn</li>\n</ol>\n<h5 id=\"Cache-Control-和-Etag-的区别\"><a href=\"#Cache-Control-和-Etag-的区别\" class=\"headerlink\" title=\"Cache-Control 和 Etag 的区别\"></a>Cache-Control 和 Etag 的区别</h5><p>如下图<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/%E5%8C%BA%E5%88%AB%E5%9B%BE.png\" alt=\"区别图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">区别图</div>\n            </figure></p>\n<h5 id=\"Cookie-sessionStorage-localStorage\"><a href=\"#Cookie-sessionStorage-localStorage\" class=\"headerlink\" title=\"Cookie sessionStorage  localStorage\"></a>Cookie sessionStorage  localStorage</h5><p>共同点：都是保存在浏览器端，且同源的。<br>区别：cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据不能超过4k(适合保存小数据)。<br>sessionStorage和localStorage容量较大，数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效。localStorage：始终有效，窗口或浏览器关闭也一直保存，需手动清楚；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同。<br>sessionStorage不在不同的浏览器窗口中共享；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</p>\n<p>应用场景：localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage ：敏感账号一次性登录； cookies与服务器交互。</p>\n<h5 id=\"GET-POST区别\"><a href=\"#GET-POST区别\" class=\"headerlink\" title=\"GET POST区别\"></a>GET POST区别</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/get_post.png\" alt=\"get_post\" title=\"\">\n                </div>\n                <div class=\"image-caption\">get_post</div>\n            </figure>\n<h5 id=\"请求行，请求头，请求体详解\"><a href=\"#请求行，请求头，请求体详解\" class=\"headerlink\" title=\"请求行，请求头，请求体详解\"></a>请求行，请求头，请求体详解</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/http%E8%AF%B7%E6%B1%82%E4%B8%80%E4%BD%93.jpg\" alt=\"如图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">如图</div>\n            </figure>\n<p>1,2,3请求行，4请求体，5请求体</p>\n<h5 id=\"跨域、JSONP-、CORS、postMessage\"><a href=\"#跨域、JSONP-、CORS、postMessage\" class=\"headerlink\" title=\"跨域、JSONP 、CORS、postMessage\"></a>跨域、JSONP 、CORS、postMessage</h5><p>跨域概念解释：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：我们认为若协议 + 域名 + 端口号均相同，那么就是同域。<br>如下表<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F%E6%83%85%E5%86%B5%E6%A0%87%E8%AF%86.png\" alt=\"图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">图</div>\n            </figure></p>\n<p>jsoup实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 传参并指定回调执行函数为onBack</span></span><br><span class=\"line\">    script.src = <span class=\"string\">'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 回调执行函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onBack</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">JSON</span>.stringify(res));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">jquery</span></span><br><span class=\"line\"><span class=\"regexp\">$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    url: 'http:/</span><span class=\"regexp\">/www.domain2.com:8080/</span>login<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    type: '</span>get<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    dataType: '</span>jsonp<span class=\"string\">',  // 请求方式为jsonp</span></span><br><span class=\"line\"><span class=\"string\">    jsonpCallback: \"onBack\",    // 自定义回调函数名</span></span><br><span class=\"line\"><span class=\"string\">    data: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">vue</span></span><br><span class=\"line\"><span class=\"string\">this.$http.jsonp('</span>http:<span class=\"comment\">//www.domain2.com:8080/login', &#123;</span></span><br><span class=\"line\">    params: &#123;&#125;,</span><br><span class=\"line\">    jsonp: <span class=\"string\">'onBack'</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res); </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">配合的后端node实现,其他服务器语言也可以</span><br><span class=\"line\"><span class=\"keyword\">const</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer();</span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = qs.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = params.callback;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// jsonp返回设置</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/javascript'</span> &#125;);</span><br><span class=\"line\">    res.write(fn + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(params) + <span class=\"string\">')'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">jsoup缺点只能实现get请求</span><br></pre></td></tr></table></figure></p>\n<p>CORS：跨源资源共享 Cross-Origin Resource Sharing(CORS)，通常服务器设置，若带cookie请求，则前后端都需要设置<br>后端常见设置<br>response.setHeader(“Access-Control-Allow-Origin”, “<a href=\"http://www.domain1.com&quot;)\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com&quot;)</a>;  // 若有端口需写全（协议+域名+端口），允许那些外源请求<br>response.setHeader(“Access-Control-Allow-Credentials”, “true”); //是否需要验证</p>\n<p>前端示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class=\"line\"><span class=\"comment\">// 前端设置是否带cookie</span></span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'http://www.domain2.com:8080/login'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">'user=admin'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jquery</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   xhrFields: &#123;</span><br><span class=\"line\">       withCredentials: <span class=\"literal\">true</span>    <span class=\"comment\">// 前端设置是否带cookie</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   crossDomain: <span class=\"literal\">true</span>,   <span class=\"comment\">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postMessage(data,origin)方法接受两个参数</span><br><span class=\"line\">demo</span><br><span class=\"line\"></span><br><span class=\"line\">a.html</span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.domain2.com/b.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span></span><br><span class=\"line\">&lt;script&gt;       </span><br><span class=\"line\">    <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">    iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">            name: <span class=\"string\">'aym'</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 向domain2传送跨域数据</span></span><br><span class=\"line\">        iframe.contentWindow.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), <span class=\"string\">'http://www.domain2.com'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 接受domain2返回数据</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'data from domain2 ---&gt; '</span> + e.data);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">b.html  与a.html不同源</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 接收domain1的数据</span></span><br><span class=\"line\"><span class=\"regexp\">    window.addEventListener('message', function(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        alert('data from domain1 ---&gt; ' + e.data);</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">        var data = JSON.parse(e.data);</span></span><br><span class=\"line\"><span class=\"regexp\">        if (data) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            data.number = 16;</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">            /</span><span class=\"regexp\">/ 处理后再发回domain1</span></span><br><span class=\"line\"><span class=\"regexp\">            window.parent.postMessage(JSON.stringify(data), 'http:/</span><span class=\"regexp\">/www.domain1.com');</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;, false);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"osi模型\"><a href=\"#osi模型\" class=\"headerlink\" title=\"osi模型\"></a>osi模型</h5><p>七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br>tcp ucp属于传输层；http属于应用层</p>\n<h5 id=\"http2-0-http1\"><a href=\"#http2-0-http1\" class=\"headerlink\" title=\"http2.0 http1\"></a>http2.0 http1</h5><ol>\n<li>HTTP2.0的基本单位为二进制帧</li>\n<li>HTTP2.0中帧具有优先级</li>\n<li>HTTP2.0的多路复用（ 1次连接）</li>\n<li>HTTP2.0压缩消息头</li>\n<li>HTTP2.0服务端推送</li>\n<li>HTTP2.0只适用于HTTPS的场景<h4 id=\"Vue相关\"><a href=\"#Vue相关\" class=\"headerlink\" title=\"Vue相关\"></a><div id=\"vue\">Vue相关</div></h4></li>\n</ol>\n<h5 id=\"生命周期顺序\"><a href=\"#生命周期顺序\" class=\"headerlink\" title=\"生命周期顺序\"></a>生命周期顺序</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"生命周期\" title=\"\">\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure>\n<h5 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h5><p>1.父传子用props,父用子用ref 子调父用$emit,无关系用Bus</p>\n<h5 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h5><p>组件通信库，可以避免子组件无法改变props的弊端等<br>mutations 同步操作， 用于改变状态 官方不推荐异步<br>action 执行多个mutaions，官方推荐异步操作<br>mapState、mapGetters、mapActions使用示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-dialog :visible.sync=<span class=\"string\">\"show\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  computed:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这里的三点叫做 : 扩展运算符</span></span><br><span class=\"line\">    ...mapState(&#123;</span><br><span class=\"line\">      show:<span class=\"function\"><span class=\"params\">state</span>=&gt;</span>state.dialog.show</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">后两者类似</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"VueRouter\"><a href=\"#VueRouter\" class=\"headerlink\" title=\"VueRouter\"></a>VueRouter</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"keyword\">var</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path:<span class=\"string\">\"/one\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        component:导入的组件<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path:<span class=\"string\">\"/two\"</span>,</span><br><span class=\"line\">        component:导入的组件<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 定义路由组件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定义路由</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box\"</span>,</span><br><span class=\"line\">    router</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> 访问设定的路由后 会将&lt;router-view&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span>替换成相应的模版</span></span><br><span class=\"line\"> html访问方式 &lt;router-link to=\"/one\"&gt;One&lt;/router-link&gt;(类似a标签)</span><br><span class=\"line\"> js访问方式 this.$router.push('/one'); </span><br><span class=\"line\"> replace方式 替换当前页面</span><br><span class=\"line\"> 携带的参数 可以通过this.$route.query.xxxx来获取</span><br><span class=\"line\">``` </span><br><span class=\"line\">##### Vue双向绑定</span><br><span class=\"line\">原理：利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。</span><br><span class=\"line\">缺点：双向数据流是自动管理状态的, 但是在实际应用中会有很多不得不手动处理状态变化的逻辑, 使得程序复杂度上升, 难以调试。</span><br><span class=\"line\">##### computed  watch methods</span><br><span class=\"line\">用法：</span><br><span class=\"line\">区别：</span><br><span class=\"line\">1. 前两者自动追踪数据，执行相关函数，最后一个手动调用；</span><br><span class=\"line\">2. computed是计算属性，用法与data一致</span><br><span class=\"line\">3. watch像事件监听，对象发生变化时，执行相关操作</span><br><span class=\"line\">4. methods与js中执行方法类似</span><br><span class=\"line\">5. computed通常只有get属性</span><br><span class=\"line\">6. 数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择</span><br><span class=\"line\">7. watch的对象必须事先声明</span><br><span class=\"line\">#### &lt;div id=\"sort\"&gt;算法相关&lt;/div&gt;</span><br><span class=\"line\">##### 各种排序实现</span><br><span class=\"line\">相关数据</span><br><span class=\"line\">![表格](http://pd4ar0u4q.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AD%89%E7%AD%89.png)</span><br><span class=\"line\">```javascript</span><br><span class=\"line\">// 冒泡排序: 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</span><br><span class=\"line\">冒泡demo:</span><br><span class=\"line\">function bubbleSort(arr) &#123;</span><br><span class=\"line\">    let len = arr.length;</span><br><span class=\"line\">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;        //相邻元素两两对比</span><br><span class=\"line\">                [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1) 首先，在数组中选择一个中间项作为主元</span><br><span class=\"line\">// 2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到</span><br><span class=\"line\">// 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作</span><br><span class=\"line\">// 3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</span><br><span class=\"line\">快排demo:</span><br><span class=\"line\">function quickSort(arr, left, right) &#123;</span><br><span class=\"line\">    let len = arr.length;</span><br><span class=\"line\">    let partitionIndex;</span><br><span class=\"line\">    left = typeof left !== 'number' ? 0 : left;</span><br><span class=\"line\">    right = typeof right !== 'number' ? len - 1 : right;</span><br><span class=\"line\">    if (left &lt; right) &#123;</span><br><span class=\"line\">        partitionIndex = partition(arr, left, right);</span><br><span class=\"line\">        quickSort(arr, left, partitionIndex - 1);</span><br><span class=\"line\">        quickSort(arr, partitionIndex + 1, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function partition(arr, left, right) &#123;     //分区操作</span><br><span class=\"line\">    let pivot = left;                      //设定基准值（pivot）</span><br><span class=\"line\">    let index = pivot + 1;</span><br><span class=\"line\">    for (let i = index; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [arr[pivot], arr[index - 1]] = [arr[index - 1], arr[pivot]];</span><br><span class=\"line\">    return index - 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 选择排序：大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</span><br><span class=\"line\">选择demo:</span><br><span class=\"line\">function selectionSort(arr) &#123;</span><br><span class=\"line\">\tlet len = arr.length;</span><br><span class=\"line\">\tlet minIndex;</span><br><span class=\"line\">\tfor (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class=\"line\">\t\tminIndex = i;</span><br><span class=\"line\">\t\tfor (let j = i + 1; j &lt; len; j++) &#123;</span><br><span class=\"line\">\t\t\tif (arr[j] &lt; arr[minIndex]) &#123;     //寻找最小的数</span><br><span class=\"line\">\t\t\t    minIndex = j;                 //将最小数的索引保存</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 插入排序：每次排一个数组项，假设数组的第一项已经排序，接着，把第二项与第一项进行对比，第二项是该插入到第一项之前还是之后，第三项是该插入到第一项之前还是第一项之后还是第三项</span><br><span class=\"line\">插入demo:</span><br><span class=\"line\">function insertionSort(arr) &#123;</span><br><span class=\"line\">\tlet len = arr.length;</span><br><span class=\"line\">\tlet preIndex, current;</span><br><span class=\"line\">\tfor (let i = 1; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t    preIndex = i - 1;</span><br><span class=\"line\">\t    current = arr[i];</span><br><span class=\"line\">\t    while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class=\"line\">\t\t    arr[preIndex + 1] = arr[preIndex];</span><br><span class=\"line\">\t\t    preIndex--;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    arr[preIndex + 1] = current;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)</span><br><span class=\"line\">// 归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</span><br><span class=\"line\">归并demo:</span><br><span class=\"line\">function mergeSort(arr) &#123;  //采用自上而下的递归方法</span><br><span class=\"line\">    let len = arr.length;</span><br><span class=\"line\">    if(len &lt; 2) &#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let middle = Math.floor(len / 2),</span><br><span class=\"line\">    left = arr.slice(0, middle),</span><br><span class=\"line\">    right = arr.slice(middle);</span><br><span class=\"line\">    return merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function merge(left, right)&#123;</span><br><span class=\"line\">    let result = [];</span><br><span class=\"line\">    while (left.length &amp;&amp; right.length) &#123;</span><br><span class=\"line\">        if (left[0] &lt;= right[0]) &#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.push(...left);</span><br><span class=\"line\">    result.push(...right);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//堆排序：堆排序把数组当中二叉树来排序而得名。</span><br><span class=\"line\">// 1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1</span><br><span class=\"line\">// 本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</span><br><span class=\"line\">堆demo:</span><br><span class=\"line\">var len;    //因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span><br><span class=\"line\"></span><br><span class=\"line\">function buildMaxHeap(arr) &#123;   //建立大顶堆</span><br><span class=\"line\">    len = arr.length;</span><br><span class=\"line\">    for (let i = Math.floor(len / 2); i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        heapify(arr, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function heapify(arr, i) &#123;     //堆调整</span><br><span class=\"line\">    let left = 2 * i + 1;</span><br><span class=\"line\">    let right = 2 * i + 2;</span><br><span class=\"line\">    let largest = i;</span><br><span class=\"line\">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (largest !== i) &#123;</span><br><span class=\"line\">        [arr[i], arr[largest]] = [arr[largest], arr[i]];</span><br><span class=\"line\">        heapify(arr, largest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function heapSort(arr) &#123;</span><br><span class=\"line\">    buildMaxHeap(arr);</span><br><span class=\"line\">    for (let i = arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class=\"line\">        [arr[0],arr[i]]=[arr[i],arr[0]];</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">        heapify(arr, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h5><p>思路<br>（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。<br>（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。<br>（3）如果某一步数组为空，则表示找不到目标元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key === arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">            high = mid <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr,low, high, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[mid] === key)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; key)&#123;</span><br><span class=\"line\">        high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; key)&#123;</span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"二叉树相关\"><a href=\"#二叉树相关\" class=\"headerlink\" title=\"二叉树相关\"></a>二叉树相关</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">data,left,right</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.data = data;<span class=\"comment\">//数值</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.left = left;<span class=\"comment\">//左节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.right = right;<span class=\"comment\">//右节点</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">插入二叉树</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">node,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个新的节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> newNode  = <span class=\"keyword\">new</span> Node(data,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否存在根节点，没有将新节点存入</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(node == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\tnode = newNode;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取根节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> current = node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> parent;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将当前节点保存为父节点</span></span><br><span class=\"line\">\t\t\tparent = current;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将小的数据放在左节点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data &lt; current.data)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取当前节点的左节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断当前节点下的左节点是否有数据</span></span><br><span class=\"line\">\t\t\t\tcurrent = current.left;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(current == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果没有数据将新节点存入当前节点下的左节点</span></span><br><span class=\"line\">\t\t\t\t\tparent.left = newNode;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tcurrent = current.right;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(current == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tparent.right = newNode;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">翻转二叉树</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invertTree</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tnode.left, node.right = node.left, node.right;</span><br><span class=\"line\">\t\tinvertTree(node.left);</span><br><span class=\"line\">\t\tinvertTree(node.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找链表中倒数第k个结点</span><br><span class=\"line\"><span class=\"number\">2</span>个思路</span><br><span class=\"line\"><span class=\"number\">1</span>：先遍历出长度，然后查找长度-k+<span class=\"number\">1</span>的值</span><br><span class=\"line\"><span class=\"number\">2</span>：<span class=\"number\">2</span>个指针，一个指针先走k<span class=\"number\">-1</span>，然后两个一起走到底部，后者就是结果</span><br></pre></td></tr></table></figure>\n<h4 id=\"网络安全相关\"><a href=\"#网络安全相关\" class=\"headerlink\" title=\"网络安全相关\"></a><div id=\"web\">网络安全相关</div></h4><h5 id=\"XSS-CSRF\"><a href=\"#XSS-CSRF\" class=\"headerlink\" title=\"XSS CSRF\"></a>XSS CSRF</h5><p>XSS(跨站脚本攻击)，恶意的注入html代码，其他用户访问时，会被执行<br>特点：能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击<br>防御手段：</p>\n<ul>\n<li>浏览器禁止页面的JS访问带有HttpOnly属性的Cookie</li>\n<li>两端进行输入格式检查</li>\n<li>通过编码转义的方式进行输出检查<br>CSRF(攻击跨站请求伪造)<br>特点：重要操作的所有参数都是可以被攻击者猜测到的。攻击者预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求。<br>防御手段：</li>\n<li>token验证机制，比如请求数据字段中添加一个token，响应请求时校验其有效性</li>\n<li>用户操作限制，比如验证码（繁琐，用户体验差）</li>\n<li>请求来源限制，比如限制HTTP Referer才能完成操作（防御效果相比较差）<br>实践中常用第一种<h4 id=\"webpack相关\"><a href=\"#webpack相关\" class=\"headerlink\" title=\" webpack相关\"></a><div id=\"webpack\"> webpack相关</div></h4>#####打包体积<br>优化思路</li>\n</ul>\n<ol>\n<li>提取第三方库或通过引用外部文件的方式引入第三方库</li>\n<li>代码压缩插件UglifyJsPlugin</li>\n<li>服务器启用gzip压缩</li>\n<li>按需加载资源文件 require.ensure</li>\n<li>优化devtool中的source-map</li>\n<li>剥离css文件，单独打包</li>\n<li>去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致<br>#####打包效率</li>\n<li>开发环境采用增量构建，启用热更新</li>\n<li>开发环境不做无意义的工作如提取css计算文件hash等</li>\n<li>配置devtool</li>\n<li>选择合适的loader</li>\n<li>个别loader开启cache 如babel-loader</li>\n<li>第三方库采用引入方式</li>\n<li>提取公共代码</li>\n<li>优化构建时的搜索路径 指明需要构建目录及不需要构建目录</li>\n<li>模块化引入需要的部分<h5 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h5>编写一个loader<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader就是一个node模块，它输出了一个函数。当某种资源需要用这个loader转换时，这个函数会被调用。并且，这个函数可以通过提供给它的<span class=\"keyword\">this</span>上下文访问Loader API。</span><br><span class=\"line\">reverse-txt-loader</span><br><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//src是原文件内容（abcde），下面对内容进行处理，这里是反转</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = src.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>); </span><br><span class=\"line\">  <span class=\"comment\">//返回JavaScript源码，必须是String或者Buffer</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`module.exports = '<span class=\"subst\">$&#123;result&#125;</span>'`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest: <span class=\"regexp\">/\\.txt$/</span>,</span><br><span class=\"line\">\tuse: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'./path/reverse-txt-loader'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h5><p>使用范围更广，通常只需要require()然后添加到plugins数组中，且需要new一个</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a><div id=\"other\">其他</div></h4><h5 id=\"URL到界面显示发生了什么\"><a href=\"#URL到界面显示发生了什么\" class=\"headerlink\" title=\"URL到界面显示发生了什么\"></a>URL到界面显示发生了什么</h5><ol>\n<li>DNS解析<br>先本地缓存找，在一层层找<br>将常见的地址解析成唯一对应的ip地址基本顺序为：本地域名服务器-&gt;根域名服务器-&gt;com顶级域名服务器依次类推下去,找到后记录并缓存下来如<a href=\"http://www.google.com为\" target=\"_blank\" rel=\"noopener\">www.google.com为</a><br><b>. -&gt; .com -&gt; google.com. -&gt; <a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a>.</b></li>\n<li>TCP连接<br>三次握手，只要没收到确认消息就要重新发<ol>\n<li>主机向服务器发送一个建立连接的请求（您好，我想认识您）；</li>\n<li>服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；</li>\n<li>主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。</li>\n</ol>\n</li>\n<li>发送HTTP请求<br>浏览器会分析这个url，并设置好请求报文发出。请求报文中包括请求行、请求头、空行、请求主体。https默认请求端口443， http默认80。<br>常见的http请求如下<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">POST / HTTP1.1</span></span><br><span class=\"line\"><span class=\"xml\">Host:www.wrox.com</span></span><br><span class=\"line\"><span class=\"xml\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span></span><br><span class=\"line\"><span class=\"xml\">Content-Type:application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"xml\">Content-Length:40</span></span><br><span class=\"line\"><span class=\"xml\">Connection: Keep-Alive</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">name=Professional%20Ajax&amp;publisher=Wiley</span></span><br><span class=\"line\"><span class=\"xml\">第一部分：请求行，第一行说明是post请求，以及http1.1版本。</span></span><br><span class=\"line\"><span class=\"xml\">第二部分：请求头部，第二行至第六行。</span></span><br><span class=\"line\"><span class=\"xml\">第三部分：空行，第七行的空行。</span></span><br><span class=\"line\"><span class=\"xml\">第四部分：请求数据，第八行。</span></span><br><span class=\"line\"><span class=\"xml\">4. 服务器处理请求并返回HTTP报文</span></span><br><span class=\"line\"><span class=\"xml\">后端处理返回http报文如下</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"xml\">Date: Fri, 22 May 2009 06:07:21 GMT</span></span><br><span class=\"line\"><span class=\"xml\">Content-Type: text/html; charset=UTF-8</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"comment\">&lt;!--body goes here--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</span></span><br><span class=\"line\"><span class=\"xml\">第二行和第三行为消息报头，</span></span><br><span class=\"line\"><span class=\"xml\">Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</span></span><br><span class=\"line\"><span class=\"xml\">第三部分：空行，消息报头后面的空行是必须的</span></span><br><span class=\"line\"><span class=\"xml\">第四部分：响应正文，服务器返回给客户端的文本信息。</span></span><br><span class=\"line\"><span class=\"xml\">空行后面的html部分为响应正文。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>浏览器解析渲染页面</li>\n</ol>\n<ul>\n<li>通过HTML解析器解析HTML文档，构建一个DOM Tree，同时通过CSS解析器解析HTML中存在的CSS，构建Style Rules，两者结合形成一个Attachment。</li>\n<li>通过Attachment构造出一个呈现树（Render Tree）</li>\n<li>Render Tree构建完毕，进入到布局阶段（layout/reflow），将会为每个阶段分配一个应出现在屏幕上的确切坐标。</li>\n<li>最后将全部的节点遍历绘制出来后，一个页面就展现出来了。<br>遇到script会停下来执行，所以通常把script放在底部</li>\n</ul>\n<ol start=\"6\">\n<li>连接结束</li>\n</ol>\n<h5 id=\"组件封装\"><a href=\"#组件封装\" class=\"headerlink\" title=\"组件封装\"></a>组件封装</h5><p>目的：为了重用，提高开发效率和代码质量<br>注意：低耦合，单一职责，可复用性，可维护性<br>常用操作：</p>\n<ol>\n<li>分析布局</li>\n<li>初步开发</li>\n<li>化繁为简</li>\n<li>组件抽象</li>\n</ol>\n<h5 id=\"JS异步加载\"><a href=\"#JS异步加载\" class=\"headerlink\" title=\"JS异步加载\"></a>JS异步加载</h5><ol>\n<li>动态生成script标签</li>\n<li>添加h5的async defer属性，前者乱序不适合依赖性加载</li>\n<li>async 是“下载完就执行”， defer 是“渲染完再执行”</li>\n</ol>\n<h5 id=\"css与js动画差异\"><a href=\"#css与js动画差异\" class=\"headerlink\" title=\"css与js动画差异\"></a>css与js动画差异</h5><ol>\n<li>css性能好</li>\n<li>css代码逻辑相对简单</li>\n<li>js动画控制好</li>\n<li>js兼容性好</li>\n<li>js可实现的动画多</li>\n<li>js可以添加事件</li>\n</ol>\n<h5 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h5><p>多台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用</p>\n<ol>\n<li>http重定向负载均衡：调度者根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器</li>\n<li>dns负载均衡：解析域名时，访问多个ip服务器中的一个（可监控性较弱）</li>\n<li>反向代理负载均衡：访问统一的服务器，由服务器进行调度访问实际的某个服务器，对统一的服务器要求大，性能受到 服务器群的数量</li>\n</ol>\n<h5 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h5><p>内容分发网络，基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p>\n<h5 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h5><p>定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题<br>js中可能出现的内存泄漏情况<br>结果：变慢，崩溃，延迟大等<br>原因：</p>\n<ol>\n<li>全局变量</li>\n<li>dom清空时，还存在引用</li>\n<li>ie中使用闭包</li>\n<li>定时器未清理</li>\n<li>子元素存在引起的内存泄露</li>\n</ol>\n<p>避免策略：</p>\n<ol>\n<li>减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；</li>\n<li>注意程序逻辑，避免“死循环”之类的 ；</li>\n<li>避免创建过多的对象  原则：不用了的东西要及时归还。 </li>\n<li>减少层级过多的引用<h5 id=\"babel原理\"><a href=\"#babel原理\" class=\"headerlink\" title=\"babel原理\"></a>babel原理</h5>ES6、7代码输入 -&gt; babylon进行解析 -&gt; 得到AST（抽象语法树）-&gt; plugin用babel-traverse对AST树进行遍历转译 -&gt;得到新的AST树-&gt;用babel-generator通过AST树生成ES5代码、</li>\n</ol>\n<h5 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h5><p>特性：Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止，也即是说，错误总会被下一个catch语句捕获</p>\n<h5 id=\"js自定义事件\"><a href=\"#js自定义事件\" class=\"headerlink\" title=\"js自定义事件\"></a>js自定义事件</h5><p>三要素：<br>document.createEvent()<br>event.initEvent()<br>element.dispatchEvent()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo:</span><br><span class=\"line\">(en:自定义事件名称，fn:事件处理函数，addEvent:为DOM元素添加自定义事件，triggerEvent:触发自定义事件)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"demo\"</span>);</span><br><span class=\"line\">    demo.addEvent(<span class=\"string\">\"test\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"handler1\"</span>)&#125;);</span><br><span class=\"line\">    demo.addEvent(<span class=\"string\">\"test\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"handler2\"</span>)&#125;);</span><br><span class=\"line\">    demo.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.triggerEvent(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Element.prototype.addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">en,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pools = <span class=\"keyword\">this</span>.pools || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(en <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.pools)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pools[en].push(fn);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pools[en] = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pools[en].push(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Element.prototype.triggerEvent  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">en</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(en <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.pools)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fns = <span class=\"keyword\">this</span>.pools[en];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,il=fns.length;i&lt;il;i++)&#123;</span><br><span class=\"line\">            fns[i]();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"es6模块-commonjs-amd-cmd\"><a href=\"#es6模块-commonjs-amd-cmd\" class=\"headerlink\" title=\"es6模块 commonjs  amd cmd\"></a>es6模块 commonjs  amd cmd</h5><ol>\n<li>CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。</li>\n<li>CommonJS是同步加载模块,在浏览器中会出现堵塞情况，所以不适用</li>\n<li>AMD 异步，需要定义回调define方式</li>\n<li>es6 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量</li>\n<li>es6还可以导出类、方法，自动适用严格模式</li>\n</ol>\n<h5 id=\"前后端路由差别\"><a href=\"#前后端路由差别\" class=\"headerlink\" title=\"前后端路由差别\"></a>前后端路由差别</h5><p>1.后端每次路由请求都是重新访问服务器<br>2.前端路由实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前端问题记录\"><a href=\"#前端问题记录\" class=\"headerlink\" title=\"前端问题记录\"></a>前端问题记录</h3><ol>\n<li><a href=\"#html\">HTML相关</a></li>\n<li><a href=\"#css\">CSS相关</a></li>\n<li><a href=\"#javascript\">JAVASCRIPT相关</a></li>\n<li><a href=\"#dom\">DOM相关</a></li>\n<li><a href=\"#http\">HTTP相关</a></li>\n<li><a href=\"#vue\">VUE相关</a></li>\n<li><a href=\"#sort\">算法相关</a></li>\n<li><a href=\"#web\">网络安全相关</a></li>\n<li><a href=\"#webpack\">webpack相关</a></li>\n<li><a href=\"#other\">其他</a><h4 id=\"Html相关\"><a href=\"#Html相关\" class=\"headerlink\" title=\"Html相关\"></a>Html相关</h4><h5 id=\"1-html语义化\"><a href=\"#1-html语义化\" class=\"headerlink\" title=\"1 html语义化\"></a><div id=\"html\">1 html语义化</div></h5>意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。<br>注意：<br>1.尽可能少的使用无语义的标签div和span；<br>2.在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；<br>3.不要使用纯样式标签，如：b、font、u等，改用css设置。<br>4.需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；<br>5.使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；<br>6.表单域要用fieldset标签包起来，并用legend标签说明表单的用途；<br>7.每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</li>\n</ol>\n<p>新标签：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/h5%E6%96%B0%E5%85%83%E7%B4%A0.png\" alt=\"h5新元素\" title=\"\">\n                </div>\n                <div class=\"image-caption\">h5新元素</div>\n            </figure></p>\n<h5 id=\"2-meta-viewport相关\"><a href=\"#2-meta-viewport相关\" class=\"headerlink\" title=\"2 meta viewport相关\"></a>2 meta viewport相关</h5><figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>  H5标准声明，使用 HTML5 doctype，不区分大小写</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">”en”</span>&gt;</span> 标准的 lang 属性写法</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">’utf-8′</span>&gt;</span>    声明文档使用的字符编码</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span> <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge,chrome</span>=<span class=\"string\">1″/</span>&gt;</span>   优先使用 IE 最新版本和 Chrome</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”description”</span> <span class=\"attr\">content</span>=<span class=\"string\">”不超过150个字符”/</span>&gt;</span>       页面描述</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”keywords”</span> <span class=\"attr\">content</span>=<span class=\"string\">””/</span>&gt;</span>      页面关键词</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”author”</span> <span class=\"attr\">content</span>=<span class=\"string\">”name,</span> <span class=\"attr\">email</span>@<span class=\"attr\">gmail.com</span>”/&gt;</span>    网页作者</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”robots”</span> <span class=\"attr\">content</span>=<span class=\"string\">”index,follow”/</span>&gt;</span>      搜索引擎抓取</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”viewport”</span> <span class=\"attr\">content</span>=<span class=\"string\">”initial-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">maximum-scale</span>=<span class=\"string\">3,</span> <span class=\"attr\">minimum-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">user-scalable</span>=<span class=\"string\">no”</span>&gt;</span> 为移动设备添加 viewport</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-mobile-web-app-title”</span> <span class=\"attr\">content</span>=<span class=\"string\">”标题”</span>&gt;</span> iOS 设备 begin</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-mobile-web-app-capable”</span> <span class=\"attr\">content</span>=<span class=\"string\">”yes”/</span>&gt;</span>  添加到主屏后的标题（iOS 6 新增）</span></span><br><span class=\"line\"><span class=\"xml\">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-itunes-app”</span> <span class=\"attr\">content</span>=<span class=\"string\">”app-id</span>=<span class=\"string\">myAppStoreID,</span> <span class=\"attr\">affiliate-data</span>=<span class=\"string\">myAffiliateData,</span> <span class=\"attr\">app-argument</span>=<span class=\"string\">myURL”</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-mobile-web-app-status-bar-style”</span> <span class=\"attr\">content</span>=<span class=\"string\">”black”/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”format-detection”</span> <span class=\"attr\">content</span>=<span class=\"string\">”telphone</span>=<span class=\"string\">no,</span> <span class=\"attr\">email</span>=<span class=\"string\">no”/</span>&gt;</span>  设置苹果工具栏颜色</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”renderer”</span> <span class=\"attr\">content</span>=<span class=\"string\">”webkit”</span>&gt;</span>  启用360浏览器的极速模式(webkit)</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span> <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge”</span>&gt;</span>     避免IE使用兼容模式</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”Cache-Control”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no-siteapp”</span> /&gt;</span>    不让百度转码</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”HandheldFriendly”</span> <span class=\"attr\">content</span>=<span class=\"string\">”true”</span>&gt;</span>     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”MobileOptimized”</span> <span class=\"attr\">content</span>=<span class=\"string\">”320″</span>&gt;</span>   微软的老式浏览器</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”screen-orientation”</span> <span class=\"attr\">content</span>=<span class=\"string\">”portrait”</span>&gt;</span>   uc强制竖屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”x5-orientation”</span> <span class=\"attr\">content</span>=<span class=\"string\">”portrait”</span>&gt;</span>    QQ强制竖屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”full-screen”</span> <span class=\"attr\">content</span>=<span class=\"string\">”yes”</span>&gt;</span>              UC强制全屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”x5-fullscreen”</span> <span class=\"attr\">content</span>=<span class=\"string\">”true”</span>&gt;</span>       QQ强制全屏</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”browsermode”</span> <span class=\"attr\">content</span>=<span class=\"string\">”application”</span>&gt;</span>   UC应用模式</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”x5-page-mode”</span> <span class=\"attr\">content</span>=<span class=\"string\">”app”</span>&gt;</span>    QQ应用模式</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”msapplication-tap-highlight”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no”</span>&gt;</span>    windows phone 点击无高光</span></span><br><span class=\"line\"><span class=\"xml\">设置页面不缓存</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”pragma”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no-cache”</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”cache-control”</span> <span class=\"attr\">content</span>=<span class=\"string\">”no-cache”</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”expires”</span> <span class=\"attr\">content</span>=<span class=\"string\">”0″</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-canvas-相关\"><a href=\"#3-canvas-相关\" class=\"headerlink\" title=\"3 canvas 相关\"></a>3 canvas 相关</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用前需要获得上下文环境，暂不支持<span class=\"number\">3</span>d</span><br><span class=\"line\">常用api:</span><br><span class=\"line\">\t<span class=\"number\">1.</span>fillRect(x,y,width,height)实心矩形</span><br><span class=\"line\">\t<span class=\"number\">2.</span>strokeRect(x,y,width,height)空心矩形</span><br><span class=\"line\">\t<span class=\"number\">3.</span>fillText(<span class=\"string\">\"Hello world\"</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>);实心文字</span><br><span class=\"line\">    <span class=\"number\">4.</span>strokeText(<span class=\"string\">\"Hello world\"</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>)空心文字</span><br><span class=\"line\">各种东西！！！</span><br></pre></td></tr></table></figure>\n<h5 id=\"新标签兼容低版本\"><a href=\"#新标签兼容低版本\" class=\"headerlink\" title=\"新标签兼容低版本\"></a>新标签兼容低版本</h5><ol>\n<li>ie9之前版本通过createElement创建html5新标签</li>\n<li>引入html5shiv.js<h4 id=\"CSS相关\"><a href=\"#CSS相关\" class=\"headerlink\" title=\"CSS相关\"></a><div id=\"css\">CSS相关</div></h4><h5 id=\"1-盒模型\"><a href=\"#1-盒模型\" class=\"headerlink\" title=\"1.盒模型\"></a>1.盒模型</h5>1.ie盒模型算上border、padding及自身（不算margin），标准的只算上自身窗体的大小<br>css设置方法如下<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 标准模型 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">box-sizing</span><span class=\"selector-pseudo\">:content-box</span>;</span><br><span class=\"line\"> <span class=\"comment\">/*IE模型*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">box-sizing</span><span class=\"selector-pseudo\">:border-box</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.margin、border、padding、content由外到里<br>3.几种获得宽高的方式</p>\n<ul>\n<li>dom.style.width/height<br>　　这种方式只能取到dom元素内联样式所设置的宽高，也就是说如果该节点的样式是在style标签中或外联的CSS文件中设置的话，通过这种方法是获取不到dom的宽高的。</li>\n<li>dom.currentStyle.width/height<br>　　这种方式获取的是在页面渲染完成后的结果，就是说不管是哪种方式设置的样式，都能获取到。但这种方式只有IE浏览器支持。</li>\n<li>window.getComputedStyle(dom).width/height<br>　　这种方式的原理和2是一样的，这个可以兼容更多的浏览器，通用性好一些。</li>\n<li>dom.getBoundingClientRect().width/height<br>　　这种方式是根据元素在视窗中的绝对位置来获取宽高的</li>\n<li>dom.offsetWidth/offsetHeight<br>　　这个就没什么好说的了，最常用的，也是兼容最好的。</li>\n</ul>\n<p>4.拓展 各种获得宽高的方式</p>\n<ul>\n<li>获取屏幕的高度和宽度（屏幕分辨率）：<br>window.screen.height/width</li>\n<li>获取屏幕工作区域的高度和宽度（去掉状态栏）：<br>window.screen.availHeight/availWidth</li>\n<li>网页全文的高度和宽度：<br>document.body.scrollHeight/Width</li>\n<li>滚动条卷上去的高度和向右卷的宽度：<br>document.body.scrollTop/scrollLeft</li>\n<li>网页可见区域的高度和宽度（不加边线）：<br>document.body.clientHeight/clientWidth</li>\n<li>网页可见区域的高度和宽度（加边线）：<br>document.body.offsetHeight/offsetWidth</li>\n</ul>\n<p>5.边距重叠解决方案(BFC)<br>BFC原理</p>\n<ul>\n<li>内部的box会在垂直方向，一个接一个的放置<br>每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）</li>\n<li>box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠</li>\n<li>bfc的区域不会与浮动区域的box重叠</li>\n<li>bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的</li>\n<li>计算bfc高度的时候，浮动元素也会参与计算<br>创建bfc</li>\n<li>float属性不为none（脱离文档流）</li>\n<li>position为absolute或fixed</li>\n<li>display为inline-block,table-cell,table-caption,flex,inine-flex</li>\n<li>overflow不为visible</li>\n<li>根元素<br>demo<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>上<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t这块margin-bottom:30px;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 给下面这个块添加一个父元素，在父元素上创建bfc --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>下<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t这块margin-top:50px;</span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"css-reset-和-normalize-css-有什么区别\"><a href=\"#css-reset-和-normalize-css-有什么区别\" class=\"headerlink\" title=\"css reset 和 normalize.css 有什么区别\"></a>css reset 和 normalize.css 有什么区别</h5><ul>\n<li>两者都是通过重置样式，保持浏览器样式的一致性</li>\n<li>前者几乎为所有标签添加了样式，后者保持了许多浏览器样式，保持尽可能的一致</li>\n<li>后者修复了常见的桌面端和移动端浏览器的bug：包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。</li>\n<li>前者中含有大段的继承链</li>\n<li>后者模块化，文档较前者来说丰富<h5 id=\"居中方法\"><a href=\"#居中方法\" class=\"headerlink\" title=\"居中方法\"></a>居中方法</h5>水平方向上<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">针对<span class=\"selector-tag\">inline</span>, 内联块<span class=\"selector-tag\">inline-block</span>, 内联表<span class=\"selector-tag\">inline-table</span>, <span class=\"selector-tag\">inline-flex</span>元素及<span class=\"selector-tag\">img</span>,<span class=\"selector-tag\">span</span>,<span class=\"selector-tag\">button</span>等元素</span><br><span class=\"line\"><span class=\"selector-class\">.text_div</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不定宽块状元素居中</span><br><span class=\"line\"><span class=\"selector-class\">.text_div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过给父元素设置 <span class=\"selector-tag\">float</span>，然后给父元素设置 <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:relative</span> 和 <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%，子元素设置 <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:relative</span> 和 <span class=\"selector-tag\">left</span>: <span class=\"selector-tag\">-50</span>% 来实现水平居中。</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap-center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:-<span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>垂直居中<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行内联(<span class=\"selector-tag\">inline-</span>)元素垂直居中 </span><br><span class=\"line\">通过设置内联元素的高度(<span class=\"selector-tag\">height</span>)和行高(<span class=\"selector-tag\">line-height</span>)相等，从而使元素垂直居中。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.text_div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用表布局</span><br><span class=\"line\"><span class=\"selector-class\">.father</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.children</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">flex</span>布局</span><br><span class=\"line\"><span class=\"selector-class\">.center-flex</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    flex-direction: column;//上下排列</span><br><span class=\"line\">    <span class=\"selector-tag\">justify-content</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绝对布局方式</span><br><span class=\"line\">已知高度</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">未知高度</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>垂直水平居中根据上方结合<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">flex</span>方式</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">grid</span>方式</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"css优先级确定\"><a href=\"#css优先级确定\" class=\"headerlink\" title=\"css优先级确定\"></a>css优先级确定</h5><ul>\n<li>每个选择器都有权值，权值越大越优先</li>\n<li>继承的样式优先级低于自身指定样式</li>\n<li>！important优先级最高 js也无法修改</li>\n<li>权值相同时，靠近元素的样式优先级高  顺序为内联样式表（标签内部）&gt; 内部样式表（当前文件中）&gt; 外部样式表（外部文件中）<h5 id=\"bfc内容见盒模型\"><a href=\"#bfc内容见盒模型\" class=\"headerlink\" title=\"bfc内容见盒模型\"></a>bfc内容见盒模型</h5><h5 id=\"如何清除浮动\"><a href=\"#如何清除浮动\" class=\"headerlink\" title=\"如何清除浮动\"></a>如何清除浮动</h5>不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）</li>\n<li>clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}</li>\n<li>给浮动元素父级设置高度</li>\n<li>父级同时浮动（需要给父级同级元素添加浮动）</li>\n<li>父级设置成inline-block，其margin: 0 auto居中方式失效</li>\n<li>利用br标签的clear属性</li>\n<li>给父级添加overflow:hidden 清除浮动方法</li>\n<li>万能清除法 after伪类 清浮动（现在主流方法，推荐使用）<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.float_div</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">\t<span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.float_div</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">zoom</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"自适应布局\"><a href=\"#自适应布局\" class=\"headerlink\" title=\"自适应布局\"></a>自适应布局</h5><p>思路：</p>\n<ol>\n<li>左侧浮动或者绝对定位，然后右侧margin撑开</li>\n<li>使用div包含，然后靠负margin形成bfc</li>\n<li>使用flex<h5 id=\"画三角形\"><a href=\"#画三角形\" class=\"headerlink\" title=\"画三角形\"></a>画三角形</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid blue;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"link-import导入css\"><a href=\"#link-import导入css\" class=\"headerlink\" title=\"link @import导入css\"></a>link @import导入css</h5><ol>\n<li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li>\n<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>\n<li>link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li>\n<li>ink支持使用Javascript控制DOM去改变样式；而@import不支持。<h5 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/animation.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h5 id=\"长宽比方案\"><a href=\"#长宽比方案\" class=\"headerlink\" title=\"长宽比方案\"></a>长宽比方案</h5></li>\n<li>使用padding方式结合calc实现</li>\n<li>长宽一项设置百分比另一项aspect-ratio实现（需借助插件实现）<h5 id=\"display相关\"><a href=\"#display相关\" class=\"headerlink\" title=\"display相关\"></a>display相关</h5></li>\n<li>block:div等容器类型</li>\n<li>inline:img span等行内类型</li>\n<li>table系列：将样式变成table类型</li>\n<li>flex:重点把握，非常强大</li>\n<li>grid:同上</li>\n<li>inline-block:可设置宽度，两者间有一点间隙</li>\n<li>inherit:继承父级<h4 id=\"JavaScript相关\"><a href=\"#JavaScript相关\" class=\"headerlink\" title=\"JavaScript相关\"></a><div id=\"javascript\">JavaScript相关</div></h4><h5 id=\"1-“1”-“2”-“3”-map-parseInt\"><a href=\"#1-“1”-“2”-“3”-map-parseInt\" class=\"headerlink\" title=\"1 [“1”, “2”, “3”].map(parseInt)\"></a>1 [“1”, “2”, “3”].map(parseInt)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的<span class=\"keyword\">this</span>值</span><br><span class=\"line\"></span><br><span class=\"line\">其中回调函数接受三个参数 currentValue, index, arrary;</span><br><span class=\"line\"></span><br><span class=\"line\">而题目中, map只传入了回调函数--<span class=\"built_in\">parseInt</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">其次, <span class=\"built_in\">parseInt</span> 只接受两个两个参数 string, radix(基数).  </span><br><span class=\"line\">本题理解来说也就是key与 index </span><br><span class=\"line\"></span><br><span class=\"line\">所以本题即问</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'1'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'2'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'3'</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(string, radix)</span><br><span class=\"line\">string\t必需。要被解析的字符串。</span><br><span class=\"line\">radix 可选。表示要解析的数字的基数。该值介于 <span class=\"number\">2</span> ~ <span class=\"number\">36</span> 之间。</span><br><span class=\"line\">如果省略该参数或其值为 <span class=\"number\">0</span>，则数字将以 <span class=\"number\">10</span> 为基础来解析。如果它以 “<span class=\"number\">0</span>x” 或 “<span class=\"number\">0</span>X” 开头，将以 <span class=\"number\">16</span> 为基数。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"2-3-2-1-reduce-Math-pow-reduce-Math-pow\"><a href=\"#2-3-2-1-reduce-Math-pow-reduce-Math-pow\" class=\"headerlink\" title=\"2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]\"></a>2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[, initialValue])</span><br><span class=\"line\">reduce接受两个参数, 一个回调, 一个初始值.</span><br><span class=\"line\">回调函数接受四个参数 previousValue, currentValue, currentIndex, array</span><br><span class=\"line\">需要注意的是 If the array is empty and no initialValue was provided, <span class=\"built_in\">TypeError</span> would be thrown.</span><br><span class=\"line\">所以第二个表达式会报异常. 第一个表达式等价于 <span class=\"built_in\">Math</span>.pow(<span class=\"number\">3</span>, <span class=\"number\">2</span>) =&gt; <span class=\"number\">9</span>; <span class=\"built_in\">Math</span>.pow(<span class=\"number\">9</span>, <span class=\"number\">1</span>) =&gt;<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">ary[<span class=\"number\">10</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">ary.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x === <span class=\"literal\">undefined</span>;&#125;);</span><br><span class=\"line\">我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> ary; =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">in</span> ary; =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"keyword\">in</span> ary; =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">也就是说 从 <span class=\"number\">3</span> - <span class=\"number\">9</span> 都是没有初始化的bug !, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些坑的.</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-typeof-null-null-instanceof-Object\"><a href=\"#4-typeof-null-null-instanceof-Object\" class=\"headerlink\" title=\"4 [typeof null, null instanceof Object]\"></a>4 [typeof null, null instanceof Object]</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> 返回一个表示类型的字符串.</span><br><span class=\"line\"><span class=\"keyword\">instanceof</span> 运算符用来检测 <span class=\"keyword\">constructor</span>.prototype 是否存在于参数 object 的原型链上.</span><br><span class=\"line\">type         result</span><br><span class=\"line\">Undefined   \"undefined\"</span><br><span class=\"line\">Null        \"object\"</span><br><span class=\"line\">Boolean     \"boolean\"</span><br><span class=\"line\">Number      \"number\"</span><br><span class=\"line\">String      \"string\"</span><br><span class=\"line\">Symbol      \"symbol\"</span><br><span class=\"line\">Host object Implementation-dependent</span><br><span class=\"line\">Function    \"function\"</span><br><span class=\"line\">Object      \"object\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-js数据类型\"><a href=\"#5-js数据类型\" class=\"headerlink\" title=\"5 js数据类型\"></a>5 js数据类型</h5><p>1.number; </p>\n<p>2.string;</p>\n<p>3.boolean;</p>\n<p>4.undefined;</p>\n<p>5.null;</p>\n<p>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。</p>\n<p>7.Object.（包括Object，Array，Function）</p>\n<h5 id=\"6-promise-用法\"><a href=\"#6-promise-用法\" class=\"headerlink\" title=\"6 promise 用法\"></a>6 promise 用法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">使用</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//等价于：</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//success</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//failure</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-es6-promise-ajax\"><a href=\"#7-es6-promise-ajax\" class=\"headerlink\" title=\"7 es6 promise ajax\"></a>7 es6 promise ajax</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"keyword\">const</span> myHttpClient = <span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">\"GET\"</span>, url);</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.responseType = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">使用</span><br><span class=\"line\">myHttpClient(<span class=\"string\">'https://www.baidu.com'</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"8闭包\"><a href=\"#8闭包\" class=\"headerlink\" title=\"8闭包\"></a>8闭包</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        alert(x + y + (++tmp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo(<span class=\"number\">2</span>); <span class=\"comment\">// bar 现在是一个闭包</span></span><br><span class=\"line\">bar(<span class=\"number\">10</span>);</span><br><span class=\"line\">结果是<span class=\"number\">16</span></span><br><span class=\"line\">es6通常用<span class=\"keyword\">let</span> <span class=\"keyword\">const</span>块级作用域代替，</span><br><span class=\"line\">闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</span><br></pre></td></tr></table></figure>\n<h5 id=\"9-什么是立即执行函数？使用立即执行函数的目的是什么？\"><a href=\"#9-什么是立即执行函数？使用立即执行函数的目的是什么？\" class=\"headerlink\" title=\"9 什么是立即执行函数？使用立即执行函数的目的是什么？\"></a>9 什么是立即执行函数？使用立即执行函数的目的是什么？</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见两种方式</span><br><span class=\"line\"><span class=\"number\">1.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)()</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;)(<span class=\"number\">12345</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;())</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;(<span class=\"number\">12345</span>))</span><br><span class=\"line\">作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span><br><span class=\"line\">（<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;...&#125;(<span class=\"built_in\">window</span>)）</span><br></pre></td></tr></table></figure>\n<h5 id=\"10-async-await-语法\"><a href=\"#10-async-await-语法\" class=\"headerlink\" title=\"10 async/await 语法\"></a>10 async/await 语法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：异步代码的新方式</span><br><span class=\"line\">promise示例</span><br><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getJSON()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.needsAnotherRequest) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> makeAnotherRequest(data)</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">moreData</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(moreData)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> moreData</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span>/<span class=\"keyword\">await</span>示例</span><br><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> getJSON()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.needsAnotherRequest) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> moreData = <span class=\"keyword\">await</span> makeAnotherRequest(data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(moreData)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> moreData</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">函数前面多了一个aync关键字。<span class=\"keyword\">await</span>关键字只能用在aync定义的函数内。<span class=\"keyword\">async</span>函数会隐式地返回一个promise，该promise的reosolve值就是函数<span class=\"keyword\">return</span>的值。(示例中reosolve值就是字符串<span class=\"string\">\"done\"</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"11-深浅拷贝\"><a href=\"#11-深浅拷贝\" class=\"headerlink\" title=\"11 深浅拷贝\"></a>11 深浅拷贝</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  aa: <span class=\"number\">1</span>,</span><br><span class=\"line\">  bb: <span class=\"number\">2</span>,</span><br><span class=\"line\">  cc: <span class=\"number\">3</span>,</span><br><span class=\"line\">  dd: &#123;</span><br><span class=\"line\">    ee: <span class=\"number\">5</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ff: &#123;</span><br><span class=\"line\">    gg: <span class=\"number\">6</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));<span class=\"comment\">//深复制包含子对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;...a&#125;;<span class=\"comment\">//深拷贝单不包含子对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a;<span class=\"comment\">//浅拷贝</span></span><br><span class=\"line\">b.bb = <span class=\"number\">22</span>;</span><br><span class=\"line\">c.cc = <span class=\"number\">33</span>;</span><br><span class=\"line\">c.dd.ee = <span class=\"number\">55</span>;</span><br><span class=\"line\">d.ff.gg = <span class=\"number\">66</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);</span><br></pre></td></tr></table></figure>\n<h5 id=\"12数组去重\"><a href=\"#12数组去重\" class=\"headerlink\" title=\"12数组去重\"></a>12数组去重</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">思路<span class=\"number\">1</span>：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中</span><br><span class=\"line\">思路<span class=\"number\">2</span>：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。</span><br><span class=\"line\">思路<span class=\"number\">3</span>：利用对象属性存在的特性，如果没有该属性则存入新数组。</span><br><span class=\"line\">思路<span class=\"number\">4</span>（最常用）：使用es6 set</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr= [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...new <span class=\"built_in\">Set</span>(arr)]);</span><br></pre></td></tr></table></figure>\n<h5 id=\"13正则实现trim-功能\"><a href=\"#13正则实现trim-功能\" class=\"headerlink\" title=\"13正则实现trim()功能\"></a>13正则实现trim()功能</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTrim</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(reg, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myTrim(<span class=\"string\">'    asdf    '</span>));</span><br></pre></td></tr></table></figure>\n<h5 id=\"14-JS原型\"><a href=\"#14-JS原型\" class=\"headerlink\" title=\"14 JS原型\"></a>14 JS原型</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性</span><br><span class=\"line\"><span class=\"number\">2.</span>个人粗略理解与python的类方法静态方法实例方法差不多</span><br></pre></td></tr></table></figure>\n<p>#####15 es6 class<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象，java中类</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"16-JS-如何实现继承\"><a href=\"#16-JS-如何实现继承\" class=\"headerlink\" title=\"16 JS 如何实现继承\"></a>16 JS 如何实现继承</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>使用原型继承（既继承了父类的模板，又继承了父类的原型对象。优点是继承了父类的模板，又继承了父类的原型对象，缺点就是父类实例传参，不是子类实例化传参，不符合常规语言的写法）</span><br><span class=\"line\"><span class=\"number\">2.</span>使用call的方式（继承了父类的模板，不继承了父类的原型对象。优点是方便了子类实例传参，缺点就是不继承了父类的原型对象）</span><br></pre></td></tr></table></figure>\n<h5 id=\"17-手写jquery插件\"><a href=\"#17-手写jquery插件\" class=\"headerlink\" title=\"17 手写jquery插件\"></a>17 手写jquery插件</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">\t$.fn.myPlugins = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//参数赋值</span></span><br><span class=\"line\">\t  options = $.extend(defaults, options);<span class=\"comment\">//对象合并</span></span><br><span class=\"line\">\t  <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t      <span class=\"comment\">//执行代码逻辑</span></span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)(jQuery);</span><br><span class=\"line\"></span><br><span class=\"line\">$(selector).myPlugins(&#123;参数&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"18-数组合并去重排序\"><a href=\"#18-数组合并去重排序\" class=\"headerlink\" title=\"18 数组合并去重排序\"></a>18 数组合并去重排序</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">25</span>, <span class=\"number\">2</span>, <span class=\"number\">26</span>, <span class=\"number\">1234</span>, <span class=\"number\">6</span>, <span class=\"number\">213</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">2134</span>, <span class=\"number\">6</span>, <span class=\"number\">31</span>, <span class=\"number\">623</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [...new <span class=\"built_in\">Set</span>([...arr1, ...arr2])].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"19-call-apply\"><a href=\"#19-call-apply\" class=\"headerlink\" title=\"19 call apply\"></a>19 call apply</h5><p>作用：在函数调用时改变函数的执行上下文也就是this的值<br>区别：call采用不定长的参数列表，而apply使用一个参数数组。<br>性能优化图<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg\" alt=\"性能优化\" title=\"\">\n                </div>\n                <div class=\"image-caption\">性能优化</div>\n            </figure></p>\n<h5 id=\"20-for-中setTimeOut\"><a href=\"#20-for-中setTimeOut\" class=\"headerlink\" title=\"20 for 中setTimeOut\"></a>20 for 中setTimeOut</h5><p>要为循环题创建不同的循环副本</p>\n<h5 id=\"21-sort函数\"><a href=\"#21-sort函数\" class=\"headerlink\" title=\"21 sort函数\"></a>21 sort函数</h5><p>V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。</p>\n<h5 id=\"22-navigator\"><a href=\"#22-navigator\" class=\"headerlink\" title=\"22 navigator\"></a>22 navigator</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/Navigator.png\" alt=\"Navigator\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Navigator</div>\n            </figure>\n<h5 id=\"23-jquery绑定方式\"><a href=\"#23-jquery绑定方式\" class=\"headerlink\" title=\"23 jquery绑定方式\"></a>23 jquery绑定方式</h5><ol>\n<li>click后者覆盖</li>\n<li>bind后者覆盖</li>\n<li>on(jquery&gt;=1.7)</li>\n<li>live</li>\n<li>delegate<h5 id=\"24-事件流向\"><a href=\"#24-事件流向\" class=\"headerlink\" title=\"24 事件流向\"></a>24 事件流向</h5></li>\n<li>冒泡：子节点一层层冒泡到根节点</li>\n<li>捕获顺序与冒泡相反</li>\n<li>addEventListener最后个参数true代表捕获反之代表冒泡</li>\n<li>阻止冒泡不停止父节点捕获<h5 id=\"25原生操作class\"><a href=\"#25原生操作class\" class=\"headerlink\" title=\"25原生操作class\"></a>25原生操作class</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断有无</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">ele, cls</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ele.className.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\\\\s|^)\"</span> + cls + <span class=\"string\">\"(\\\\s|$)\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span>(<span class=\"params\">ele, cls</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasClass(ele, cls)) ele.className += <span class=\"string\">\" \"</span> + cls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeClass</span>(<span class=\"params\">ele, cls</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasClass(ele, cls)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\\\\s|^)\"</span> + cls + <span class=\"string\">\"(\\\\s|$)\"</span>);</span><br><span class=\"line\">\t\tele.className = ele.className.replace(reg, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">html5中加入classList </span><br><span class=\"line\">一系列操作</span><br><span class=\"line\">兼容至IE10</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"DOM相关\"><a href=\"#DOM相关\" class=\"headerlink\" title=\"DOM相关\"></a><div id=\"dom\">DOM相关</div></h4><h5 id=\"dom事件模型\"><a href=\"#dom事件模型\" class=\"headerlink\" title=\"dom事件模型\"></a>dom事件模型</h5><p>DOM之事件模型分脚本模型、内联模型(同类一个，后者覆盖)、动态绑定(同类多个)<br>demo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;!--行内绑定：脚本模型--&gt;</span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">\"javascrpt:alert('Hello')\"</span>&gt;Hello1&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--内联模型--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onclick=\"showHello()\"&gt;Hello2&lt;/</span>button&gt;</span><br><span class=\"line\">&lt;!--动态绑定--&gt;</span><br><span class=\"line\">&lt;button id=<span class=\"string\">\"btn3\"</span>&gt;Hello3&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"comment\">/*DOM0：同一个元素，同类事件只能添加一个，如果添加多个，</span></span><br><span class=\"line\"><span class=\"comment\">* 后面添加的会覆盖之前添加的*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shoeHello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn3\"</span>);</span><br><span class=\"line\">btn3.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*DOM2:可以给同一个元素添加多个同类事件*/</span></span><br><span class=\"line\">btn3.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"hello1\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">btn3.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"hello2\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (btn3.attachEvent)&#123;</span><br><span class=\"line\"><span class=\"comment\">/*IE*/</span></span><br><span class=\"line\">btn3.attachEvent(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"IE Hello1\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/*W3C*/</span></span><br><span class=\"line\">btn3.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">alert(<span class=\"string\">\"W3C Hello\"</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>冒泡解释：当点击一个元素触发事件时. 事件会先从元素的最外层父元素一层一层进入到触发的元素, 然后在从触发元素一层一层返回到最外层父元素, 从最外层一层一层进入的阶段叫事件捕获阶段, 从最里层一层一层往外的阶段叫事件冒泡,</p>\n<h5 id=\"移动端触摸事件\"><a href=\"#移动端触摸事件\" class=\"headerlink\" title=\"移动端触摸事件\"></a>移动端触摸事件</h5><p>①touchstart：当手指触碰到屏幕的时候触发<br>②touchmove：当手指在屏幕上滑动的时候触发<br>③touchend：当手指离开屏幕的时候时候触发<br>④touchcancel事件：当系统停止跟踪触摸的时候触发(这个事件很少会用，一般不做深入研究)。 电话接入或者弹出信息等其他事件切入<br>event： </p>\n<ol>\n<li>touches：表示当前跟踪的触摸操作的touch对象的数组。 </li>\n<li>targetTouches：特定于事件目标的Touch对象的数组。 </li>\n<li>changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。 </li>\n</ol>\n<p>每个touch对象包含的属性 </p>\n<ol>\n<li>clientX：触摸目标在视口中的x坐标。 </li>\n<li>clientY：触摸目标在视口中的y坐标。 </li>\n<li>identifier：标识触摸的唯一ID。 </li>\n<li>pageX：触摸目标在页面中的x坐标。 </li>\n<li>pageY：触摸目标在页面中的y坐标。 </li>\n<li>screenX：触摸目标在屏幕中的x坐标。 </li>\n<li>screenY：触摸目标在屏幕中的y坐标。 </li>\n<li>target：触目的DOM节点目标。 </li>\n</ol>\n<h5 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h5><p>参考定义：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件<br>好处：给重复的节点添加相同操作，减少dom交互，提高性能<br>实现思路：给父组件添加事件，通过事件冒泡，排查元素是否为指定元素，并进行系列操作</p>\n<h4 id=\"HTTP相关\"><a href=\"#HTTP相关\" class=\"headerlink\" title=\"HTTP相关\"></a><div id=\"http\">HTTP相关</div></h4><h5 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h5><p><b>2开头 （请求成功）表示成功处理了请求的状态代码。</b></p>\n<p>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201   （已创建）  请求成功并且服务器创建了新的资源。<br>202   （已接受）  服务器已接受请求，但尚未处理。<br>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。<br>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br>206   （部分内容）  服务器成功处理了部分 GET 请求。</p>\n<p><b>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</b></p>\n<p>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>\n<p><b>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</b></p>\n<p>400   （错误请求） 服务器不理解请求的语法。<br>401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403   （禁止） 服务器拒绝请求。<br>404   （未找到） 服务器找不到请求的网页。<br>405   （方法禁用） 禁用请求中指定的方法。<br>406   （不接受） 无法使用请求的内容特性响应请求的网页。<br>407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408   （请求超时）  服务器等候请求时发生超时。<br>409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。<br>411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br>412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br>415   （不支持的媒体类型） 请求的格式不受请求页面的支持。<br>416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p>\n<p><b>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</b></p>\n<p>500   （服务器内部错误）  服务器遇到错误，无法完成请求。<br>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><ol>\n<li>Expires在http1.0中使用，与服务器时间有误差，在1.1中由Cache-control替代<br><meta http-equiv=\"Cache-Control\" content=\"max-age=7200\"><meta http-equiv=\"Expires\" content=\"Mon, 20 Jul 2009 23:00:00 GMT\"></li>\n<li>cdn</li>\n</ol>\n<h5 id=\"Cache-Control-和-Etag-的区别\"><a href=\"#Cache-Control-和-Etag-的区别\" class=\"headerlink\" title=\"Cache-Control 和 Etag 的区别\"></a>Cache-Control 和 Etag 的区别</h5><p>如下图<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/%E5%8C%BA%E5%88%AB%E5%9B%BE.png\" alt=\"区别图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">区别图</div>\n            </figure></p>\n<h5 id=\"Cookie-sessionStorage-localStorage\"><a href=\"#Cookie-sessionStorage-localStorage\" class=\"headerlink\" title=\"Cookie sessionStorage  localStorage\"></a>Cookie sessionStorage  localStorage</h5><p>共同点：都是保存在浏览器端，且同源的。<br>区别：cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据不能超过4k(适合保存小数据)。<br>sessionStorage和localStorage容量较大，数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效。localStorage：始终有效，窗口或浏览器关闭也一直保存，需手动清楚；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同。<br>sessionStorage不在不同的浏览器窗口中共享；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</p>\n<p>应用场景：localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage ：敏感账号一次性登录； cookies与服务器交互。</p>\n<h5 id=\"GET-POST区别\"><a href=\"#GET-POST区别\" class=\"headerlink\" title=\"GET POST区别\"></a>GET POST区别</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/get_post.png\" alt=\"get_post\" title=\"\">\n                </div>\n                <div class=\"image-caption\">get_post</div>\n            </figure>\n<h5 id=\"请求行，请求头，请求体详解\"><a href=\"#请求行，请求头，请求体详解\" class=\"headerlink\" title=\"请求行，请求头，请求体详解\"></a>请求行，请求头，请求体详解</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/http%E8%AF%B7%E6%B1%82%E4%B8%80%E4%BD%93.jpg\" alt=\"如图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">如图</div>\n            </figure>\n<p>1,2,3请求行，4请求体，5请求体</p>\n<h5 id=\"跨域、JSONP-、CORS、postMessage\"><a href=\"#跨域、JSONP-、CORS、postMessage\" class=\"headerlink\" title=\"跨域、JSONP 、CORS、postMessage\"></a>跨域、JSONP 、CORS、postMessage</h5><p>跨域概念解释：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：我们认为若协议 + 域名 + 端口号均相同，那么就是同域。<br>如下表<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F%E6%83%85%E5%86%B5%E6%A0%87%E8%AF%86.png\" alt=\"图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">图</div>\n            </figure></p>\n<p>jsoup实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 传参并指定回调执行函数为onBack</span></span><br><span class=\"line\">    script.src = <span class=\"string\">'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 回调执行函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onBack</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">JSON</span>.stringify(res));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">jquery</span></span><br><span class=\"line\"><span class=\"regexp\">$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    url: 'http:/</span><span class=\"regexp\">/www.domain2.com:8080/</span>login<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    type: '</span>get<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    dataType: '</span>jsonp<span class=\"string\">',  // 请求方式为jsonp</span></span><br><span class=\"line\"><span class=\"string\">    jsonpCallback: \"onBack\",    // 自定义回调函数名</span></span><br><span class=\"line\"><span class=\"string\">    data: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">vue</span></span><br><span class=\"line\"><span class=\"string\">this.$http.jsonp('</span>http:<span class=\"comment\">//www.domain2.com:8080/login', &#123;</span></span><br><span class=\"line\">    params: &#123;&#125;,</span><br><span class=\"line\">    jsonp: <span class=\"string\">'onBack'</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res); </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">配合的后端node实现,其他服务器语言也可以</span><br><span class=\"line\"><span class=\"keyword\">const</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer();</span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = qs.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = params.callback;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// jsonp返回设置</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/javascript'</span> &#125;);</span><br><span class=\"line\">    res.write(fn + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(params) + <span class=\"string\">')'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">jsoup缺点只能实现get请求</span><br></pre></td></tr></table></figure></p>\n<p>CORS：跨源资源共享 Cross-Origin Resource Sharing(CORS)，通常服务器设置，若带cookie请求，则前后端都需要设置<br>后端常见设置<br>response.setHeader(“Access-Control-Allow-Origin”, “<a href=\"http://www.domain1.com&quot;)\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com&quot;)</a>;  // 若有端口需写全（协议+域名+端口），允许那些外源请求<br>response.setHeader(“Access-Control-Allow-Credentials”, “true”); //是否需要验证</p>\n<p>前端示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class=\"line\"><span class=\"comment\">// 前端设置是否带cookie</span></span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'http://www.domain2.com:8080/login'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">'user=admin'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jquery</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   xhrFields: &#123;</span><br><span class=\"line\">       withCredentials: <span class=\"literal\">true</span>    <span class=\"comment\">// 前端设置是否带cookie</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   crossDomain: <span class=\"literal\">true</span>,   <span class=\"comment\">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postMessage(data,origin)方法接受两个参数</span><br><span class=\"line\">demo</span><br><span class=\"line\"></span><br><span class=\"line\">a.html</span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.domain2.com/b.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span></span><br><span class=\"line\">&lt;script&gt;       </span><br><span class=\"line\">    <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">    iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">            name: <span class=\"string\">'aym'</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 向domain2传送跨域数据</span></span><br><span class=\"line\">        iframe.contentWindow.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), <span class=\"string\">'http://www.domain2.com'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 接受domain2返回数据</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'data from domain2 ---&gt; '</span> + e.data);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">b.html  与a.html不同源</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 接收domain1的数据</span></span><br><span class=\"line\"><span class=\"regexp\">    window.addEventListener('message', function(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        alert('data from domain1 ---&gt; ' + e.data);</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">        var data = JSON.parse(e.data);</span></span><br><span class=\"line\"><span class=\"regexp\">        if (data) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            data.number = 16;</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">            /</span><span class=\"regexp\">/ 处理后再发回domain1</span></span><br><span class=\"line\"><span class=\"regexp\">            window.parent.postMessage(JSON.stringify(data), 'http:/</span><span class=\"regexp\">/www.domain1.com');</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;, false);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"osi模型\"><a href=\"#osi模型\" class=\"headerlink\" title=\"osi模型\"></a>osi模型</h5><p>七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br>tcp ucp属于传输层；http属于应用层</p>\n<h5 id=\"http2-0-http1\"><a href=\"#http2-0-http1\" class=\"headerlink\" title=\"http2.0 http1\"></a>http2.0 http1</h5><ol>\n<li>HTTP2.0的基本单位为二进制帧</li>\n<li>HTTP2.0中帧具有优先级</li>\n<li>HTTP2.0的多路复用（ 1次连接）</li>\n<li>HTTP2.0压缩消息头</li>\n<li>HTTP2.0服务端推送</li>\n<li>HTTP2.0只适用于HTTPS的场景<h4 id=\"Vue相关\"><a href=\"#Vue相关\" class=\"headerlink\" title=\"Vue相关\"></a><div id=\"vue\">Vue相关</div></h4></li>\n</ol>\n<h5 id=\"生命周期顺序\"><a href=\"#生命周期顺序\" class=\"headerlink\" title=\"生命周期顺序\"></a>生命周期顺序</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://pd4ar0u4q.bkt.clouddn.com/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"生命周期\" title=\"\">\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure>\n<h5 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h5><p>1.父传子用props,父用子用ref 子调父用$emit,无关系用Bus</p>\n<h5 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h5><p>组件通信库，可以避免子组件无法改变props的弊端等<br>mutations 同步操作， 用于改变状态 官方不推荐异步<br>action 执行多个mutaions，官方推荐异步操作<br>mapState、mapGetters、mapActions使用示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-dialog :visible.sync=<span class=\"string\">\"show\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  computed:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这里的三点叫做 : 扩展运算符</span></span><br><span class=\"line\">    ...mapState(&#123;</span><br><span class=\"line\">      show:<span class=\"function\"><span class=\"params\">state</span>=&gt;</span>state.dialog.show</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">后两者类似</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"VueRouter\"><a href=\"#VueRouter\" class=\"headerlink\" title=\"VueRouter\"></a>VueRouter</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"keyword\">var</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path:<span class=\"string\">\"/one\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        component:导入的组件<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path:<span class=\"string\">\"/two\"</span>,</span><br><span class=\"line\">        component:导入的组件<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 定义路由组件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定义路由</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box\"</span>,</span><br><span class=\"line\">    router</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> 访问设定的路由后 会将&lt;router-view&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span>替换成相应的模版</span></span><br><span class=\"line\"> html访问方式 &lt;router-link to=\"/one\"&gt;One&lt;/router-link&gt;(类似a标签)</span><br><span class=\"line\"> js访问方式 this.$router.push('/one'); </span><br><span class=\"line\"> replace方式 替换当前页面</span><br><span class=\"line\"> 携带的参数 可以通过this.$route.query.xxxx来获取</span><br><span class=\"line\">``` </span><br><span class=\"line\">##### Vue双向绑定</span><br><span class=\"line\">原理：利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。</span><br><span class=\"line\">缺点：双向数据流是自动管理状态的, 但是在实际应用中会有很多不得不手动处理状态变化的逻辑, 使得程序复杂度上升, 难以调试。</span><br><span class=\"line\">##### computed  watch methods</span><br><span class=\"line\">用法：</span><br><span class=\"line\">区别：</span><br><span class=\"line\">1. 前两者自动追踪数据，执行相关函数，最后一个手动调用；</span><br><span class=\"line\">2. computed是计算属性，用法与data一致</span><br><span class=\"line\">3. watch像事件监听，对象发生变化时，执行相关操作</span><br><span class=\"line\">4. methods与js中执行方法类似</span><br><span class=\"line\">5. computed通常只有get属性</span><br><span class=\"line\">6. 数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择</span><br><span class=\"line\">7. watch的对象必须事先声明</span><br><span class=\"line\">#### &lt;div id=\"sort\"&gt;算法相关&lt;/div&gt;</span><br><span class=\"line\">##### 各种排序实现</span><br><span class=\"line\">相关数据</span><br><span class=\"line\">![表格](http://pd4ar0u4q.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AD%89%E7%AD%89.png)</span><br><span class=\"line\">```javascript</span><br><span class=\"line\">// 冒泡排序: 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</span><br><span class=\"line\">冒泡demo:</span><br><span class=\"line\">function bubbleSort(arr) &#123;</span><br><span class=\"line\">    let len = arr.length;</span><br><span class=\"line\">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;        //相邻元素两两对比</span><br><span class=\"line\">                [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1) 首先，在数组中选择一个中间项作为主元</span><br><span class=\"line\">// 2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到</span><br><span class=\"line\">// 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作</span><br><span class=\"line\">// 3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</span><br><span class=\"line\">快排demo:</span><br><span class=\"line\">function quickSort(arr, left, right) &#123;</span><br><span class=\"line\">    let len = arr.length;</span><br><span class=\"line\">    let partitionIndex;</span><br><span class=\"line\">    left = typeof left !== 'number' ? 0 : left;</span><br><span class=\"line\">    right = typeof right !== 'number' ? len - 1 : right;</span><br><span class=\"line\">    if (left &lt; right) &#123;</span><br><span class=\"line\">        partitionIndex = partition(arr, left, right);</span><br><span class=\"line\">        quickSort(arr, left, partitionIndex - 1);</span><br><span class=\"line\">        quickSort(arr, partitionIndex + 1, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function partition(arr, left, right) &#123;     //分区操作</span><br><span class=\"line\">    let pivot = left;                      //设定基准值（pivot）</span><br><span class=\"line\">    let index = pivot + 1;</span><br><span class=\"line\">    for (let i = index; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [arr[pivot], arr[index - 1]] = [arr[index - 1], arr[pivot]];</span><br><span class=\"line\">    return index - 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 选择排序：大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</span><br><span class=\"line\">选择demo:</span><br><span class=\"line\">function selectionSort(arr) &#123;</span><br><span class=\"line\">\tlet len = arr.length;</span><br><span class=\"line\">\tlet minIndex;</span><br><span class=\"line\">\tfor (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class=\"line\">\t\tminIndex = i;</span><br><span class=\"line\">\t\tfor (let j = i + 1; j &lt; len; j++) &#123;</span><br><span class=\"line\">\t\t\tif (arr[j] &lt; arr[minIndex]) &#123;     //寻找最小的数</span><br><span class=\"line\">\t\t\t    minIndex = j;                 //将最小数的索引保存</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 插入排序：每次排一个数组项，假设数组的第一项已经排序，接着，把第二项与第一项进行对比，第二项是该插入到第一项之前还是之后，第三项是该插入到第一项之前还是第一项之后还是第三项</span><br><span class=\"line\">插入demo:</span><br><span class=\"line\">function insertionSort(arr) &#123;</span><br><span class=\"line\">\tlet len = arr.length;</span><br><span class=\"line\">\tlet preIndex, current;</span><br><span class=\"line\">\tfor (let i = 1; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t    preIndex = i - 1;</span><br><span class=\"line\">\t    current = arr[i];</span><br><span class=\"line\">\t    while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class=\"line\">\t\t    arr[preIndex + 1] = arr[preIndex];</span><br><span class=\"line\">\t\t    preIndex--;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    arr[preIndex + 1] = current;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)</span><br><span class=\"line\">// 归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</span><br><span class=\"line\">归并demo:</span><br><span class=\"line\">function mergeSort(arr) &#123;  //采用自上而下的递归方法</span><br><span class=\"line\">    let len = arr.length;</span><br><span class=\"line\">    if(len &lt; 2) &#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let middle = Math.floor(len / 2),</span><br><span class=\"line\">    left = arr.slice(0, middle),</span><br><span class=\"line\">    right = arr.slice(middle);</span><br><span class=\"line\">    return merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function merge(left, right)&#123;</span><br><span class=\"line\">    let result = [];</span><br><span class=\"line\">    while (left.length &amp;&amp; right.length) &#123;</span><br><span class=\"line\">        if (left[0] &lt;= right[0]) &#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.push(...left);</span><br><span class=\"line\">    result.push(...right);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//堆排序：堆排序把数组当中二叉树来排序而得名。</span><br><span class=\"line\">// 1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1</span><br><span class=\"line\">// 本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</span><br><span class=\"line\">堆demo:</span><br><span class=\"line\">var len;    //因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span><br><span class=\"line\"></span><br><span class=\"line\">function buildMaxHeap(arr) &#123;   //建立大顶堆</span><br><span class=\"line\">    len = arr.length;</span><br><span class=\"line\">    for (let i = Math.floor(len / 2); i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        heapify(arr, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function heapify(arr, i) &#123;     //堆调整</span><br><span class=\"line\">    let left = 2 * i + 1;</span><br><span class=\"line\">    let right = 2 * i + 2;</span><br><span class=\"line\">    let largest = i;</span><br><span class=\"line\">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (largest !== i) &#123;</span><br><span class=\"line\">        [arr[i], arr[largest]] = [arr[largest], arr[i]];</span><br><span class=\"line\">        heapify(arr, largest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function heapSort(arr) &#123;</span><br><span class=\"line\">    buildMaxHeap(arr);</span><br><span class=\"line\">    for (let i = arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class=\"line\">        [arr[0],arr[i]]=[arr[i],arr[0]];</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">        heapify(arr, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h5><p>思路<br>（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。<br>（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。<br>（3）如果某一步数组为空，则表示找不到目标元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key === arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">            high = mid <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr,low, high, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[mid] === key)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; key)&#123;</span><br><span class=\"line\">        high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; key)&#123;</span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"二叉树相关\"><a href=\"#二叉树相关\" class=\"headerlink\" title=\"二叉树相关\"></a>二叉树相关</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">data,left,right</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.data = data;<span class=\"comment\">//数值</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.left = left;<span class=\"comment\">//左节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.right = right;<span class=\"comment\">//右节点</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">插入二叉树</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">node,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个新的节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> newNode  = <span class=\"keyword\">new</span> Node(data,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否存在根节点，没有将新节点存入</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(node == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\tnode = newNode;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取根节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> current = node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> parent;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将当前节点保存为父节点</span></span><br><span class=\"line\">\t\t\tparent = current;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将小的数据放在左节点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data &lt; current.data)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取当前节点的左节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断当前节点下的左节点是否有数据</span></span><br><span class=\"line\">\t\t\t\tcurrent = current.left;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(current == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果没有数据将新节点存入当前节点下的左节点</span></span><br><span class=\"line\">\t\t\t\t\tparent.left = newNode;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tcurrent = current.right;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(current == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tparent.right = newNode;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">翻转二叉树</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invertTree</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tnode.left, node.right = node.left, node.right;</span><br><span class=\"line\">\t\tinvertTree(node.left);</span><br><span class=\"line\">\t\tinvertTree(node.right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找链表中倒数第k个结点</span><br><span class=\"line\"><span class=\"number\">2</span>个思路</span><br><span class=\"line\"><span class=\"number\">1</span>：先遍历出长度，然后查找长度-k+<span class=\"number\">1</span>的值</span><br><span class=\"line\"><span class=\"number\">2</span>：<span class=\"number\">2</span>个指针，一个指针先走k<span class=\"number\">-1</span>，然后两个一起走到底部，后者就是结果</span><br></pre></td></tr></table></figure>\n<h4 id=\"网络安全相关\"><a href=\"#网络安全相关\" class=\"headerlink\" title=\"网络安全相关\"></a><div id=\"web\">网络安全相关</div></h4><h5 id=\"XSS-CSRF\"><a href=\"#XSS-CSRF\" class=\"headerlink\" title=\"XSS CSRF\"></a>XSS CSRF</h5><p>XSS(跨站脚本攻击)，恶意的注入html代码，其他用户访问时，会被执行<br>特点：能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击<br>防御手段：</p>\n<ul>\n<li>浏览器禁止页面的JS访问带有HttpOnly属性的Cookie</li>\n<li>两端进行输入格式检查</li>\n<li>通过编码转义的方式进行输出检查<br>CSRF(攻击跨站请求伪造)<br>特点：重要操作的所有参数都是可以被攻击者猜测到的。攻击者预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求。<br>防御手段：</li>\n<li>token验证机制，比如请求数据字段中添加一个token，响应请求时校验其有效性</li>\n<li>用户操作限制，比如验证码（繁琐，用户体验差）</li>\n<li>请求来源限制，比如限制HTTP Referer才能完成操作（防御效果相比较差）<br>实践中常用第一种<h4 id=\"webpack相关\"><a href=\"#webpack相关\" class=\"headerlink\" title=\" webpack相关\"></a><div id=\"webpack\"> webpack相关</div></h4>#####打包体积<br>优化思路</li>\n</ul>\n<ol>\n<li>提取第三方库或通过引用外部文件的方式引入第三方库</li>\n<li>代码压缩插件UglifyJsPlugin</li>\n<li>服务器启用gzip压缩</li>\n<li>按需加载资源文件 require.ensure</li>\n<li>优化devtool中的source-map</li>\n<li>剥离css文件，单独打包</li>\n<li>去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致<br>#####打包效率</li>\n<li>开发环境采用增量构建，启用热更新</li>\n<li>开发环境不做无意义的工作如提取css计算文件hash等</li>\n<li>配置devtool</li>\n<li>选择合适的loader</li>\n<li>个别loader开启cache 如babel-loader</li>\n<li>第三方库采用引入方式</li>\n<li>提取公共代码</li>\n<li>优化构建时的搜索路径 指明需要构建目录及不需要构建目录</li>\n<li>模块化引入需要的部分<h5 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h5>编写一个loader<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader就是一个node模块，它输出了一个函数。当某种资源需要用这个loader转换时，这个函数会被调用。并且，这个函数可以通过提供给它的<span class=\"keyword\">this</span>上下文访问Loader API。</span><br><span class=\"line\">reverse-txt-loader</span><br><span class=\"line\">定义</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//src是原文件内容（abcde），下面对内容进行处理，这里是反转</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = src.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>); </span><br><span class=\"line\">  <span class=\"comment\">//返回JavaScript源码，必须是String或者Buffer</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`module.exports = '<span class=\"subst\">$&#123;result&#125;</span>'`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest: <span class=\"regexp\">/\\.txt$/</span>,</span><br><span class=\"line\">\tuse: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'./path/reverse-txt-loader'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h5><p>使用范围更广，通常只需要require()然后添加到plugins数组中，且需要new一个</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a><div id=\"other\">其他</div></h4><h5 id=\"URL到界面显示发生了什么\"><a href=\"#URL到界面显示发生了什么\" class=\"headerlink\" title=\"URL到界面显示发生了什么\"></a>URL到界面显示发生了什么</h5><ol>\n<li>DNS解析<br>先本地缓存找，在一层层找<br>将常见的地址解析成唯一对应的ip地址基本顺序为：本地域名服务器-&gt;根域名服务器-&gt;com顶级域名服务器依次类推下去,找到后记录并缓存下来如<a href=\"http://www.google.com为\" target=\"_blank\" rel=\"noopener\">www.google.com为</a><br><b>. -&gt; .com -&gt; google.com. -&gt; <a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a>.</b></li>\n<li>TCP连接<br>三次握手，只要没收到确认消息就要重新发<ol>\n<li>主机向服务器发送一个建立连接的请求（您好，我想认识您）；</li>\n<li>服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；</li>\n<li>主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。</li>\n</ol>\n</li>\n<li>发送HTTP请求<br>浏览器会分析这个url，并设置好请求报文发出。请求报文中包括请求行、请求头、空行、请求主体。https默认请求端口443， http默认80。<br>常见的http请求如下<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">POST / HTTP1.1</span></span><br><span class=\"line\"><span class=\"xml\">Host:www.wrox.com</span></span><br><span class=\"line\"><span class=\"xml\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span></span><br><span class=\"line\"><span class=\"xml\">Content-Type:application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"xml\">Content-Length:40</span></span><br><span class=\"line\"><span class=\"xml\">Connection: Keep-Alive</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">name=Professional%20Ajax&amp;publisher=Wiley</span></span><br><span class=\"line\"><span class=\"xml\">第一部分：请求行，第一行说明是post请求，以及http1.1版本。</span></span><br><span class=\"line\"><span class=\"xml\">第二部分：请求头部，第二行至第六行。</span></span><br><span class=\"line\"><span class=\"xml\">第三部分：空行，第七行的空行。</span></span><br><span class=\"line\"><span class=\"xml\">第四部分：请求数据，第八行。</span></span><br><span class=\"line\"><span class=\"xml\">4. 服务器处理请求并返回HTTP报文</span></span><br><span class=\"line\"><span class=\"xml\">后端处理返回http报文如下</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"xml\">Date: Fri, 22 May 2009 06:07:21 GMT</span></span><br><span class=\"line\"><span class=\"xml\">Content-Type: text/html; charset=UTF-8</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"comment\">&lt;!--body goes here--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</span></span><br><span class=\"line\"><span class=\"xml\">第二行和第三行为消息报头，</span></span><br><span class=\"line\"><span class=\"xml\">Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</span></span><br><span class=\"line\"><span class=\"xml\">第三部分：空行，消息报头后面的空行是必须的</span></span><br><span class=\"line\"><span class=\"xml\">第四部分：响应正文，服务器返回给客户端的文本信息。</span></span><br><span class=\"line\"><span class=\"xml\">空行后面的html部分为响应正文。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>浏览器解析渲染页面</li>\n</ol>\n<ul>\n<li>通过HTML解析器解析HTML文档，构建一个DOM Tree，同时通过CSS解析器解析HTML中存在的CSS，构建Style Rules，两者结合形成一个Attachment。</li>\n<li>通过Attachment构造出一个呈现树（Render Tree）</li>\n<li>Render Tree构建完毕，进入到布局阶段（layout/reflow），将会为每个阶段分配一个应出现在屏幕上的确切坐标。</li>\n<li>最后将全部的节点遍历绘制出来后，一个页面就展现出来了。<br>遇到script会停下来执行，所以通常把script放在底部</li>\n</ul>\n<ol start=\"6\">\n<li>连接结束</li>\n</ol>\n<h5 id=\"组件封装\"><a href=\"#组件封装\" class=\"headerlink\" title=\"组件封装\"></a>组件封装</h5><p>目的：为了重用，提高开发效率和代码质量<br>注意：低耦合，单一职责，可复用性，可维护性<br>常用操作：</p>\n<ol>\n<li>分析布局</li>\n<li>初步开发</li>\n<li>化繁为简</li>\n<li>组件抽象</li>\n</ol>\n<h5 id=\"JS异步加载\"><a href=\"#JS异步加载\" class=\"headerlink\" title=\"JS异步加载\"></a>JS异步加载</h5><ol>\n<li>动态生成script标签</li>\n<li>添加h5的async defer属性，前者乱序不适合依赖性加载</li>\n<li>async 是“下载完就执行”， defer 是“渲染完再执行”</li>\n</ol>\n<h5 id=\"css与js动画差异\"><a href=\"#css与js动画差异\" class=\"headerlink\" title=\"css与js动画差异\"></a>css与js动画差异</h5><ol>\n<li>css性能好</li>\n<li>css代码逻辑相对简单</li>\n<li>js动画控制好</li>\n<li>js兼容性好</li>\n<li>js可实现的动画多</li>\n<li>js可以添加事件</li>\n</ol>\n<h5 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h5><p>多台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用</p>\n<ol>\n<li>http重定向负载均衡：调度者根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器</li>\n<li>dns负载均衡：解析域名时，访问多个ip服务器中的一个（可监控性较弱）</li>\n<li>反向代理负载均衡：访问统一的服务器，由服务器进行调度访问实际的某个服务器，对统一的服务器要求大，性能受到 服务器群的数量</li>\n</ol>\n<h5 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h5><p>内容分发网络，基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p>\n<h5 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h5><p>定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题<br>js中可能出现的内存泄漏情况<br>结果：变慢，崩溃，延迟大等<br>原因：</p>\n<ol>\n<li>全局变量</li>\n<li>dom清空时，还存在引用</li>\n<li>ie中使用闭包</li>\n<li>定时器未清理</li>\n<li>子元素存在引起的内存泄露</li>\n</ol>\n<p>避免策略：</p>\n<ol>\n<li>减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；</li>\n<li>注意程序逻辑，避免“死循环”之类的 ；</li>\n<li>避免创建过多的对象  原则：不用了的东西要及时归还。 </li>\n<li>减少层级过多的引用<h5 id=\"babel原理\"><a href=\"#babel原理\" class=\"headerlink\" title=\"babel原理\"></a>babel原理</h5>ES6、7代码输入 -&gt; babylon进行解析 -&gt; 得到AST（抽象语法树）-&gt; plugin用babel-traverse对AST树进行遍历转译 -&gt;得到新的AST树-&gt;用babel-generator通过AST树生成ES5代码、</li>\n</ol>\n<h5 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h5><p>特性：Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止，也即是说，错误总会被下一个catch语句捕获</p>\n<h5 id=\"js自定义事件\"><a href=\"#js自定义事件\" class=\"headerlink\" title=\"js自定义事件\"></a>js自定义事件</h5><p>三要素：<br>document.createEvent()<br>event.initEvent()<br>element.dispatchEvent()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo:</span><br><span class=\"line\">(en:自定义事件名称，fn:事件处理函数，addEvent:为DOM元素添加自定义事件，triggerEvent:触发自定义事件)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> demo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"demo\"</span>);</span><br><span class=\"line\">    demo.addEvent(<span class=\"string\">\"test\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"handler1\"</span>)&#125;);</span><br><span class=\"line\">    demo.addEvent(<span class=\"string\">\"test\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"handler2\"</span>)&#125;);</span><br><span class=\"line\">    demo.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.triggerEvent(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Element.prototype.addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">en,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pools = <span class=\"keyword\">this</span>.pools || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(en <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.pools)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pools[en].push(fn);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pools[en] = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pools[en].push(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Element.prototype.triggerEvent  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">en</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(en <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.pools)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fns = <span class=\"keyword\">this</span>.pools[en];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,il=fns.length;i&lt;il;i++)&#123;</span><br><span class=\"line\">            fns[i]();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"es6模块-commonjs-amd-cmd\"><a href=\"#es6模块-commonjs-amd-cmd\" class=\"headerlink\" title=\"es6模块 commonjs  amd cmd\"></a>es6模块 commonjs  amd cmd</h5><ol>\n<li>CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。</li>\n<li>CommonJS是同步加载模块,在浏览器中会出现堵塞情况，所以不适用</li>\n<li>AMD 异步，需要定义回调define方式</li>\n<li>es6 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量</li>\n<li>es6还可以导出类、方法，自动适用严格模式</li>\n</ol>\n<h5 id=\"前后端路由差别\"><a href=\"#前后端路由差别\" class=\"headerlink\" title=\"前后端路由差别\"></a>前后端路由差别</h5><p>1.后端每次路由请求都是重新访问服务器<br>2.前端路由实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmoq3q510008h4a1l01c7gxm","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q71000fh4a1r5el6to2"},{"post_id":"cjmoq3q2x0000h4a1s8tv156b","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q7d000jh4a1mzz457xc"},{"post_id":"cjmoq3q580009h4a1ciab2g8p","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q7k000mh4a1ybqw3sd9"},{"post_id":"cjmoq3q5o000dh4a12parg1el","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q7x000qh4a1v3fny7cn"},{"post_id":"cjmoq3q3s0002h4a1yuur4jf3","category_id":"cjmoq3q5j000ah4a19dnsqx0k","_id":"cjmoq3q89000uh4a158pia9t2"},{"post_id":"cjmoq3q7t000ph4a1kntmp2f9","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q8p000zh4a19yzdbho7"},{"post_id":"cjmoq3q7h000lh4a1kv2xkd6b","category_id":"cjmoq3q7y000rh4a1mk875mmv","_id":"cjmoq3q9a0015h4a1dkuqr10f"},{"post_id":"cjmoq3q8j000yh4a1oqcz89jc","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q9f0018h4a109qaq2am"},{"post_id":"cjmoq3q8v0012h4a1bpid6q6n","category_id":"cjmoq3q4a0004h4a15sxbfv61","_id":"cjmoq3q9p001bh4a1dxt6jpxt"},{"post_id":"cjmoq3q84000th4a1yvpimdh2","category_id":"cjmoq3q8q0010h4a143rhn81s","_id":"cjmoq3q9u001fh4a1sp5hgs21"},{"post_id":"cjmoq3q8d000wh4a13tsgv1kp","category_id":"cjmoq3q8q0010h4a143rhn81s","_id":"cjmoq5sxo001ph4a10yt8iqah"},{"post_id":"cjmoq3q9s001eh4a1d4nfo3zl","category_id":"cjmoq3q8q0010h4a143rhn81s","_id":"cjmoq64ux001rh4a1ii83ztg3"}],"PostTag":[{"post_id":"cjmoq3q2x0000h4a1s8tv156b","tag_id":"cjmoq3q4o0005h4a1vib0ajjg","_id":"cjmoq3q5n000ch4a1yu4pvoj3"},{"post_id":"cjmoq3q5o000dh4a12parg1el","tag_id":"cjmoq3q4o0005h4a1vib0ajjg","_id":"cjmoq3q74000hh4a1b5qfdtga"},{"post_id":"cjmoq3q3s0002h4a1yuur4jf3","tag_id":"cjmoq3q5k000bh4a1p4zzw3un","_id":"cjmoq3q7f000kh4a112itjva7"},{"post_id":"cjmoq3q78000ih4a1l1y06z81","tag_id":"cjmoq3q72000gh4a1nvyou1si","_id":"cjmoq3q7s000oh4a1h68qwl70"},{"post_id":"cjmoq3q4q0006h4a1b0ixa89a","tag_id":"cjmoq3q72000gh4a1nvyou1si","_id":"cjmoq3q7z000sh4a1778am2gw"},{"post_id":"cjmoq3q7t000ph4a1kntmp2f9","tag_id":"cjmoq3q72000gh4a1nvyou1si","_id":"cjmoq3q8c000vh4a1q24a392s"},{"post_id":"cjmoq3q510008h4a1l01c7gxm","tag_id":"cjmoq3q7p000nh4a1os4557md","_id":"cjmoq3q8h000xh4a1lfuqt2mj"},{"post_id":"cjmoq3q8v0012h4a1bpid6q6n","tag_id":"cjmoq3q4o0005h4a1vib0ajjg","_id":"cjmoq3q9b0016h4a153pcws1c"},{"post_id":"cjmoq3q970014h4a1fm8cgk8l","tag_id":"cjmoq3q4o0005h4a1vib0ajjg","_id":"cjmoq3q9h0019h4a1uy24sk1n"},{"post_id":"cjmoq3q8j000yh4a1oqcz89jc","tag_id":"cjmoq3q930013h4a1dr2z386z","_id":"cjmoq3q9r001dh4a1d62eak26"},{"post_id":"cjmoq3q9c0017h4a1vtk8f3ly","tag_id":"cjmoq3q9q001ch4a1kb3ns9e9","_id":"cjmoq3qa5001hh4a1e5mbpgt0"},{"post_id":"cjmoq3q9m001ah4a16hea9ns6","tag_id":"cjmoq3qa0001gh4a14ri6p4s1","_id":"cjmoq3qa8001kh4a1vkhthq18"},{"post_id":"cjmoq3q8d000wh4a13tsgv1kp","tag_id":"cjmoq5nkw001mh4a1f2r2f8rs","_id":"cjmoq5nl0001nh4a1n2zb7mna"},{"post_id":"cjmoq3q84000th4a1yvpimdh2","tag_id":"cjmoq5nkw001mh4a1f2r2f8rs","_id":"cjmoq5rby001oh4a1u5wt3y1s"},{"post_id":"cjmoq3q9s001eh4a1d4nfo3zl","tag_id":"cjmoq5nkw001mh4a1f2r2f8rs","_id":"cjmoq64uw001qh4a1xjx21nun"}],"Tag":[{"name":"js代码片段","_id":"cjmoq3q4o0005h4a1vib0ajjg"},{"name":"优质文章分享","_id":"cjmoq3q5k000bh4a1p4zzw3un"},{"name":"react","_id":"cjmoq3q72000gh4a1nvyou1si"},{"name":"node","_id":"cjmoq3q7p000nh4a1os4557md"},{"name":"前端自动化","_id":"cjmoq3q930013h4a1dr2z386z"},{"name":"npm","_id":"cjmoq3q9q001ch4a1kb3ns9e9"},{"name":"html5","_id":"cjmoq3qa0001gh4a14ri6p4s1"},{"name":"优秀文章分享","_id":"cjmoq3qa7001jh4a139dtwilr"},{"name":"分享","_id":"cjmoq5nkw001mh4a1f2r2f8rs"}]}}
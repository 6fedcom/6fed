<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端迷 (front-end fan)</title>
  
  <subtitle>frank，前端开发爱好者，沉迷前端，无法自拔,欢迎一切技术交流（不局限于前端），邮箱fanqianweb@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ru23.com/"/>
  <updated>2018-11-28T03:13:27.585Z</updated>
  <id>https://ru23.com/</id>
  
  <author>
    <name>frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手写一个promise，彻底掌握它的原理</title>
    <link href="https://ru23.com/note/e5037e31.html"/>
    <id>https://ru23.com/note/e5037e31.html</id>
    <published>2018-11-27T14:35:58.000Z</published>
    <updated>2018-11-28T03:13:27.585Z</updated>
    
    <content type="html"><![CDATA[<p>Promise 是异步编程的一种解决方案,解决传统的回调嵌套问题</p><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。<br>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="首先，我们先搭建好代码的骨架："><a href="#首先，我们先搭建好代码的骨架：" class="headerlink" title="首先，我们先搭建好代码的骨架："></a>首先，我们先搭建好代码的骨架：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">self.status = <span class="string">'pending'</span>;</span><br><span class="line">self.data = <span class="literal">undefined</span>;</span><br><span class="line">self.onResolvedCallback = [];</span><br><span class="line">self.onRejectedCallback = [];</span><br><span class="line">callback(resolve, reject);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status == <span class="string">'fulfilled'</span>;</span><br><span class="line">self.data = value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class="line">self.onResolvedCallBack[i].value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status == <span class="string">'rejected'</span>;</span><br><span class="line">self.data = error;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class="line">self.onResolvedCallback[i].value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> promise2;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved === <span class="string">'function'</span>) &#123;</span><br><span class="line">onResolved = onResolved</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">onResolved = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">onResolved = onResolved</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">onResolved = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'resolved'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onResolved(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">resolve(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onRejected(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">resolve(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">self.onResolvedCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onResolved(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">            self.onRejected.push(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onRejected(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch=<span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6实现Promise</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Promise 是异步编程的一种解决方案,解决传统的回调嵌套问题&lt;/p&gt;
&lt;p&gt;（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>前端开发者进阶之函数柯里化Currying</title>
    <link href="https://ru23.com/note/260f9819.html"/>
    <id>https://ru23.com/note/260f9819.html</id>
    <published>2018-11-27T11:03:00.000Z</published>
    <updated>2018-11-28T02:17:04.779Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    __args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> __inargs = slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, __args.concat(__inargs));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>简书笔记摘抄</title>
    <link href="https://ru23.com/note/368be592.html"/>
    <id>https://ru23.com/note/368be592.html</id>
    <published>2018-11-27T06:36:28.000Z</published>
    <updated>2018-11-28T02:59:22.863Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>How to resolve iOS 11 Safari getUserMedia “Invalid constraint” issue</title>
    <link href="https://ru23.com/note/e4a16398.html"/>
    <id>https://ru23.com/note/e4a16398.html</id>
    <published>2018-11-26T05:01:05.000Z</published>
    <updated>2018-11-26T05:23:19.327Z</updated>
    
    <content type="html"><![CDATA[<p>I’m attempting to run the following code in Safari in iOS 11. It should prompt the user to give access to their devices camera and then display it in my <video autoplay id="video"></video> element. However, when running in iOS 11, it results in an OverconstrainedError to be thrown:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">message</span>: <span class="string">"Invalid constraint"</span>, <span class="attr">constraint</span>: <span class="string">"width"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>The code runs fine in Chorme and successfully opens the camera.<br>I’ve attempted multiple valid configurations with no luck.</p><p><strong>Code</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line"><span class="keyword">if</span>(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">     navigator.mediaDevices.getUserMedia(&#123;<span class="attr">video</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">             video.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">             video.play();</span><br><span class="line">         &#125;)</span><br><span class="line">         .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(err);</span><br><span class="line">         &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>The invalid constraint error in safari is because the browser expects that you pass a correct width, one of:</p><ul><li>320</li><li>640</li><li><p>1280<br>the height is auto calculate in an aspect ratio of 4:3 for 320 or 640, and 16:9 for 1280, then if you pass a width of 320, you video stream is set in:</p></li><li><p>320x240<br>if you set a width of 640, you video stream is set in:</p></li><li><p>640x480<br>And if you set a width of 1280, then you video stream is set in:</p></li><li><p>1280x720<br>In any other case you got a error “InvalidConstrain” for width value.</p></li></ul><p>Also you can use a min, max, exact or ideal constrains for width, please check the MDN documentation</p><p>Here an example in this codepen<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123; <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">320</span><span class="comment">/*320-640-1280*/</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> start = <span class="function"><span class="params">()</span> =&gt;</span> navigator.mediaDevices.getUserMedia(config)</span><br><span class="line">  .then(<span class="function"><span class="params">stream</span> =&gt;</span> v.srcObject = stream)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> v.onloadedmetadata = resolve))</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> log(<span class="string">"Success: "</span> + v.videoWidth + <span class="string">"x"</span> + v.videoHeight))</span><br><span class="line">  .catch(log);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="params">msg</span> =&gt;</span> div.innerHTML += <span class="string">"&lt;p&gt;"</span> + msg + <span class="string">"&lt;/p&gt;"</span>;</span><br></pre></td></tr></table></figure></p><p>PD: In chrome you can set a width of height and the video stream is set in these sizes, Firefox do a fitness distance, and Safari expect a exact match.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m attempting to run the following code in Safari in iOS 11. It should prompt the user to give access to their devices camera and then d
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>算法题</title>
    <link href="https://ru23.com/note/f4c4f07f.html"/>
    <id>https://ru23.com/note/f4c4f07f.html</id>
    <published>2018-11-25T11:38:57.000Z</published>
    <updated>2018-11-28T02:59:22.863Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法<br>二分查找算法<br>走台阶问题，每次可以走1步或者2步，走到第n个台阶有多少种方式<br>斐波那契数列, 递归，尾部递归，循环实现方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;排序算法&lt;br&gt;二分查找算法&lt;br&gt;走台阶问题，每次可以走1步或者2步，走到第n个台阶有多少种方式&lt;br&gt;斐波那契数列, 递归，尾部递归，循环实现方式&lt;/p&gt;

      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载发生了什么</title>
    <link href="https://ru23.com/note/e277deca.html"/>
    <id>https://ru23.com/note/e277deca.html</id>
    <published>2018-11-23T15:14:05.000Z</published>
    <updated>2018-11-28T02:59:22.847Z</updated>
    
    <content type="html"><![CDATA[<p>眼过千遍，不如手敲一遍。<br>文章参考：<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a></p><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理HTTP请求</li><li>页面渲染</li><li>断开TCP连接</li></ol><p>仔细思考这个问题，发现确实很深，这个过程涉及到的东西很多。这个问题的回答真的能够很好的考验一个web工程师的水平<br>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，<br>而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、<br>到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS查询顺序如下，若其中一步成功则直接跳到建立链接部分：</p><ul><li>浏览器自身DNS</li><li>操作系统DNS</li><li>本地hosts文件</li><li>向域名服务器发送请求</li></ul><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP三次握手(three-way handshaking)</p><ul><li>发送方:SYN(synchronize)</li><li>接收方:SYN/ACK(acknowledgement),确认信息传达</li><li>发送方:ACK - 确认接收方在线可收消息，握手结束</li><li>Accept</li></ul><p><img src="/img/2018/11/react-life-cycle.png" alt="TCP三次握手"></p><p>（1）第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。</p><p>（2）第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。</p><p>（3）第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。</p><p>TCP三次握手的的好处在于：发送方可以确认接收方仍然在线，不会因为白发送而浪费资源。</p><h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><p>为什么要把HTTPS协议放在这里讲呢？</p><ul><li>因为HTTP报文是包裹在TCP报文中发送的，服务端收到TCP报文时候会解包提取出HTTP报文。</li><li>但是这个过程中存在一定的风险。HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的危险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)</li></ul><p><img src="/img/2018/11/https.jpg" alt="HTTPS"></p><h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客TLS/SSL握手过程。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，<br><strong>是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡</strong>。</p><h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><p>构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。<br>HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。</p><p><strong>请求行：</strong><br>Method Request-URL HTTP-Version CRLF</p><p><strong>请求报头</strong><br>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p><h4 id="事件循环-Event-loop"><a href="#事件循环-Event-loop" class="headerlink" title="事件循环(Event loop)"></a>事件循环(Event loop)</h4><ol><li>js是单线程，js解析方法时，将同步任务排队到执行栈中，异步任务排队到事件队列中。</li><li>事件队列分为:<br>宏任务：setTimeout，setInterval，setImmediate，I/O，UI交互事件<br>微任务：process.nextTick，Promise.then</li><li>浏览器环境中执行方法时，先将执行栈中的任务清空，再将微任务推到执行栈中并清空，之后检查是否存在宏任务，若存在则取出一个宏任务，执行完成检查是否有微任务，以此循环…</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;眼过千遍，不如手敲一遍。&lt;br&gt;文章参考：&lt;a href=&quot;https://segmentfault.com/a/1190000006879700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>addEventListener （type, fn , true/false）绑定事件第三个参数作用以及利用事件的冒泡，实现事件委托</title>
    <link href="https://ru23.com/note/f078bfb.html"/>
    <id>https://ru23.com/note/f078bfb.html</id>
    <published>2018-11-23T07:00:11.000Z</published>
    <updated>2018-11-27T07:01:43.467Z</updated>
    
    <content type="html"><![CDATA[<p>第一个参数type，事件的类型，如click，mouseover等；</p><p>fn，事件监听执行的function；</p><p>第三参数，决定事件执行的过程（大概这样解释。。），捕获或者冒泡，首先我们看一张图片：</p><p><img src="/img/2018/11/shijianliu.gif" alt="事件流原理"></p><p>由此可以知道<br>　　1、一个完整的JS事件流是从window开始，最后回到window的一个过程<br>　　2、事件流被分为三个阶段(1~5)捕获过程、(5~6)目标过程、(6~10)冒泡过程</p><p>e.target和e.currentTarget</p><p>　　target和currentTarget都是event上面的属性，target是真正发生事件的DOM元素，而currentTarget是当前事件发生在哪个DOM元素上。</p><p>　　可以结合控制台打印出来的信息理解下，目标阶段也就是 target == currentTarget的时候。我没有打印它们两个因为太长了，所以打印了它们的nodeName，但是由于window没有nodeName这个属性，所以是undefined。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一个参数type，事件的类型，如click，mouseover等；&lt;/p&gt;
&lt;p&gt;fn，事件监听执行的function；&lt;/p&gt;
&lt;p&gt;第三参数，决定事件执行的过程（大概这样解释。。），捕获或者冒泡，首先我们看一张图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/201
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="js" scheme="https://ru23.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>nginx 80 443 并存</title>
    <link href="https://ru23.com/note/1cdb2279.html"/>
    <id>https://ru23.com/note/1cdb2279.html</id>
    <published>2018-11-21T17:02:23.000Z</published>
    <updated>2018-11-28T02:59:22.832Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ECS主机 nginx默认目录/etc/nginx</p><p>如果一站点既要80 http访问，又要443https访问。</p><p>要让https和http并存，不能在配置文件中使用ssl on，配置listen 443 ssl;</p><p>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line">    ssl_certificate &quot;cert/1483067_www.ru23.com.pem&quot;;</span><br><span class="line">    ssl_certificate_key &quot;cert/1483067_www.ru23.com.key&quot;;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里云ECS主机 nginx默认目录/etc/nginx&lt;/p&gt;
&lt;p&gt;如果一站点既要80 http访问，又要443https访问。&lt;/p&gt;
&lt;p&gt;要让https和http并存，不能在配置文件中使用ssl on，配置listen 443 ssl;&lt;/p&gt;
&lt;p&gt;实例&lt;br&gt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>彻底理解浏览器的缓存机制</title>
    <link href="https://ru23.com/note/5bb02710.html"/>
    <id>https://ru23.com/note/5bb02710.html</id>
    <published>2018-11-20T15:16:55.000Z</published>
    <updated>2018-11-21T08:11:26.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#概述" title="概述" target="_blank" rel="noopener"></a>概述</h2><p>浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，<strong>HTTP报文</strong>分为两种：</p><ul><li><p><strong>HTTP请求(Request)报文</strong>，报文格式为：<strong>请求行 – HTTP头(通用信息头，请求头，实体头) – 请求报文主体(只有POST才有报文主体)</strong>，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Request.jpg" alt="Request"><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Request-header.jpg" alt="Request"></p></li><li><p><strong>HTTP响应(Response)报文</strong>，报文格式为：<strong>状态行 – HTTP头(通用信息头，响应头，实体头) – 响应报文主体</strong>，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Response-header.jpg" alt="Response"><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Response.jpg" alt="Response"></p></li></ul><p>注：<strong>通用信息头</strong>指的是请求和响应报文都支持的头域，分别为Cache-Control、Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via；<strong>实体头</strong>则是实体信息的实体头域，分别为Allow、Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、Etag、Expires、Last-Modified、extension-header。这里只是为了方便理解，将通用信息头，响应头/请求头，实体头都归为了HTTP头。</p><h2 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#缓存过程分析" title="缓存过程分析" target="_blank" rel="noopener"></a>缓存过程分析</h2><p>浏览器与服务器通信的方式为应答模式，即是：<strong>浏览器发起HTTP请求 – 服务器响应该请求</strong>。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache.jpg" alt="cache"></p><p>由上图我们可以知道：</p><ul><li><p>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</p></li><li><p>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</p></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了，本文也将围绕着这点进行详细分析。为了方便大家理解，这里我们根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong> 。</p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#强制缓存" title="强制缓存" target="_blank" rel="noopener"></a>强制缓存</h3><p><strong>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程</strong>，强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</p><ul><li><p>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致），如下图：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.0.jpg" alt="cache"></p></li><li><p>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存(暂不分析)，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.1.jpg" alt="cache"></p></li><li><p>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.2.jpg" alt="cache"></p></li></ul><blockquote><p>那么强制缓存的缓存规则是什么？</p></blockquote><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是<strong>Expires</strong>和<strong>Cache-Control</strong>，其中Cache-Control优先级比Expires高。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Expires" title="Expires" target="_blank" rel="noopener"></a>Expires</h4><p>Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。</p><blockquote><p>Expires是HTTP/1.0的字段，但是现在浏览器默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？</p></blockquote><p>到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Cache-Control" title="Cache-Control" target="_blank" rel="noopener"></a>Cache-Control</h4><p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p><ul><li><p><strong>public</strong>：所有内容都将被缓存（客户端和代理服务器都可缓存）</p></li><li><p><strong>private</strong>：所有内容只有客户端可以缓存，<strong>Cache-Control的默认取值</strong></p></li><li><p><strong>no-cache</strong>：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</p></li><li><p><strong>no-store</strong>：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</p></li><li><p><strong>max-age=xxx (xxx is numeric)</strong>：缓存内容将在xxx秒后失效</p></li></ul><p>接下来，我们直接看一个例子，如下：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/example1.0.jpg" alt="example"></p><p>由上面的例子我们可以知道：</p><ul><li><p>HTTP响应报文中expires的时间值，是一个绝对值</p></li><li><p>HTTP响应报文中Cache-Control为max-age=600，是相对值</p></li></ul><p>由于Cache-Control的优先级比expires，那么直接根据Cache-Control的值进行缓存，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。</p><p>注：在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control相比于expires是更好的选择，所以同时存在时，只有Cache-Control生效。</p><p>了解强制缓存的过程后，我们拓展性的思考一下：</p><blockquote><p>浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？</p></blockquote><p><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/disk.jpg" alt="disk"><br>这里我们以博客的请求为例，状态码为灰色的请求则代表使用了强制缓存，请求对应的Size值则代表该缓存存放的位置，分别为<strong>from memory cache</strong> 和 <strong>from disk cache</strong>。</p><blockquote><p>那么from memory cache 和 from disk cache又分别代表的是什么呢？什么时候会使用from disk cache，什么时候会使用from memory cache呢？</p></blockquote><p>from memory cache代表使用内存中的缓存，from disk cache则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为memory –&gt; disk。</p><p>虽然我已经直接把结论说出来了，但是相信有不少人对此不能理解，那么接下来我们一起详细分析一下缓存读取问题，这里仍让以我的博客为例进行分析：<br><strong>访问<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a> –> 200 –&gt; 关闭博客的标签页 –&gt; 重新打开<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a> –> 200(from disk cache) –&gt; 刷新 –&gt; 200(from memory cache)</strong></p><p>过程如下：</p><ul><li><p>访问<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/1.0.jpg" alt="200"></p></li><li><p>关闭博客的标签页</p></li><li><p>重新打开<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/2.0.jpg" alt="from disk cache"></p></li><li><p>刷新<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/3.0.jpg" alt="from disk memory"></p></li></ul><blockquote><p>看到这里可能有人小伙伴问了，最后一个步骤刷新的时候，不是同时存在着from disk cache和from memory cache吗？</p></blockquote><p>对于这个问题，我们需要了解内存缓存(from memory cache)和硬盘缓存(from disk cache)，如下:</p><ul><li><p><strong>内存缓存(from memory cache)</strong>：内存缓存具有两个特点，分别是<strong>快速读取</strong>和<strong>时效性</strong>：</p><ul><li><p><strong>快速读取</strong>：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</p></li><li><p><strong>时效性</strong>：一旦该进程关闭，则该进程的内存则会清空。</p></li></ul></li><li><p><strong>硬盘缓存(from disk cache)</strong>：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。</p></li></ul><p>在浏览器中，浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#协商缓存" title="协商缓存" target="_blank" rel="noopener"></a>协商缓存</h3><p><strong>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</strong>，主要有以下两种情况：</p><ul><li><p>协商缓存生效，返回304，如下<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/304.jpg" alt="304"></p></li><li><p>协商缓存失效，返回200和请求结果结果，如下<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/200.jpg" alt="200"></p></li></ul><p>同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<strong>Last-Modified / If-Modified-Since和Etag / If-None-Match</strong>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。</p><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Last-Modified-If-Modified-Since" title="Last-Modified / If-Modified-Since" target="_blank" rel="noopener"></a>Last-Modified / If-Modified-Since</h4><ul><li><p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/last-modify.jpg" alt="last-modify"></p></li><li><p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/since.jpg" alt="since"></p></li></ul><h4 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Etag-If-None-Match" title="Etag / If-None-Match" target="_blank" rel="noopener"></a>Etag / If-None-Match</h4><ul><li><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Etag.jpg" alt="Etag"></p></li><li><p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Etag-match.jpg" alt="Etag-match"></p></li></ul><p>注：Etag / If-None-Match优先级高于Last-Modified / If-Modified-Since，同时存在则只有Etag / If-None-Match生效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#总结" title="总结" target="_blank" rel="noopener"></a>总结</h2><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/all.jpg" alt="all"></p><p>原文出自：<a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#%E6%80%BB%E7%BB%93</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#概述&quot; title=&quot;概述&quot; targ
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>History 对象</title>
    <link href="https://ru23.com/note/9a733bb3.html"/>
    <id>https://ru23.com/note/9a733bb3.html</id>
    <published>2018-11-19T02:49:28.000Z</published>
    <updated>2018-11-21T08:11:26.407Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年11月份看到的前端好文章</title>
    <link href="https://ru23.com/note/bc5cd3d4.html"/>
    <id>https://ru23.com/note/bc5cd3d4.html</id>
    <published>2018-11-17T15:52:52.000Z</published>
    <updated>2018-11-28T02:59:22.832Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/liyanlong/front-end-test" target="_blank" rel="noopener">https://github.com/liyanlong/front-end-test</a></p><p>HTTP 协议入门 <a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/08/http.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/liyanlong/front-end-test&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liyanlong/front-end-test&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>每周攻克一个技术点</title>
    <link href="https://ru23.com/note/d196d9f1.html"/>
    <id>https://ru23.com/note/d196d9f1.html</id>
    <published>2018-11-17T12:35:36.000Z</published>
    <updated>2018-11-21T08:11:26.435Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年11月17号整理的知识点（al）</title>
    <link href="https://ru23.com/note/fd1af4a9.html"/>
    <id>https://ru23.com/note/fd1af4a9.html</id>
    <published>2018-11-17T11:43:55.000Z</published>
    <updated>2018-11-23T07:12:49.798Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX18+BwUBcNu8GyxoRk/GKOpo8jQjEMVP2A42Vo/T+MGC5Ze8sETaYPeFeaYFEydX9GFmXa5Hnp2xCffzCxvwcHurbBOdvab0rJ65tLhows1fPnmx5LoIXYCDcxTnhR74i1AvVJTqPnvDzOhO+f+jMobsHbVC6h5nbAcg1k/2RFc3B3Q5gC2Vd/j6LqNpf8V9pcgt5l+jRxIV0cxFrzfDPAvArt7REhz24weLe9dCqUigq6Lr5GP767k2c0hF7RjxWKBAXwBGuJxudql2rBQMYSepsfxE7xu7UCW7cjQ4vsLwW8lnMdWqVL79hZqoAKzfojx0/xsePr5JrZ7zfoaxtxgu+L3P8BHHbJvnhkQjf3f2qFfLyga9c0ZVoI7rEMFlMHhj98cgL2VvYt/jJh6hNZydHj448H9vbPngqiH0604uUq6iuQjApqbqD5XG87U9n0F4nAiqkMh7DmavQXYEr/HQUVxZwj3sPWXMN7A3PTTHAx0FKqAT5t3ZvBDi9UOUW35OLRzNNlRqOKR5ThbWZ0i6MbeE2J3jdIs9AK1Cg1kKV+/8PL0RpDIkcGalQxMIC1I50sTuv/WeduwOBA/67Gmz5YGQ3z2IblIORuU0KqakwJZDMmOrR+C3mPAzjTV/dmRZFBJ73lqfqd9l/N80dn5xsAHhJ4zVGuQCCYksdgzQYbgmrhBHaybB9KiV7Gr9WOb/aFxRxfktweKlFrFteQJyDQNKy2upGqLvl8drhHAnXDES7vLT46XbifiaB0jh3NoGj5xJOfgMh7MBgBhAoiLkef0PvAY6cBjQdNXI324qUpk1ljIQfU1RH1vBMMMgQ2rseWMYiDFhh+dXMTljxsMcWyTx5pgVLH3QjRRJcDu51o8cLX77aklr4SUU9br+QqXVz7W0FdcTONGuc8lZv1WmXW094l5MAgodTovPS5qSvZi+ZSy8WkrZMpzjVG1+K6tnhG7UAnK+AhQrRHcksWI/q70Nfrlm/fYtWayChnFzAIzY5YVuT6cWqbVyDC+2igJwGutWdQddeJ9EeVismcrHHy6xGVTCMrNpdsQiOB8v5HcJVkx81fvzHTZySaCkRKfE36wXdUmKpg== </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>百度面试题</title>
    <link href="https://ru23.com/note/acc871bc.html"/>
    <id>https://ru23.com/note/acc871bc.html</id>
    <published>2018-11-13T10:11:23.000Z</published>
    <updated>2018-11-28T02:59:22.863Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 的使用主要考虑以下几点：</p><p>体积小，复杂度低<br>业务上移动端项目占比 70% 以上，Vue 的体积小，网络性能角度相比 React 更适合移动端<br>移动端一般巨型项目很少，从代码结构上来讲，使用 Vue 实现更符合我们的场景复杂度，React 更适合大型相对更复杂的 SPA<br>上手成本和迁移成本低<br>Vue 的学习和上手成本相对更低，团队成员对于 Vue 的认可度和热情也比较高<br>组件内双向绑定、数据依赖收集<br>组件内支持双向绑定，更方便的去进行组件内的数据响应与交互<br>独有的数据依赖收集模式使其默认的数据响应和渲染效率都要比 React 高一些<br>React 的使用主要考虑以下原因：</p><p>有一部分现有后台项目采用 React 技术栈，迭代和维护较少，老的项目如果没有足够的迁移价值则不额外投入资源<br>保留很小的一部分 React 技术生态也可以一定程度上保持一些技术多样性</p><p>一面<br>先完成笔试题</p><h4 id="1-实现一个函数，判断输入是不是回文字符串。"><a href="#1-实现一个函数，判断输入是不是回文字符串。" class="headerlink" title="1 实现一个函数，判断输入是不是回文字符串。"></a>1 实现一个函数，判断输入是不是回文字符串。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str!==<span class="string">'string'</span>|| str.constructor !== <span class="built_in">String</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=str.length<span class="number">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i,j)</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(i) !== str.charAt(j))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'adddddda'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'addddda'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'adddasd'</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="2-居中"><a href="#2-居中" class="headerlink" title="2 居中"></a>2 居中</h4><p> transform:translate(-50%,-50%); (ie9以上兼容)<br> flex;align-items: center;justify-content: center （ 移动端首选）</p><h4 id="3-实现效果，点击容器内的图标，图标边框变成border-1px-solid-red，点击空白处重置。"><a href="#3-实现效果，点击容器内的图标，图标边框变成border-1px-solid-red，点击空白处重置。" class="headerlink" title="3 实现效果，点击容器内的图标，图标边框变成border 1px solid red，点击空白处重置。"></a>3 实现效果，点击容器内的图标，图标边框变成border 1px solid red，点击空白处重置。</h4><h4 id="4-请简单实现双向数据绑定mvvm。"><a href="#4-请简单实现双向数据绑定mvvm。" class="headerlink" title="4 请简单实现双向数据绑定mvvm。"></a>4 请简单实现双向数据绑定mvvm。</h4><p> Object.defineProperty 来实现一个简单的数据双向绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        input.value = newVal;</span><br><span class="line">        div.innerHTML = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    obj.name = event.target.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="5-实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem-key-value-和getItem-key"><a href="#5-实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem-key-value-和getItem-key" class="headerlink" title="5 实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem(key,value)和getItem(key)"></a>5 实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem(key,value)和getItem(key)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance =<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">         <span class="keyword">super</span>(props)</span><br><span class="line">         <span class="keyword">this</span>.state=&#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//实例化</span></span><br><span class="line">    <span class="keyword">static</span> getInstance(name) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">            <span class="keyword">this</span>.instance = <span class="keyword">new</span> Storage(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setItem = <span class="function">(<span class="params">key, value</span>) =&gt;</span> localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(value)),</span><br><span class="line">    getItem = <span class="function"><span class="params">key</span> =&gt;</span> localStorage.getItem(key)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Q1-你的技术栈主要是react，那你说说你用react有什么坑点？"><a href="#Q1-你的技术栈主要是react，那你说说你用react有什么坑点？" class="headerlink" title="Q1 你的技术栈主要是react，那你说说你用react有什么坑点？"></a>Q1 你的技术栈主要是react，那你说说你用react有什么坑点？</h4><p>1.在JSX语法种，需要将 class改写成 className<br>2.react 打包后，项目部署完毕，刷新页面报错（404） 配置nginx 把目录指向index.html就可以解决<br>3.this.setState()会调用render方法，但并不会立即改变state的值，state是在render方法中赋值的。所以执行this.setState()后立即获取state的值是不变的。同样的直接赋值state并不会出发更新，因为没有调用render函数<br>4.监听事件和定时器需要在组件卸载的时候清除，否则切换路由的话这些事件还会一直执行下去<br>5.react列表渲染时为什么尽量不要把索引设置为key值<br>用state和jsx模板生成虚拟DOM，然后用虚拟DOM生成真实的 DOM，当我们state发生变化时,render函数执行，生成新的 虚拟DOM，然后比较新旧虚拟DOM的区别，找到区别，然后直接操作DOM，改变有区别的内容，这样比传统的操作DOM，极大的提升了性能。<br>再说虚拟DOM，虚拟DOM其实就是一个JS对象([‘div’,{class:’app’},’item’]),虚拟DOM核心之一是diff算法，diff算法的核心之一是同层对比，</p><p>因为react中渲染dom是通过render方式，也就是通过虚拟的dom与真实的存在的dom树比较之后发现哪不一样，再进行渲染，这样的渲染对于性能的提升很有帮助，所以键值在保证稳定性,唯一性的时候，在遍历寻找需要改变的地方时候就能很块的找见并对其进行操作，如果键值不是稳定的而是变化的就会使渲染更改dom的效率大大的打折。</p><p>我们如果不用索引为key , 程序能快速的对比出差异，反之也能对出差异，但是必须对比整个虚拟DOM，<br>这样，程序仍然能正常执行，只不过大大消耗了新旧虚拟DOM的对比的性能，并可能导致组件状态问题。</p><p>componentDidMount处理http请求，shouldComponentUpdate允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。<br>调用setState之后发生了什么<br>调用setState函数之后，react会将传入的参数对象与组件当前的状态合并，然后触发调和过程(Reconciliation)。以高效方式根据新的状态构建React元素树并且着手重新渲染整个UI界面。在React得到元素树之后，React会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。（按需渲染，不是全部渲染）<br>React中keys的作用是什么<br>Keys是React用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。在React Diff算法中React会借助元素的Key值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。</p><h4 id="Q2-我现在有一个button，要用react在上面绑定点击事件，我要怎么做？"><a href="#Q2-我现在有一个button，要用react在上面绑定点击事件，我要怎么做？" class="headerlink" title="Q2 我现在有一个button，要用react在上面绑定点击事件，我要怎么做？"></a>Q2 我现在有一个button，要用react在上面绑定点击事件，我要怎么做？</h4><p>第一种是在构造函数中绑定this，第二种是在render()函数里面绑定this，第三种就是使用箭头函数，都能实现上述方法；<br>但是哪一种方法的性能最好，是我们要考虑的问题。应该大家都知道答案：第一种的性能最好。<br>因为第一种，构造函数每一次渲染的时候只会执行一遍；<br>而第二种方法，在每次render()的时候都会重新执行一遍函数；<br>第三种方法的话，每一次render()的时候，都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。<br>第三种方法我们可以举一个例子，因为react判断是否需要进行render是浅层比较，简单来说就是通过===来判断的，如果state或者prop的类型是字符串或者数字，只要值相同，那么浅层比较就会认为其相同；<br>但是如果前者的类型是复杂的对象的时候，我们知道对象是引用类型，浅层比较只会认为这两个prop是不是同一个引用，如果不是，哪怕这两个对象中的内容完全一样，也会被认为是两个不同的prop。</p><h4 id="Q4-你说说event-loop吧"><a href="#Q4-你说说event-loop吧" class="headerlink" title="Q4 你说说event loop吧"></a>Q4 你说说event loop吧</h4><p>对象放在heap（堆）里，常见的基础类型和函数放在stack（栈）里，函数执行的时候在栈里执行。栈里函数执行的时候可能会调一些Dom操作，ajax操作和setTimeout定时器，这时候要等stack（栈）里面的所有程序先走 （注意：栈里的代码是先进后出）， 走完后再走WebAPIs，WebAPIs执行后的结果放在callback queue（回调的队列里，注意：队列里的代码先放进去的先执行），也就是当栈里面的程序走完之后，再从任务队列中读取事件，将队列中的事件放到执行栈中依次执行，这个过程是循环不断的。</p><p>1.所有同步任务都在主线程上执行，形成一个执行栈<br>2.主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。<br>3.一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列,将队列中的事件放到执行栈中依次执行<br>4.主线程从任务队列中读取事件，这个过程是循环不断的</p><h4 id="Q5-说说事件流吧"><a href="#Q5-说说事件流吧" class="headerlink" title="Q5 说说事件流吧"></a>Q5 说说事件流吧</h4><p>1、一个完整的JS事件流是从window开始，最后回到window的一个过程<br>2、事件流被分为三个阶段(1~5)捕获过程、(5~6)目标过程、(6~10)冒泡过程</p><h4 id="Q6-我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？"><a href="#Q6-我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？" class="headerlink" title="Q6 我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？"></a>Q6 我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？</h4><p>css反色属性 mix-blend-mode<br>CSS 文字反色</p><p>Q1 你为什么要离开上一家公司？</p><p>Q2 你觉得理想的前端地位是什么？</p><p>Q3 那你意识到问题所在，你又尝试过解决问题吗</p><p>Q1 说一下你上一家公司的一个整体开发流程吧</p><h4 id="react-的虚拟dom是怎么实现的"><a href="#react-的虚拟dom是怎么实现的" class="headerlink" title="react 的虚拟dom是怎么实现的"></a>react 的虚拟dom是怎么实现的</h4><p>在Web开发中,需要将数据的变化实时反映到UI上,这时就需要对DOM进行操作,也就是既状态改变了就要操作相应的DOM元素。<br>解决这个问题有一个非常直观的方法,可以大大降低视图更新的操作,那就是:<br>一旦状态发生了变化,就用模版引擎重新渲染整个视图,然后用新的视图更换掉旧的视图。<br>我们一定会想到:这样的做法会导致很多的问题。最大的问题就是这样做效率太低。<br>因为即使一个小小的状态变更都要重新构造整棵DOM,性价比太低;而且这样做的话,input和textarea的会失去原有的焦点。<br>最后的结论会是:对于局部的小视图的更新,没有问题;但是对于大型视图,如全局应用状态变更的时候,需要更新页面较多局部视图的时候,这样的做法不可取。<br>但是我们会发现,其实React就是这么做的,只是增加了Virtual DOM(虚拟DOM)来避免了整棵DOM 树变更。<br><em><br>DOM树的结构是非常庞大的,因此操作它们的时候要小心,轻微的变更就可能就会导致整个页面重排,这可是杀死性能的罪魁祸首。<br>相对于DOM 对象,原生的JavaScript 对象处理起来更快,而且更简单。并且我们可以很容易地用JavaScript 来构造DOM。<br>既然这样,是不是可以将上面的“状态变更-&gt;重新渲染整个视图”的方式稍微修改一下:<br>用JavaScript 对象表示DOM 信息和结构,当状态变更的时候,重新渲染这个JavaScript 的对象结构。<br>当然这样做其实没什么用,因为真正的页面其实没有改变。<br>但是可以用新渲染的对象树去和旧的树进行对比,记录这两棵树差异。记录下来的不同就是我们需要对页面真正的DOM 操作,<br>然后把它们应用在真正的DOM 树上,页面就变更了。<br>这样就可以做到:视图的结构确实是整个全新渲染了,但是最后操作DOM的时候确实只变更有不同的地方。这就是所谓的Diff算法。<br>为什么这样做就快了呢?因为:javaScript很快,DOM很慢。所以要尽量使用快的,减少使用慢的。</em><br>Diff算法包括以下三个步骤:<br>1、用JavaScript 对象结构表示DOM 树的结构;然后用这个树构建一个真正的DOM 树,插到文档当中。<br>2、当状态变更的时候,重新构造一棵新的对象树。然后用新的树和旧的树进行比较,记录两棵树差异。<br>3、把2所记录的差异应用到步骤1所构建的真正的DOM 树上,视图就更新了。<br>这种做法在React中叫做Virtual DOM(虚拟DOM)。由虚拟DOM来确保只对界面上真正变化的部分进行实际的DOM操作。<br><em><br>虚拟DOM本质上就是在JS 和DOM 之间做了一个缓存。可以类比CPU 和硬盘,既然硬盘这么慢,我们就在它们之间加个缓存:既然DOM 这么慢,我们就在它们JS 和DOM 之间加个缓存。CPU(JS)只操作内存(Virtual DOM),最后的时候再把变更写入硬盘(DOM)。</em><br>最后要特别说明一下:<br>Virtual DOM并没有完全实现DOM,Virtual DOM最主要的还是保留了Element之间的层次关系和一些基本属性。<br>因为DOM实在是太复杂,一个空的Element都复杂得能让你崩溃,并且几乎所有内容我们根本不需要关心。<br>所以Virtual DOM里每一个Element实际上只有几个属性,并且没有那么多乱七八糟的引用。</p><p>Q3 react 的渲染过程中，兄弟节点之间是怎么处理的？也就是key值不一样的时候。</p><h4 id="Q4-我现在有一个数组-1-2-3-4-，请实现算法，得到这个数组的全排列的数组，如-2-1-3-4-，-2-1-4-3-。。。。你这个算法的时间复杂度是多少"><a href="#Q4-我现在有一个数组-1-2-3-4-，请实现算法，得到这个数组的全排列的数组，如-2-1-3-4-，-2-1-4-3-。。。。你这个算法的时间复杂度是多少" class="headerlink" title="Q4 我现在有一个数组[1,2,3,4]，请实现算法，得到这个数组的全排列的数组，如[2,1,3,4]，[2,1,4,3]。。。。你这个算法的时间复杂度是多少"></a>Q4 我现在有一个数组[1,2,3,4]，请实现算法，得到这个数组的全排列的数组，如[2,1,3,4]，[2,1,4,3]。。。。你这个算法的时间复杂度是多少</h4><p>数组全排列：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(arr) &#123;</span><br><span class="line">       <span class="keyword">this</span>.arr = <span class="built_in">Array</span>.from(arr); <span class="comment">// 传入的数组</span></span><br><span class="line">       <span class="keyword">this</span>.result = [];<span class="comment">// 存储全排列结果</span></span><br><span class="line">       <span class="keyword">this</span>.len = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.run(<span class="number">0</span>); <span class="comment">// 首次创建对象时初始化方法</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   run(index) &#123;</span><br><span class="line">       <span class="comment">// 单遍历到数组末端时，将结果储存在result数组中，全排列次数加1</span></span><br><span class="line">       <span class="keyword">if</span> (index == <span class="keyword">this</span>.arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.result.push(<span class="built_in">Array</span>.from(<span class="keyword">this</span>.arr));</span><br><span class="line">           <span class="keyword">this</span>.len++;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = index; i &lt; <span class="keyword">this</span>.arr.length; i++) &#123;</span><br><span class="line">           [<span class="keyword">this</span>.arr[index], <span class="keyword">this</span>.arr[i]] = [<span class="keyword">this</span>.arr[i], <span class="keyword">this</span>.arr[index]];  <span class="comment">// 与下标为i的元素交换位置</span></span><br><span class="line">           <span class="keyword">this</span>.run(index + <span class="number">1</span>);                                              <span class="comment">// 剩下元素全排列</span></span><br><span class="line">           [<span class="keyword">this</span>.arr[index], <span class="keyword">this</span>.arr[i]] = [<span class="keyword">this</span>.arr[i], <span class="keyword">this</span>.arr[index]];  <span class="comment">// 复原数组</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> p = <span class="keyword">new</span> Permutation([<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(p.result);</span><br><span class="line"> <span class="built_in">console</span>.log(p.len);</span><br></pre></td></tr></table></figure></p><p>Q5 我现在有一个背包，容量为m，然后有n个货物，重量分别为w1,w2,w3…wn，每个货物的价值是v1,v2,v3…vn，w和v没有任何关系，请求背包能装下的最大价值。</p><p>四面</p><h4 id="Q1-请说一下你的上一家公司的研发发布流程。"><a href="#Q1-请说一下你的上一家公司的研发发布流程。" class="headerlink" title="Q1 请说一下你的上一家公司的研发发布流程。"></a>Q1 请说一下你的上一家公司的研发发布流程。</h4><p>1.需求会议，完成最终功能需求确认，<br>2.并且选取合适的sprint master，sprint master完成排期预估，并且主导每天的晨会，<br>3.UI原型图和需求会上传到tfs，<br>4.在git的master上新建分支，分支名字前端是</p><h4 id="Q2-你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。"><a href="#Q2-你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。" class="headerlink" title="Q2 你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。"></a>Q2 你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。</h4><p>webpack-dev-server<br>CommonsChunkPlugin<br>ExtractTextWebpackPlugin 分离 CSS<br>UglifyJsPlugin<br>DefinePlugin</p><p>　　代码热替换, HotModuleReplacementPlugin</p><p>　　生成html文件，HtmlWebpackPlugin</p><p>　　将css成生文件，而非内联，ExtractTextPlugin</p><p>　　报错但不退出webpack进程，NoErrorsPlugin</p><p>　　代码丑化，UglifyJsPlugin，开发过程中不建议打开</p><p>　　多个 html共用一个js文件(chunk)，可用CommonsChunkPlugin</p><p>　　清理文件夹，Clean</p><p>　　调用模块的别名ProvidePlugin，例如想在js中用[Math Processing Error]与jQuery对应起来</p><p>webpack DllPlugin、webpack DllReferencePlugin 预编译第三方库文件<br>使用 HappyPack 来加速代码构建<br>Q4 es6 class 的new实例和es5的new实例有什么区别</p><p>Q5 请手写实现一个promise<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.status = <span class="string">'pending'</span>;</span><br><span class="line">    self.value = <span class="literal">undefined</span>;</span><br><span class="line">    self.reason = <span class="literal">undefined</span>;</span><br><span class="line">    self.fullFiledArr = [];</span><br><span class="line">    self.rejectedArr = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">            self.value = value;</span><br><span class="line">            self.status = <span class="string">'fufilled'</span>;</span><br><span class="line">            self.fullFiledArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">                f.call(<span class="keyword">this</span>, self.value)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">            self.reason = reason;</span><br><span class="line">            self.status = <span class="string">'rejected'</span>;</span><br><span class="line">            self.rejectedArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">                f(self.reason)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        callback(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFufilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> myPromise2;</span><br><span class="line">    <span class="keyword">switch</span> (self.status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'pending'</span>:</span><br><span class="line">        myPromise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            self.fullFiledArr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> res = onFufilled(self.value);</span><br><span class="line">                    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                        res.then(resolve, reject);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// resolvePromise(myPromise,res);</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            self.rejectedArr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> res = onRejected(self.reason);</span><br><span class="line">                    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                        res.then(resolve, reject);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'fufilled'</span>:</span><br><span class="line">        myPromise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> res = onFufilled(self.value);</span><br><span class="line">                <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                    res.then(resolve, reject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        myPromise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> res = onRejected(self.reason);</span><br><span class="line">                <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                    res.then(resolve, reject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> myPromise2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"type error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> isUsed;</span><br><span class="line">    <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">"object"</span> || <span class="keyword">typeof</span> x === <span class="string">"function"</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">"function"</span>) &#123;</span><br><span class="line">                <span class="comment">//是一个promise的情况</span></span><br><span class="line">                then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (isUsed) <span class="keyword">return</span>;</span><br><span class="line">                    isUsed = <span class="literal">true</span>;</span><br><span class="line">                    resolvePromise(promise, y, resolve, reject);</span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (isUsed) <span class="keyword">return</span>;</span><br><span class="line">                    isUsed = <span class="literal">true</span>;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//仅仅是一个函数或者是对象</span></span><br><span class="line">                resolve(x)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isUsed) <span class="keyword">return</span>;</span><br><span class="line">            isUsed = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//返回的基本类型，直接resolve</span></span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> async1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'链式调用1'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> async2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'链式调用2'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">async1().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> async2();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">'pending'</span>;</span><br><span class="line">  <span class="keyword">var</span> doneList = [];</span><br><span class="line">  <span class="keyword">var</span> failList= [];</span><br><span class="line">  <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">done ,fail</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"pending"</span>:</span><br><span class="line">        doneList.push(done);</span><br><span class="line">        failList.push(fail);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'fulfilled'</span>:</span><br><span class="line">        done();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        fail();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    state = <span class="string">"fulfilled"</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = newValue;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;doneList.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = doneList[i](value);</span><br><span class="line">        <span class="keyword">if</span>(temp <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> newP =  temp;</span><br><span class="line">            <span class="keyword">for</span>(i++;i&lt;doneList.length;i++)&#123;</span><br><span class="line">                newP.then(doneList[i],failList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            value = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    state = <span class="string">"rejected"</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = newValue;</span><br><span class="line">      <span class="keyword">var</span> tempRe = failList[<span class="number">0</span>](value);</span><br><span class="line">      <span class="comment">//如果reject里面传入了一个promise，那么执行完此次的fail之后，将剩余的done和fail传入新的promise中</span></span><br><span class="line">      <span class="keyword">if</span>(tempRe <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> newP = tempRe;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;doneList.length;i++)&#123;</span><br><span class="line">            newP.then(doneList[i],failList[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果不是promise，执行完当前的fail之后，继续执行doneList</span></span><br><span class="line">        value =  tempRe;</span><br><span class="line">        doneList.shift();</span><br><span class="line">        failList.shift();</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fn(resolve,reject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          reject(<span class="string">'p 的结果'</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'p2拿到前面传入的值：'</span> + input)</span><br><span class="line">            resolve(<span class="string">'p2的结果'</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">p()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'p的结果:'</span> + res); <span class="keyword">return</span> <span class="string">'p then方法第一次返回'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value);<span class="keyword">return</span> <span class="string">'p then方法第一次错误的返回'</span>&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'p第一次then方法的返回：'</span>+res); <span class="keyword">return</span> <span class="string">'p then方法第二次返回'</span>&#125;)</span><br><span class="line">.then(p2)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'p2的结果：'</span> + res)&#125;);</span><br></pre></td></tr></table></figure><p>五面<br>Q1 你说一下你的技术有什么特点</p><p>Q2 说一下你觉得你最得意的一个项目？你这个项目有什么缺陷，弊端吗？</p><p>Q3 现在有那么一个团队，假如让你来做技术架构，你会怎么做？</p><p>Q4 说一下你上一家公司的主要业务流程，你参与到其中了吗？</p><h4 id="Q10-说一下浏览器的缓存机制"><a href="#Q10-说一下浏览器的缓存机制" class="headerlink" title="Q10 说一下浏览器的缓存机制"></a>Q10 说一下浏览器的缓存机制</h4><p><a href="http://note.youdao.com/noteshare?id=74c654bea765bb13b618c30ee90025f4" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=74c654bea765bb13b618c30ee90025f4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue 的使用主要考虑以下几点：&lt;/p&gt;
&lt;p&gt;体积小，复杂度低&lt;br&gt;业务上移动端项目占比 70% 以上，Vue 的体积小，网络性能角度相比 React 更适合移动端&lt;br&gt;移动端一般巨型项目很少，从代码结构上来讲，使用 Vue 实现更符合我们的场景复杂度，React 更
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里面试题</title>
    <link href="https://ru23.com/note/42f0994d.html"/>
    <id>https://ru23.com/note/42f0994d.html</id>
    <published>2018-11-12T08:09:57.000Z</published>
    <updated>2018-11-28T02:59:22.863Z</updated>
    
    <content type="html"><![CDATA[<p>基本类型、引用类型、typeof vs instanceof、类型转换、this、== vs ===、作用域、闭包、深浅拷贝、防抖、节流、原型</p><p>1.电话初探</p><h3 id="1-说一下你了解CSS盒模型。"><a href="#1-说一下你了解CSS盒模型。" class="headerlink" title="1.说一下你了解CSS盒模型。"></a>1.说一下你了解CSS盒模型。</h3><p>盒模型的组成大家肯定都懂，由里向外content,padding,border,margin.</p><p>盒模型是有两种标准的，一个是标准模型，一个是IE模型。</p><p>我就说了一下IE的怪异盒模型和标注浏览器的盒模型，然后可以通过box-sizing属性控制两种盒模型的变换。<br>W3C模型中：<br>　　　　　　CSS中的宽（width）=内容（content）的宽<br>　　　　　　CSS中的高（height）=内容（content）的高<br>IE模型中：<br>　　　　　　CSS中的宽（width）=内容（content）的宽+（border+padding）<em>2<br>　　　　　　CSS中的高（height）=内容（content）的高+（border+padding）</em>2</p><h3 id="2-说一下box-sizing的应用场景。"><a href="#2-说一下box-sizing的应用场景。" class="headerlink" title="2.说一下box-sizing的应用场景。"></a>2.说一下box-sizing的应用场景。</h3><p>box-sizing属性可以指定盒子模型种类，content-box指定盒子模型为W3C，后者为IE盒子模型。<br>一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，假如用标准 w3c 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2+1</em>2+10<em>2+200=262px、高 20</em>2+1<em>2</em>10<em>2+50=112px，盒子的实际大小为：宽 1</em>2+10<em>2+200=222px、高 1</em>2+10<em>2+50=72px；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2+200=240px、高 20*2+50=70px，盒子的实际大小为：宽 200px、高 50px</p><p>3.说一下你了解的弹性FLEX布局.</p><p>这个我也比较了解，各种概念和属性能想到的说了一大堆，也扯到了Grid布局，基本这个也没啥问题。</p><p>4.说一下一个未知宽高元素怎么上下左右垂直居中。</p><p>说了一下flex弹性布局的实现，说了一下兼容性，扯到了postcss的一些东西，然后说了一下常规的兼容性比较好的实现。</p><p>5.说一下原型链，对象，构造函数之间的一些联系。</p><p>这个我之前写过相关的文章，自己也有比较深入的理解，所以这个也不在话下，噼里啪啦说了一大堆，也不知道面试官听得咋样。</p><p>6.DOM事件的绑定的几种方式</p><p>说了三种，然后说了一些冒泡，默认事件，以及DOM2，DOM3级的一些标准。</p><p>7.说一下你项目中用到的技术栈，以及觉得得意和出色的点，以及让你头疼的点，怎么解决的。</p><p>这个因人而异，开放性问题，主要考察平时项目的一些积累吧，这个我回答感觉也比较ok。</p><p>8.有没有了解http2.0,websocket,https，说一下你的理解以及你所了解的特性。</p><p>这个我看过一些文章，但是没有什么印象，扯了一些概念，但是回答的不是很深。</p><p>第一轮电话初探，大约面了50分钟，就记起来这么多，还有一些细节问题可能淡忘了，总体来说，面的都是以基础为主，然后boss说把我简历推荐给内部，进行正式的社招流程。</p><p>一轮技术面</p><p>然后当天晚上一个女的面试官就给我打电话了，说八点半进行下一轮技术面试，没想到效率这么快，我都没怎么准备。<br>这次就直接省略自我介绍了。</p><p>1.webpack的入口文件怎么配置，多个入口怎么分割啥的，我也没太听清楚。</p><p>这个自己就说了一下自己的理解，以及自己用node写的多入口怎么配置，然后面试官说不是多入口配置，然后我又说了一下自己的理解，然后这题就过了。</p><p>2.我看到你的项目用到了Babel的一个插件：transform-runtime以及stage-2，你说一下他们的作用。</p><p>这个我也还算比较了解，就说了一下ES的一些API，比如generator啥的默认不转换，只转换语法，需要这个来转换，然后说profill啥的，扯了一下stage-1，stage-2，stage-3，这个问题回答还算清楚。</p><p>3.我看到你的webpack配置用到webpack.optimize.UglifyJsPlugin这个插件，有没有觉得压缩速度很慢，有什么办法提升速度。</p><p>这个我主要回答了一下，我之前也没怎么了解，一个想到是缓存原理，压缩只重新压缩改变的，还有就是减少冗余的代码，压缩只用于生产阶段，然后面试官问还有呢？我就说，还可以从硬件上提升，可以得到质的飞跃，比如换台I9处理器的电脑。。。。</p><p>4.简历上看见你了解http协议。说一下200和304的理解和区别</p><p>这个噼里啪啦说了一堆，协商缓存和强制缓存的区别，流程，还有一些细节，提到了expires,Cache-Control,If-none-match,Etag,last-Modified的匹配和特征，这一块之前有过比较详细的了解，所以还是应答如流。</p><p>5.DOM事件中target和currentTarget的区别</p><p>8.说一下项目中觉得可以改进的地方以及做的很优秀的地方？</p><p>这个也是因人而异，开放性问题，大致扯了一下自己的经历，也还OK。</p><p>最后问了有什么需要问的地方，面试到这里基本就结束了，大约面了一个多钟头，还是蛮累的。总体来说，回答的广度和深度以及细节都还算OK，觉得这轮面试基本没什么悬念。</p><p>二轮技术面</p><p>过了几天，接到阿里另一个面试官的电话，上一轮面试通过了，这次是二轮技术面，说估计一个钟头。这次依然跳过自我介绍之类的，直奔主题。</p><p>1.有没有自己写过webpack的loader,他的原理以及啥的，记得也不太清楚。</p><p>这个我就说了一下，然后loader配置啥的，也还ok。</p><p>2.有没有去研究webpack的一些原理和机制，怎么实现的。</p><p>这个我简单说了一下我自己了解的，因为这一块我也没深入去研究，所以说的应该比较浅。</p><p>3.babel把ES6转成ES5或者ES3之类的原理是什么，有没有去研究。</p><p>这一块我说了一下自己的思路，大致也还OK，我也没去深入研究怎么转换的，之前好像看过类似的文章，自己也只观察过转换之后的代码是啥样的，至于怎么转换的规则，真的没去深入观察。</p><p>4.git大型项目的团队合作，以及持续集成啥的。</p><p>这里我就说了一下自己了解的git flow方面的东西，因为没有实战经验，所以我就选择性说明了这一块的不熟练，然后面试官也没细问。</p><p>5.什么是函数柯里化？以及说一下JS的API有哪些应用到了函数柯里化的实现？</p><p>这个我就说了一下函数柯里化一些了解，以及在函数式编程的应用，最后说了一下JS中bind函数和数组的reduce方法用到了函数柯里化。</p><p>6.ES6的箭头函数this问题，以及拓展运算符。</p><p>这一块主要是API和概念的问题，扯了一些规范以及严格模式下其他情况this只想问题。</p><p>7.JS模块化Commonjs,UMD,CMD规范的了解，以及ES6的模块化跟其他几种的区别，以及出现的意义。</p><p>这个也是说了一下自己的理解和认知，自己对模块化历史以及一些规范都有所涉猎，这一块也还凑合。</p><p>8.说一下Vue实现双向数据绑定的原理，以及vue.js和react.js异同点，如果让你选框架，你怎么怎么权衡这两个框架，分析一下。</p><p>主要是发布订阅的设计模式，还有就是ES5的Object.defineProperty的getter和setter机制，然后顺便扯了一下Angular的脏检测，以及alvon.js最先用到这种方式。然后扯了一下vue.js和react.js异同点，权衡框架选择，调研分析之类，噼里啪啦说了一大堆。</p><p>9.我看你也写博客，说一下草稿的交互细节以及实现原理。</p><p>这一款就按照自己用过简书或者掘金，SG这类草稿的体验，详细说了一下，这个开放性问题，说到点基本就OK。</p><p>最后面试官问我有什么想问的吗，面试到这里基本就结束了，差不多面了一个小时，说过几天就会给答复，如果过了就会去阿里园区进行下一轮的技术面。</p><p>1.先自我介绍一下，说一下项目的技术栈，以及项目中遇到的一些问题啥的。</p><p>这个问题就是个开场白，简要说明一下，问题都不大，这个面试官就是第一次打电话给我面试的那个boss，所以技术那块boss心里也有个底细，所以没再问技术问题。</p><p>2.一个业务场景，面对产品不断迭代，以及需求的变动该怎么应对，具体技术方案实现。</p><p>具体业务场景，我就不一一描述，Boss在白板上画了一个大致的模块图，然后做了一些需求描述。<br>然后需求一层一层的改变，然后往下挖，主要是考察应对产品能力，以及对代码的可维护性和可拓展性这些考察，开放性问题，我觉得还考察一些沟通交流方面的能力，因为有些地方面试官故意说得很含糊，反正就是一个综合能力，以及对产品的理解，中间谈到怎么实现，也问到了一些具体的点，记得问到的有一下几个。</p><p>① 怎么获取一个元素到视图顶部的距离。<br>② getBoundingClientRect获取的top和offsetTop获取的top区别<br>③事件委托<br>第二个面试官</p><p>1.业务场景：比如说百度的一个服务不想让阿里使用，如果识别到是阿里的请求，然后跳转到404或者拒绝服务之类的？</p><p>主要是考察http协议头Referer，然后怎么判断是阿里的ip或者啥的，我也不太清楚。</p><p>2.二分查找的时间复杂度怎么求，是多少</p><p>。。。排序的还算清楚一点，查找真的不知所措，没回答上来，也没猜，意义不大，不会就是不会。</p><h3 id="3-XSS是什么，攻击原理，怎么预防。"><a href="#3-XSS是什么，攻击原理，怎么预防。" class="headerlink" title="3.XSS是什么，攻击原理，怎么预防。"></a>3.XSS是什么，攻击原理，怎么预防。</h3><p>这个很简单，跨站脚本攻击XSS(cross site scripting)，攻击类型主要有两种：反射型和存储型，简单说了一下如何防御：</p><p>①转义<br>②DOM解析白名单<br>③第三方库<br>④CSP<br>自己对web安全这块系统学习过，前前后后大约了解了很多，对于XSS,CSRF,点击劫持，Cookie安全，HTTP窃听篡改，密码安全，SQL注入，社会工程学都有一定了解，所以这个自然也不在话下。</p><p>XSS攻击是Web攻击中最常见的攻击方法之一，它是通过对网页注入可执行代码且成功地被浏览器<br>执行，达到攻击的目的，形成了一次有效XSS攻击，一旦攻击成功，它可以获取用户的联系人列<br>表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，有时候还和其他攻击方式同时实<br>施比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨<br>大的，是web安全的头号大敌。</p><p> HttpOnly</p><ol><li>输入检查<br>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用<br>Q：什么是CSRF攻击？举例？如何防御CSRF？<br>A：CSRF 即：跨站点请求伪造</li></ol><p>网站A ：为恶意网站。<br>网站B ：用户已登录的网站。<br>当用户访问 A站 时，A站 私自访问 B站 的操作链接，模拟用户操作。</p><p>假设B站有一个删除评论的链接：<code>http://b.com/comment/?type=delete&amp;id=81723</code><br>A站 直接访问该链接，就能删除用户在 B站 的评论。</p><p>4.线性顺序存储结构和链式存储结构有什么区别？以及优缺点。</p><p>我是类比JS数组和对象来回答的，反正还算凑合吧，自己都数据结构这块多少还是有些印象，所以入了前端，对数据结构和算法确实一直淡忘了。</p><p>5.分析一下移动端日历，PC端日历以及桌面日历的一些不同和需要注意的地方。</p><p>这个我能想到的大致都说了一遍，不同的场景交互和细节以及功能都有所偏差，以及功能的侧重都可能不同。</p><h4 id="6-白板写代码，用最简洁的代码实现数组去重。"><a href="#6-白板写代码，用最简洁的代码实现数组去重。" class="headerlink" title="6.白板写代码，用最简洁的代码实现数组去重。"></a>6.白板写代码，用最简洁的代码实现数组去重。</h4><p>我写了两种实现方式：<br>ES6实现：</p><p>[…new Set([1,2,3,1,’a’,1,’a’])]<br>ES5实现：</p><p>[1,2,3,1,’a’,1,’a’].filter(function(ele,index,array){<br>    return index===array.indexOf(ele)<br>})</p><p>闭包<br>Q：谈谈闭包<br>A：闭包指的是有权访问另一个函数作用域中变量的函数，创建闭包的常见方式，就是在一个函数内部创建另一个函数。要理解闭包，首先必须理解Javascript特殊的变量作用域。变量的作用域无非就是两种：全局变量和局部变量。函数内部可以直接读取全局变量，但在函数外部无法读取函数内的局部变量。如果我们有时候需要得到函数内的局部变量。<br>Q：那闭包的用处有什么？<br>A：闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>Q：使用闭包的问题？<br>A：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>由于IE9 之前的版本对JScript 对象和COM 对象使用不同的垃圾收集。因此闭包在IE 的这些版本中会导致一些特殊的问题。具体来说，如果闭包的作用域链中保存着一个HTML 元素，那么就意味着该元素将无法被销毁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基本类型、引用类型、typeof vs instanceof、类型转换、this、== vs ===、作用域、闭包、深浅拷贝、防抖、节流、原型&lt;/p&gt;
&lt;p&gt;1.电话初探&lt;/p&gt;
&lt;h3 id=&quot;1-说一下你了解CSS盒模型。&quot;&gt;&lt;a href=&quot;#1-说一下你了解CSS盒
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>save-dev 和--save的区别</title>
    <link href="https://ru23.com/note/3c8059e3.html"/>
    <id>https://ru23.com/note/3c8059e3.html</id>
    <published>2018-11-09T07:29:08.000Z</published>
    <updated>2018-11-09T07:29:49.512Z</updated>
    
    <content type="html"><![CDATA[<p>–save 会把依赖包名称添加到 package.json 文件 dependencies 键下，</p><p>devDependencies 下列出的模块，是我们<strong>开发</strong>时用的，比如 我们安装 js的压缩包gulp-uglify 时我们采用的是 “npm install –save-dev gulp-uglify ” 命令安装，因为我们在发布后用不到它，而只是在我们开发才用到它</p><p>–save-dev 则添加到 package.json 文件 devDependencies 键</p><p>dependencies 下的模块，则是我们<strong>发布后</strong>还需要依赖的模块，譬如像jQuery库或者Angular框架类似的，我们在开发完后后肯定还要依赖它们，否则就运行不了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;–save 会把依赖包名称添加到 package.json 文件 dependencies 键下，&lt;/p&gt;
&lt;p&gt;devDependencies 下列出的模块，是我们&lt;strong&gt;开发&lt;/strong&gt;时用的，比如 我们安装 js的压缩包gulp-uglify 时我们采用
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>vue组件之间传值</title>
    <link href="https://ru23.com/note/8b0c3b50.html"/>
    <id>https://ru23.com/note/8b0c3b50.html</id>
    <published>2018-11-09T07:25:13.000Z</published>
    <updated>2018-11-09T07:29:49.518Z</updated>
    
    <content type="html"><![CDATA[<p>vue2.0组件之间的传值</p><p>“down”—&gt;指的是下的意思，即父组件向子组件传值，用props；“up”—&gt;指的是上的意思，即子组件想父组件传值，用emit。</p><h3 id="1-子组件向父组件的传值："><a href="#1-子组件向父组件的传值：" class="headerlink" title="1.子组件向父组件的传值："></a>1.子组件向父组件的传值：</h3><p><em>Child.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;childToParent&quot;&gt;想父组件传值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      childToParent()&#123;</span><br><span class="line">        this.$emit(&quot;childToParentMsg&quot;, &quot;子组件向父组件传值&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><em>parent.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;Child v-on:childToParentMsg=&quot;showChildToParentMsg&quot; &gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &apos;./child/Child.vue&apos;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&quot;parent&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showChildToParentMsg:function(data)&#123;</span><br><span class="line">        alert(&quot;父组件显示信息：&quot;+data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;Child&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-父组件向子组件传值"><a href="#2-父组件向子组件传值" class="headerlink" title="2.父组件向子组件传值"></a>2.父组件向子组件传值</h3><p><em>parent.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;Child v-bind:parentToChild=&quot;parentMsg&quot;&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &apos;./child/Child.vue&apos;</span><br><span class="line">  export default&#123;</span><br><span class="line">     name:&quot;parent&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        parentMsg:&apos;父组件向子组件传值&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;Child&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><em>child.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;span&gt;子组件显示信息：&#123;&#123;parentToChild&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&quot;parentToChild&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-采用eventBus-js传值—兄弟组件间的传值"><a href="#3-采用eventBus-js传值—兄弟组件间的传值" class="headerlink" title="3.采用eventBus.js传值—兄弟组件间的传值"></a>3.采用eventBus.js传值—兄弟组件间的传值</h3><p><em>eventBus.js</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'Vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure></p><p><em>App.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;secondChild&gt;&lt;/secondChild&gt;</span><br><span class="line">    &lt;firstChild&gt;&lt;/firstChild&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import FirstChild from &apos;./components/FirstChild&apos;</span><br><span class="line">import SecondChild from &apos;./components/SecondChild&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    FirstChild,</span><br><span class="line">    SecondChild,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><em>FirstChild.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;firstChild&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入文字&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;showMessage&quot;&gt;向组件传值&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import bus from &apos;../assets/eventBus&apos;;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &apos;firstChild&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &apos;你好&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showMessage () &#123;</span><br><span class="line">       alert(this.message)</span><br><span class="line">        bus.$emit(&apos;userDefinedEvent&apos;, this.message);//传值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><em>SecondChild.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;SecondChild&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import bus from &apos;../assets/eventBus&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&apos;SecondChild&apos;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &apos;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            var self = this;</span><br><span class="line">            bus.$on(&apos;userDefinedEvent&apos;,function(message)&#123;</span><br><span class="line">                self.message = message;//接值</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue2.0组件之间的传值&lt;/p&gt;
&lt;p&gt;“down”—&amp;gt;指的是下的意思，即父组件向子组件传值，用props；“up”—&amp;gt;指的是上的意思，即子组件想父组件传值，用emit。&lt;/p&gt;
&lt;h3 id=&quot;1-子组件向父组件的传值：&quot;&gt;&lt;a href=&quot;#1-子组件向父
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>$nextTick的作用</title>
    <link href="https://ru23.com/note/891492f1.html"/>
    <id>https://ru23.com/note/891492f1.html</id>
    <published>2018-11-09T07:23:02.000Z</published>
    <updated>2018-11-09T07:29:49.509Z</updated>
    
    <content type="html"><![CDATA[<p>请看如下一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">'/api/article'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = res.data.data.list</span><br><span class="line">        <span class="comment">// ref  list 引用了ul元素，我想把第一个li颜色变为红色</span></span><br><span class="line">        <span class="keyword">this</span>.$refs.list.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>].style.color = <span class="string">'red'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在获取到数据后赋值给数据模型中list属性，然后想引用ul元素找到第一个li把它的颜色变为红色，但是事实上，这个要报错了，我们知道，在执行这句话时，ul下面并没有li，也就是说刚刚进行的赋值操作，当前并没有引起视图层的更新。因此，在这样的情况下，vue给我们提供了$nextTick方法，如果我们想对未来更新后的视图进行操作，我们只需要把要执行的函数传递给this.$nextTick方法，vue就会给我们做这个工作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> that.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">"/api/article"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.list = res.data.data.list;</span><br><span class="line">            <span class="comment">// ref  list 引用了ul元素，我想把第一个li颜色变为红色</span></span><br><span class="line">             <span class="keyword">this</span>.$refs.list.getElementsByTagName(<span class="string">"li"</span>)[<span class="number">0</span>].style.color =<span class="string">"red"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>  这就是一个this.$nextTick的实现，其中利用了优雅降序的巧妙手法，使代码尽可能优化。而且还提供了promise的写法，虽然我们不经常用，但是有总比没有好。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;请看如下一段代码：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>html5 Drop 事件详解（摘自w3school）</title>
    <link href="https://ru23.com/note/40559693.html"/>
    <id>https://ru23.com/note/40559693.html</id>
    <published>2018-11-09T07:22:12.000Z</published>
    <updated>2018-11-10T01:15:54.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置元素为可拖放"><a href="#设置元素为可拖放" class="headerlink" title="设置元素为可拖放"></a>设置元素为可拖放</h3><p>首先，为了使元素可拖动，把 draggable 属性设置为 true ：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="拖动什么-ondragstart-和-setData"><a href="#拖动什么-ondragstart-和-setData" class="headerlink" title="拖动什么 - ondragstart 和 setData()"></a>拖动什么 - ondragstart 和 setData()</h3><p>然后，规定当元素被拖动时，会发生什么。<br>在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。<br>dataTransfer.setData() 方法设置被拖数据的数据类型和值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">ev.dataTransfer.setData(<span class="string">"Text"</span>, ev.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，数据类型是 “Text”，值是可拖动元素的 id (“drag1”)。</p><h3 id="放到何处-ondragover"><a href="#放到何处-ondragover" class="headerlink" title="放到何处 - ondragover"></a>放到何处 - ondragover</h3><p>ondragover 事件规定在何处放置被拖动的数据。<br>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>这要通过调用 ondragover 事件的 event.preventDefault() 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()</span><br></pre></td></tr></table></figure></p><h3 id="进行放置-ondrop"><a href="#进行放置-ondrop" class="headerlink" title="进行放置 - ondrop"></a>进行放置 - ondrop</h3><p>当放置被拖数据时，会发生 drop 事件。<br>在上面的例子中，ondrop 属性调用了一个函数，drop(event)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line"><span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">"Text"</span>);</span><br><span class="line">ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>代码解释：</strong></p><ol><li>调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）</li><li>通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</li><li>被拖数据是被拖元素的 id (“drag1”)</li><li>把被拖元素追加到放置元素（目标元素）中</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设置元素为可拖放&quot;&gt;&lt;a href=&quot;#设置元素为可拖放&quot; class=&quot;headerlink&quot; title=&quot;设置元素为可拖放&quot;&gt;&lt;/a&gt;设置元素为可拖放&lt;/h3&gt;&lt;p&gt;首先，为了使元素可拖动，把 draggable 属性设置为 true ：&lt;br&gt;&lt;figur
      
    
    </summary>
    
    
      <category term="html5" scheme="https://ru23.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>vue.js 兄弟组件传值</title>
    <link href="https://ru23.com/note/83060485.html"/>
    <id>https://ru23.com/note/83060485.html</id>
    <published>2018-11-09T07:20:45.000Z</published>
    <updated>2018-11-09T07:29:49.514Z</updated>
    
    <content type="html"><![CDATA[<p>1、兄弟之间传递数据需要借助于事件车，通过事件车的方式传递数据</p><p>2、创建一个Vue的实例，让各个兄弟共用同一个事件机制。</p><p>3、传递数据方，通过一个事件触发bus.$emit(方法名，传递的数据)。</p><p>4、接收数据方，通过mounted(){}触发bus.$on(方法名，function(接收数据的参数){用该组件的数据接收传递过来的数据})，此时函数中的this已经发生了改变，可以使用箭头函数。</p><p>源码：</p><p>我们可以创建一个单独的js文件<strong>eventVue.js,</strong>内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue</span><br></pre></td></tr></table></figure></p><p>假如父组件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;components-a&gt;&lt;/components-a&gt;</span><br><span class="line">     &lt;components-b&gt;&lt;/components-b&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p><strong>组件a</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;div class=&quot;components-a&quot;&gt;</span><br><span class="line">           &lt;button @click=&quot;abtn&quot;&gt;A按钮&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventVue from &apos;../../js/event.js&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    ...</span><br><span class="line">      methods:&#123;</span><br><span class="line">           abtn:function()&#123;</span><br><span class="line">                   eventVue .$emit(&quot;myFun&quot;,&quot;组件A的值&quot;)   //$emit这个方法会触发一个事件</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>组件b</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div class=&quot;components-a&quot;&gt;</span><br><span class="line">         &lt;div&gt;&#123;&#123;btext&#125;&#125;&lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventVue from &apos;../../js/event.js&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    ....</span><br><span class="line">   created:function()&#123;</span><br><span class="line">       this.bbtn();</span><br><span class="line">   &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">       bbtn:function()&#123;</span><br><span class="line">            eventVue .$on(&quot;myFun&quot;,(message)=&gt;&#123;   //这里最好用箭头函数，不然this指向有问题</span><br><span class="line">                 this.btext = message      </span><br><span class="line">            &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、兄弟之间传递数据需要借助于事件车，通过事件车的方式传递数据&lt;/p&gt;
&lt;p&gt;2、创建一个Vue的实例，让各个兄弟共用同一个事件机制。&lt;/p&gt;
&lt;p&gt;3、传递数据方，通过一个事件触发bus.$emit(方法名，传递的数据)。&lt;/p&gt;
&lt;p&gt;4、接收数据方，通过mounted
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端迷</title>
  
  <subtitle>frank，前端开发爱好者，沉迷前端，无法自拔,欢迎一切技术交流（不局限于前端），邮箱fanqianweb@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ru23.com/"/>
  <updated>2018-12-06T10:35:16.918Z</updated>
  <id>https://ru23.com/</id>
  
  <author>
    <name>frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http请求报文介绍</title>
    <link href="https://ru23.com/note/ef1b6cee.html"/>
    <id>https://ru23.com/note/ef1b6cee.html</id>
    <published>2018-12-06T06:11:28.000Z</published>
    <updated>2018-12-06T10:35:16.918Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP报文是面向文本的，报文中的每一个字段都是一些ASCII码串，各个字段的长度是不确定的。HTTP有两类报文：请求报文和响应报文。</p><h3 id="一、一个HTTP请求报文由请求行（request-line）、请求头部（header）、空行和请求数据4个部分组成"><a href="#一、一个HTTP请求报文由请求行（request-line）、请求头部（header）、空行和请求数据4个部分组成" class="headerlink" title="一、一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成"></a>一、一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成</h3><p>下图给出了请求报文的一般格式。<br><img src="/img/2018/12/http-message.png" alt="HTTP请求报文1"><br><img src="/img/2018/10/http-message2.jpg" alt="HTTP请求报文-详解"></p><p>以下逐步分析各个数据部分的作用。</p><p>　　1、请求行</p><p>　　　　请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。</p><p>　　　　例如打开路径<a href="http://www.baidu.com/index.php，用火狐浏览器可以查看到请求报文为：" target="_blank" rel="noopener">http://www.baidu.com/index.php，用火狐浏览器可以查看到请求报文为：</a></p><p>　　　　GET /index.php HTTP/1.1</p><p>　　　　因此用空格分隔之后得到的信息为</p><p>　　　　(1)请求方法:  GET</p><p>　　　　(2)URL信息:  /index.php</p><p>　　　　(3)HTTP协议版本:  HTTP/1.1　　</p><p>　　2、请求头部</p><p>　　　　User-Agent：浏览器的具体类型　　如：User-Agent：Mozilla/5.0 (Windows NT 6.1; rv:17.0) Gecko/20100101 Firefox/17.0</p><p> 　　　  Accept：浏览器支持哪些数据类型　　如：Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p><p>　　　　Accept-Charset：浏览器采用的是哪种编码　　如：Accept-Charset: ISO-8859-1</p><p>　　　　Accept-Encoding：浏览器支持解码的数据压缩格式　　如：Accept-Encoding: gzip, deflate</p><p>　　　　Accept-Language：浏览器的语言环境　　如：Accept-Language zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</p><p> 　　　  Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。Host:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>　　　   Connection：表示是否需要持久连接。Keep-Alive/close，HTTP1.1默认是持久连接，它可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。如：Connection: Keep-Alive</p><p>　　　　Content-Length：表示请求消息正文的长度。对于POST请求来说Content-Length必须出现。</p><p>　　　　Content-Type：WEB服务器告诉浏览器自己响应的对象的类型和字符集。例如：Content-Type: text/html; charset=’gb2312’</p><p>　　　　Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip</p><p>　　　　Content-Language：WEB服务器告诉浏览器自己响应的对象的语言。</p><p>　　　　Cookie：最常用的请求头，浏览器每次都会将cookie发送到服务器上，允许服务器在客户端存储少量数据。</p><p> 　　　  Referer：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。服务器能知道你是从哪个页面过来的。Referer: <a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a></p><h3 id="二、HTTP响应报文"><a href="#二、HTTP响应报文" class="headerlink" title="二、HTTP响应报文"></a>二、HTTP响应报文</h3><p> 　HTTP响应报文与HTTP请求报文是对应的，也是分为三个部分。</p><p>　　1、响应行</p><p>　　2、响应头</p><p>　　3、响应体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK　　//响应行</span><br><span class="line">Date: Sat, 31 Dec 2005 23:59:59 GMT</span><br><span class="line">Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">Content-Length: 122</span><br><span class="line"></span><br><span class="line">＜html＞</span><br><span class="line">＜head＞</span><br><span class="line">＜title＞Wrox Homepage＜/title＞</span><br><span class="line">＜/head＞</span><br><span class="line">＜body＞</span><br><span class="line">＜!-- body goes here --＞</span><br><span class="line">＜/body＞</span><br><span class="line">＜/html＞</span><br></pre></td></tr></table></figure><p><img src="/img/2018/10/xiangying.jpg" alt="HTTP响应报文"><br><img src="/img/2018/10/xiangying2.jpg" alt="HTTP响应报文-详解"></p><p>HTTP响应报文常用属性：</p><p>Cache-Control<br>响应输出到客户端后，服务端通过该报文头属告诉客户端如何控制响应内容的缓存。<br>下面，的设置让客户端对响应内容缓存3600秒，也即在3600秒内，如果客户再次访问该资源，直接从客户端的缓存中返回内容给客户，不要再从服务端获取（当然，这个功能是靠客户端实现的，服务端只是通过这个属性提示客户端“应该这么做”，做不做，还是决定于客户端，如果是自己宣称支持HTTP的客户端，则就应该这样实现）。</p><p>Cache-Control: max-age=3600</p><p>ETag</p><p>一个代表响应服务端资源（如页面）版本的报文头属性，如果某个服务端资源发生变化了，这个ETag就会相应发生变化。它是Cache-Control的有益补充，可以让客户端“更智能”地处理什么时候要从服务端取资源，什么时候可以直接从缓存中返回响应。</p><p>ETag: “737060cd8c284d8af7ad3082f209582d”</p><p>Location</p><p>我们在Asp.net中让页面Redirect到一个某个A页面中，其实是让客户端再发一个请求到A页面，这个需要Redirect到的A页面的URL，其实就是通过响应报文头的Location属性告知客户端的，如下的报文头属性，将使客户端redirect到iteye的首页中：</p><p>Location: <a href="http://www.google.com.hk" target="_blank" rel="noopener">http://www.google.com.hk</a></p><p>Set-Cookie</p><p>服务端可以设置客户端的Cookie，其原理就是通过这个响应报文头属性实现的。</p><p>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</p><p>HTTP响应体：如果请求的是HTML页面，那么返回的就是HTML代码。如果是JS就是JS代码。</p><p>HTTP响应头：而设置Cookie，缓存等信息就是在响应头属性设置的。</p><p>HTTP响应行：主要是设置响应状态等信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP报文是面向文本的，报文中的每一个字段都是一些ASCII码串，各个字段的长度是不确定的。HTTP有两类报文：请求报文和响应报文。&lt;/p&gt;
&lt;h3 id=&quot;一、一个HTTP请求报文由请求行（request-line）、请求头部（header）、空行和请求数据4个部分组成
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="http" scheme="https://ru23.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>2018年12月前端文章分享</title>
    <link href="https://ru23.com/note/f04f102c.html"/>
    <id>https://ru23.com/note/f04f102c.html</id>
    <published>2018-12-05T10:10:17.000Z</published>
    <updated>2018-12-13T10:17:32.642Z</updated>
    
    <content type="html"><![CDATA[<p>实现简单的MVVM：<a href="https://github.com/louzhedong/blog/issues/4" target="_blank" rel="noopener">https://github.com/louzhedong/blog/issues/4</a></p><p>手写实现bind，call，apply：<a href="https://www.jianshu.com/p/539064c644bb" target="_blank" rel="noopener">https://www.jianshu.com/p/539064c644bb</a></p><p><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">https://juejin.im/post/59bfe84351882531b730bac2</a></p><p>深入详解函数的柯里化：<a href="https://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="noopener">https://www.jianshu.com/p/5e1899fe7d6b</a></p><p>webpack4.0性能优化：<a href="https://juejin.im/post/5bf511eae51d454e243dbe55" target="_blank" rel="noopener">https://juejin.im/post/5bf511eae51d454e243dbe55</a></p><p>vue3.0尝鲜 – 摒弃Object.defineProperty，基于 Proxy 的观察者机制探索：<a href="https://juejin.im/post/5bf3e632e51d452baa5f7375" target="_blank" rel="noopener">https://juejin.im/post/5bf3e632e51d452baa5f7375</a></p><p>彻底弄懂原型和原型链：<a href="https://juejin.im/post/5bf3d8936fb9a04a072ffba1" target="_blank" rel="noopener">https://juejin.im/post/5bf3d8936fb9a04a072ffba1</a></p><p>关于JSON.parse(JSON.stringify(obj))实现深拷贝应该注意的坑 ：<a href="https://www.jianshu.com/p/b084dfaad501" target="_blank" rel="noopener">https://www.jianshu.com/p/b084dfaad501</a></p><p>css margin重叠问题及解决方法（BFC）：<a href="https://github.com/aermin/blog/issues/40" target="_blank" rel="noopener">https://github.com/aermin/blog/issues/40</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现简单的MVVM：&lt;a href=&quot;https://github.com/louzhedong/blog/issues/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/louzhedong/blog/issues/
      
    
    </summary>
    
      <category term="前端分享" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>对css重绘和重排的理解，两个有什么不同</title>
    <link href="https://ru23.com/note/8463a2db.html"/>
    <id>https://ru23.com/note/8463a2db.html</id>
    <published>2018-12-01T13:49:16.000Z</published>
    <updated>2018-12-03T02:08:48.102Z</updated>
    
    <content type="html"><![CDATA[<p>这一题考的其实是网页性能的问题，我们先理解下对网页性能产生影响到因素，了解下网页是怎么生成的</p><p>网页生成的过程，大致可以分为五步：</p><ol><li>html代码转化为dom</li><li>css代码转化为cssom</li><li>结合dom和cssom，生成一颗渲染树（包含每个节点的视觉信息）</li><li>生成布局layout，即将所有的渲染树的节点进行平面合成</li><li>将布局绘制paint在屏幕上</li></ol><p>重绘和重排</p><p>网页生成的时候，至少会渲染一次，用户访问的过程中，还会不断的重新渲染<br>以下三种情况会导致页面重新渲染<br>修改dom<br>修改样式表<br>用户事件<br>重新渲染，就需要重新生成布局和重新绘制，前者叫重排reflow，后者叫重绘repaint<br>需要注意的是重绘不一定需要重排，比如改变网页元素的颜色，就会只发生重绘，不会发生重排，因为布局没有改变，但是重排一定会导致重绘，如何改变一个网页元素的位置，就会同时触发重排和重绘，因为布局改变了</p><p>对于性能的影响<br>重绘和重排会不断触发，这是不可避免的，但是，他们是非常耗费资源的，是导致网页性能低下根本原因<br>要提高网页性能，就是要降低重排和重绘的频率和成本，尽量少触发重新渲染</p><p>一般来说，样式的写操作之后，如果有下面这些属性的读操作，都会引发浏览器立即重新渲染<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offsetTop/offsetLeft/offsetWidth/offsetHeight</span><br><span class="line">scrollTop/scrollLeft/scrollWidth/scrollHeight</span><br><span class="line">clientTop/clientLeft/clientWidth/clientHeight</span><br><span class="line">getComputeStyle()</span><br></pre></td></tr></table></figure></p><p>所以，从性能角度考虑，尽量不要把读操作和写操作，放在一个语句里，一般的规则是<br>样式表越简单，重绘和重排就越快<br>重排和重绘的dom层级越高，成本就越高<br>table元素的重绘和重排成本，要高于div元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一题考的其实是网页性能的问题，我们先理解下对网页性能产生影响到因素，了解下网页是怎么生成的&lt;/p&gt;
&lt;p&gt;网页生成的过程，大致可以分为五步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html代码转化为dom&lt;/li&gt;
&lt;li&gt;css代码转化为cssom&lt;/li&gt;
&lt;li&gt;结合dom和c
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="css" scheme="https://ru23.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>React 坑点总结</title>
    <link href="https://ru23.com/note/9a17caa7.html"/>
    <id>https://ru23.com/note/9a17caa7.html</id>
    <published>2018-11-29T03:36:28.000Z</published>
    <updated>2018-11-29T09:52:15.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="setState-异步特性"><a href="#setState-异步特性" class="headerlink" title="setState 异步特性"></a>setState 异步特性</h3><p>基于性能考虑，React 通常是批量合并更新，调用 setState() 之后，this.state 并没有马上修改，而是创建了一个中间态作为过渡。</p><p>但是有些例外情况，它是同步执行的，比如：eventListeners，Ajax，setTimeout 等。<br>原因是这些 JS 原生的 API 不在 React 的上下文控制范围，无法进行优化。</p><p>如何解决？</p><p>setState 第二个参数可以传入 callback<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'State before : '</span> + <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state));</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">dollars: <span class="number">50</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Here state will always be updated to latest version!'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'State after : '</span> + <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="shouldComponentUpdate-检查"><a href="#shouldComponentUpdate-检查" class="headerlink" title="shouldComponentUpdate() 检查"></a>shouldComponentUpdate() 检查</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AutocompleteItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextProps.url !== <span class="keyword">this</span>.props.url ||</span><br><span class="line">      nextProps.selected !== <span class="keyword">this</span>.props.selected;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;props&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> selectedClass = props.selected === <span class="literal">true</span> ? <span class="string">"selected"</span> : <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> path = parseUri(props.url).path;</span><br><span class="line">    path = path.length &lt;= <span class="number">0</span> ? props.url : <span class="string">"..."</span> + path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li</span><br><span class="line">        onMouseLeave=&#123;props.onMouseLeave&#125;</span><br><span class="line">        className=&#123;selectedClass&#125;&gt;</span><br><span class="line">        &lt;i className=<span class="string">"ion-ios-eye"</span></span><br><span class="line">           data-image=&#123;props.image&#125;</span><br><span class="line">           data-url=&#123;props.url&#125;</span><br><span class="line">           data-title=&#123;props.title&#125;</span><br><span class="line">           onClick=&#123;props.handlePlanetViewClick&#125;/&gt;</span><br><span class="line">        &lt;span</span><br><span class="line">          onMouseEnter=&#123;props.onMouseEnter&#125;&gt;</span><br><span class="line">          &lt;div className=<span class="string">"dot bg-mint"</span>/&gt;</span><br><span class="line">          &#123;path&#125;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;setState-异步特性&quot;&gt;&lt;a href=&quot;#setState-异步特性&quot; class=&quot;headerlink&quot; title=&quot;setState 异步特性&quot;&gt;&lt;/a&gt;setState 异步特性&lt;/h3&gt;&lt;p&gt;基于性能考虑，React 通常是批量合并更新，调用 
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>12月份todolist</title>
    <link href="https://ru23.com/note/4bf41c9b.html"/>
    <id>https://ru23.com/note/4bf41c9b.html</id>
    <published>2018-11-28T14:45:45.000Z</published>
    <updated>2018-12-03T02:08:48.100Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="https://ru23.com/note/3d3ed3e0.html"/>
    <id>https://ru23.com/note/3d3ed3e0.html</id>
    <published>2018-11-28T08:21:52.000Z</published>
    <updated>2018-11-29T09:52:15.743Z</updated>
    
    <content type="html"><![CDATA[<p>手写数组去重<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;i&lt;arr.length+<span class="number">1</span>;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(arr[i]===arr[j])&#123;</span><br><span class="line">               arr.splice(j,<span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure><p>手写数组倒序<br>各种场景下的this指针问题<br>冒泡，选择，插入排序用js怎么写，时间复杂度多少空间复杂度多少<br>http和https有什么区别 端口号多少<br>三次握手过程<br>四次挥手过程<br>域名解析过程<br>三列布局中间固定左右自适应的三种写法<br>变量提升问题<br>那些数组方法会生成一个新数组，那些不会生成新数组<br>上面那些问题回答不上来说明你不仅前端不行，上大学也没好好学习，赶紧滚去学习吧</p><p>下面这些问题是针对一般学习前端两个月都应该会的问题，如果已经学习很久了这些问题还是有盲区的化说明前端不适合你，或者你不适合前端<br>怎样理解语义化<br>怎样理解表现与样式分离<br>什么是混杂模式严格模式，怎样触发<br>常见的mate 标签<br>什么是文本流 文档流 dom树<br>什么是行元素 什么是块元素 通过那些属性可以让行元素转换成块元素<br>可以设置宽高的行元素叫什么<br>css常见几种选择器<br>选择器的权重值分别多少<br>js中有几种变量类型 哪些放在堆 哪些放在栈<br>变量类型隐形转换问题<br>如何声明函数</p><p>下面这些问题是一个前端开发应该会的，如果不会就别去找工作让面试官鄙视你<br>闭包是什么，怎么形成这种结构 有什么用处何危害 有没有实际的案例<br>settimeout在不同的情况下的执行顺序<br>settimeout中的this指针指向<br>手写继承实现<br>手写深浅数组克隆<br>手写一个方法取出url后面的参数<br>几种跨域的方法<br>手写ajax函数兼容ie和标准浏览器<br>浏览器状态码有哪些</p><p>下面这些问题是最近比较常问的，回答不上来一定会pass<br>什么是宏任务什么是微任务<br>promise的运行机制，几种状态<br>介绍缓存机制<br>cookie session localstorage区别<br>mvc mvvm区别<br>angular vue react区别<br>angular双向数据绑定原理<br>vue双向数据绑定原理<br>什么是虚拟dom 怎么实现<br>vue组件传值的五种方法<br>vuex是什么<br>输入一个url到页面显示都会发什么<br>性能优化的点<br>如何实现节省流量<br>前端安全攻击有几种 如何避免<br>dom树的节点遍历<br>先这些吧后续再补，虽然现在出现了很多简化dom操作的框架，这些框架可以让面试者很轻松的隐藏掉自己的js基础方面的不足<br>但是js基础一直是重中之重，一些很复杂的问题都是从js基础进行分析解决的，不要觉得学了几个框架，抄了几个demo就可以自信满满的去找工作了，面试官更看重的是学习能力和基础。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;手写数组去重&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>手写一个promise，彻底掌握它的原理</title>
    <link href="https://ru23.com/note/e5037e31.html"/>
    <id>https://ru23.com/note/e5037e31.html</id>
    <published>2018-11-27T14:35:58.000Z</published>
    <updated>2018-12-17T06:53:49.299Z</updated>
    
    <content type="html"><![CDATA[<p>Promise 是异步编程的一种解决方案,解决传统的回调嵌套问题</p><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。<br>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><!-- ### 首先，我们先搭建好代码的骨架： --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">self.status = <span class="string">'pending'</span>;</span><br><span class="line">self.data = <span class="literal">undefined</span>;</span><br><span class="line">self.onResolvedCallback = [];</span><br><span class="line">self.onRejectedCallback = [];</span><br><span class="line">callback(resolve, reject);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status == <span class="string">'fulfilled'</span>;</span><br><span class="line">self.data = value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class="line">self.onResolvedCallBack[i].value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status == <span class="string">'rejected'</span>;</span><br><span class="line">self.data = error;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class="line">self.onResolvedCallback[i].value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> promise2;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved === <span class="string">'function'</span>) &#123;</span><br><span class="line">onResolved = onResolved</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">onResolved = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">onResolved = onResolved</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">onResolved = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'resolved'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onResolved(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">resolve(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onRejected(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">resolve(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">self.onResolvedCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onResolved(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">self.onRejected.push(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onRejected(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.</span><br><span class="line"><span class="keyword">catch</span> = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ES6实现Promise```jsclass  Promise{    constructor(fn)} -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Promise 是异步编程的一种解决方案,解决传统的回调嵌套问题&lt;/p&gt;
&lt;p&gt;（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="promise" scheme="https://ru23.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>前端开发者进阶之函数柯里化Currying</title>
    <link href="https://ru23.com/note/260f9819.html"/>
    <id>https://ru23.com/note/260f9819.html</id>
    <published>2018-11-27T11:03:00.000Z</published>
    <updated>2018-11-28T05:33:06.005Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    __args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> __inargs = slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, __args.concat(__inargs));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>简书笔记摘抄</title>
    <link href="https://ru23.com/note/368be592.html"/>
    <id>https://ru23.com/note/368be592.html</id>
    <published>2018-11-27T06:36:28.000Z</published>
    <updated>2018-11-30T12:56:27.423Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+w2qjhp16ADVY0Ah0fPlrTttOyhkmimYIvCdt2iohgjZwa7vjWqzWJpUJuVsVBZGSXAoFFGERBLouG7pmu2BcwvrjJq63ZxAVrBf5LHEFTsJSxXaoIpV10vXFb8Twi6/T3sFv8iyXqvmuIjKI46OD0mZB1rSI7EXaCCXFrzkpGIibixnj/HCnEcT4PTO0VZxBCRw+LU/39hRok7Apw3GBeiwSr7OtXsHS2sXjV0Nr5yMFY2efXBNmyoF/a3VmOlwfGEnVHz9KQKNN426Cu6db2LowqpJfzwpg/5CmDtHjBcSQnF0Y8DtMdU+fe6Tra9Ux70ud/TZqRImYdwSkB/cG3UFMbtYwq55UxDxzt1L1Kucli1RujLyqfc1qt+3IGAr8tfNVYJv6+iNpUyjPe0muucOGr5rjakO1xikXQHlNyCFgQRAmJ8/4FKFPrrL/hKEpQ9OxsYETYaWcSNFi9CPsniDOwk5t9MS/trYNSsXc7n9Z/JmvVKhnUCc4ZCJ7Z9RekJ6G6S966/FFHEfABp+OIGrKcdwm+Ftqck4J+jErtFlopfgjN0lFHYbbpp1uDNxntX4jCNWL5qUqxv4J5bIf88F/tplIWDUH1MWYCzzOBsqheY+JYZZsBnG84WeAj0j9JG16VtXMrM5Vplc80/d1LUhD1gE/9IQZBxwxGXFgjjvGbpMcQ1a4yKkBxSJPkxF6lBBa4Is3lQDncE4w12I/qrDzqqzhIC1VvuwS0sxaS/AkyAN+si+UBuzdrWpyLzR7n+zzfcmVZGBzGMV+JE/Il7JgV3oZQG0FaB2dJB7CNFQ0xsmfOO0uv1VSSzJn/JTUNOH9W0FFwwKiJxFrnbQzUS6MLEsukXY6PH34DeqkRbbVh3MxbhgMLhwLWxz5uU0qN3ysLxDaG9GgMU6iJRRbFqqlxLXdTyVe345nx7Cos5z9tM4Xk2U38cO16RCtV/sMvJ92RdsFOuIwXNhK1ZtAYGsViF7UD3vsH9vXajZA2nKpi1LnpTIZaIF7jQOUnjcxEHYIwW2/33I73tytDFuuj47rDVIhzCBRvgZwdcBr0rJHRYcDnOkxZoCI/7a67oLw7QsTXy7mWV+OEy5xxXCzPXuazQFDILlK/vrWUjr4q0IK1o4U1ATss1zHo1WqU04D6jw6lQ1iOxKTFWBpcU4Lk95UbioB68dVtv+un9fkBjvlArSI4kgstMCL1pKWIGiyM+z69cSIYZzqa2/G9lQYj9Y/cideoLK3C6H4BEh8k0Ah+ksqBar/0CyUmchRDb/YttFnu1Z4zVpScLTwl/noBNBmlNoG+H5u2c/EKni3l+M1//1ixPmnpdlxZEcjuRp8ALu7i3Nx62pfRsOdbriH9GfrBHhP+AJ36F73v/x4FS/Bav/N+IcTz3v4ZBSGlHTqbnqzrbYmRJ9puiMQFwYugYvdN/3yZ/Ca3rCEdvHgYabtqFHsLXMvopaRzhxfxXPE+q1o1XChR4CC0r22Y8Y9IF+cBGPeCF6rtCDKX6KPcoOt/7xjOjqpDqtaTrArnx1KEHWc3eO+unyG/Z3fUgt9aM3IjMgMpABTl64XAVkK6kFIKUdJ/yGL5cg9kIJNjM4qH+nBwY7mxlmjH5VdDb//hRZsRE21rlwslaRX7xkbjq16b9ipo9S2lOH/u0ks8ALiIHRQKMtt6EKtm+UbonSrWYNf7J05SZdPSjgoGPQxE5TbnOpXGQEVW2ymMdl3l2HF6y6O0pvc4Xpd60DOm2nO+saTCBTgZjfarkb21PdYy81ThttSv8WYvuakZMk0T6DqL50COmHQQ+qUIkn7Z3xhG5J9iw94kYDycMtHud5xAkq4VSVH8S8Db4Qh3TORtoxiR88/T8HdCBLaWD7PL49XDgL9W3IYlyENNSNWyO+K5ACPkK9a87W4+yI2fKeCLJ1NhQQik+cnvbLt4eKpqC35D61qEy2yfHDSzW0U8oUY2cw8EctZljEai9mVYmDARXQlbjn+fOv/hjOKtp31GR6If+Gdad1KGTtl3MlaYYVV2Vy51dQ/wvP9DKKUqP7gIsWYw5J8z/mLaMgbbBN3HDcmbtJ1ZC893Px0rmH1cbbF60Lt4er+Uc9/7fX8bLGYik0ZooRMDU7DDjwq9ysME08UU1bcHrvZ5kF0hSxlXbweKozzlchAEFHRBEk/HS+dV3wn9LUrn4Cblc9U1lodLD0dSqeQH2A7LzYlqiEQ0PDLkXkerMVgh+V1/8gAOv6ojlMWDVVBdX77yReLlqrHKs9T0C7vo9J+7L85ETQkDF8DeXMlQbd18Eism7PM85d00vJze7mfs2KbR6yhD6wDk66QtVdaCZ3a670oldcJSSiJwpbDmyMmApmJEnQCjnVCC2KhiT7LpU4WlMVLaDM2qhTYVIRR04mb2twviI68sa4kr6RvQqC+GPaCbHQkMjlsSQ47+FRz+ZCvrNZobFMnSTfJr3tW+OQdZ3F4me9Pa3Ymx0iM5VcjE7GJgtGOehufPoNh0Wh6/IBKTD7/7R6SFXf+xRIXsGm66CJCNo/a9VcRhB4MBbBRevbFey1Ecbyyzr9mdlOZVyHAJgN/Be6ueeyr3VCpyxPyhBk+lVcmJDBvtmtdHdHxk4Q65uVrYvOdelrNr+ys23rbupQki4/GdYQjvPdbkKjMEKiWQtZ1xrRWQvrHI8HWGtNr9hxBBG/SZ/ixb5janS5ZTmVJXpFFo9aK0Vj/oupqewXhs00O/QdnW2C0kpB9OOmJLEKIEmBcKq5xMgZgvQm9iA8MkUcIxMyBi3JLSqoVUWnrPFj3rb9LmNXFnXOQPdnKRgPdTtIaiTdmhCUuRzsSK/TxCoTrlspmdFdWPd6yhBcPm791EvuFCJ6gkRRkkAqf57FqOqDEb+r1zAh++aRKrZr00aUT6Zj4hksPsholSNbPLun+quLMlKJtgONaLlDyc4gS0OW7CwpTi2YSdKVhGPUqOCHYSXnAM8OnhSUnVbHxm661woVEgskcpLNPmAUeUMh05bc7jrJJH+Hk7tO+7RHzwTlrW6evjJuDsj2IJSw5xVCZnDNUloq8twnVZvXlI7hdyraEJEoA4Lt9M6sJwnUAAVBIsx9+wjImQ8iE00aSz+UBCcXI+QcX4F6j/nVsk2JvdnegjnxLvJlKf3LP4qZOy60bnlN+8Dj0gQ88t200Mdgb51KrSG8Ydb1M2gmv+t5mWHomZJZcZiBKn3BGcXQJVRvc9BnAWnSRpYIYY04gsUKiQjO1kHXDYj8pzSTyHhWjfk22XAqbz/57eOOmpJ1Qv8NTXaf1Z3IL249xp7g5RJ+HmwDHGPMN//ZOWaLF8rf67tpdt4ubKNwvQt/w6/I/DRO4E8zsFwqg9+3+43Sa3YF+RCAq7M8Lqj2GtoQE7Vp/sSUnebaFa9apBKvJ013D5evH9Ed+bJ1Rc4pD4jAUkPHq36PsNQL5v1P+6drhKuCkOmO3wc9aqh2dfa5ldfaqj9KwSi9Zg2opJlDxzuH+BlnUfOxvnPDHP/hLqoOxPbfY0fxDv2xHv0TloKUttOVuS7OwpB49qNqfohI9baXSDiqRETiprg5s8QpDb1cTJqxLwrCimS9Q/Xy5DffFW0KsxMNc0yJtZ0W7NfC0R2YspVenm+8oivC6ruoCxawQXXS4ajXUECJhV6C2C2mjq+eiTNaSt8RcVxumHl4SvQcoQnW/Fmr1nlNNvn8GORqRGZzYhT7PURQDa4Cho3IArFl/+eVK0DB1+lf0zJpYhWaHv0YFWvNweNEko1UdRxhdx3unLN1/wAne71SFEZ9Q2o0J9MK2f1/LTJgqFydCp+oeekvja9FqgQ3mi2jhKJntR9FBenaL+44Jk7W6dVpdS1TdiTyKHDA6U2jSaaPaotwW5n2dR8FQEJqvJ4pwbP9MbHgSl2lh072efIrlf/frF5q9bclh4RbpMdLKXSJzTYJUUJ5ABtnSEd3f0TP3scrMKPXxFxeVgKdDTs6kyClACHvQDCx/JkATLCSbkAJ6etJUmVQmVebQXHflXHjhI8Kzjz9mJInOZgIBeArv0XcC7rQQrvtPtdo02cNhW3kwOYkrKgjsahODy7C1MV4LdXF8N+ec7VZhQFQ/PN2b/z1Vhbyq6/SJBK6jDLvHT/Wty1qNWXNHfYsVIubKS2F9jIqUbUnF6U9+bK2PgaFip6pj9Q3VWQx617SM6Hb2DPHgwvEhxpLlHAG4krRM4Xjg6Mb981IGAN4VofzkXtjQ1KCmIPmvPXaa1Hud9h5HJadV5ZNpz1+uH9UX1dMKxHiS1q0xr0ucOjJ6AwRd4CLnyROOK7PcabyxLulbrHsWFVUdwqpkSn4u4o4XPcedTIKHRcRE+ltOGihKi2ivwl7yKpK+xgnu8KO5RjdFOsr//314+2sM+rXjMOlWeKj2kAWXk6xttAsDMgscNcOT0QHjNQvRWUeo21vwV31c5lnZNkJ6trzXS8ORzSaOToZSsBNLOb6odrlxqN+WNGWetamsgufZsxNPI8cp9nRZ+3u/ONRVdfHu3+/pvQ42ybP4Cf4zrM3GERtbt5SdSX04FejduJxEPeeBkByh7TZQtwF2O5ibA0uXjYfJr1l3SkUuCR28sp5S7COkxAdaUunjlfeNIqqSVDuOd9X/AT5P6WfR/ovTMSB4NVKSw/3bxtrG1iwODT8w0Z7E+M5hJfxtOdYMSJ2DAJokjaPqZ9vXRxJ67+uokp4f4vuZJLgP4RGo7dXuTR4Shjb3ZkpQyc3mwFRLND5n+AvKTnQdcovgtY89GjoeeOe9VptHM4fzSddJmTMNtzU6EL5m8FSniRPhr3R+bgN3sNPTynORMkU0yPXHJ4W//E3iT9PFv7kNNGvIK1NAqrnfdQxEJ4fbVq+pmeil1WTEk0NYtNIAlcOPWoD226kzhnngGmoIbHBgQOq9hBwdxUvuWB7vWtVPykdifIJmzD+KJ5VMw/ugYR/PjefKFBMkWvDvOhmQl2KtdkuOI85CabN5fmOyShhhRo7fhroFr3PZ6tVK1pGiFSegmDtbTz1yiS6SZ19Mz8+UNmfT9ex7cfcOUVyuIfm49RTeUjz2dKBcX9K0mD3v9UZS/l2ytshHtSUx4tPH3Qgu7VNCLo2wpGZRawjeRoyVUQsa3g7HWag8JV0ym7UAac0qqDg93lKcfiffW4jd5hbX3w2rKNafShGGmrQjbYHrJfemI7OwI5FNTZjqgD00lEM4+Gk3zGt8Zfe9u9aR0yAIB3SQDflACTHdPRl7UXsbJWE9+Ut40460BDrIB9dmIdzTXY97mSA84vfc9gf1AXKwHIjzOiVk7WiZzH03V5cpjqkb2yjq7EvHaAe4n8/Fsg5NzEK48SnKcrW7fkoDwWbVsi/sDjwUe3I/oVZUe44DPR4mZX5nlRaJ8s34eXzFAKwW4IzQozRLFJw6eIiEz8teI/Rf9cadCC3KmVbBUD0BDRPJRxR4qdOre1DyoTgbHtkzjuMJuw4oVc3uf/8stBd8XasR8t4PdTPm8j5uF1t07HPJ0889kihWVQhEcgzZirkQLh2tvkBzSHqoC29JgkUR0mMSeb4XQoLok3z+Gvybxogr5ipLjNDW7Aw2ZHgx6seLG7HYODhIlwSzJtUx0ncb+dIUdt6fxzNNPTcuxR/PWqH5qdNpncqTwZWdm0i4A+ws8PZNTpyjXthBcWFQrVzwagy10gztu72ck9NHCFIAFrxAskmfQo9/kl58WdQsjjSsjz2GG5dJ0fRPKEzEueJSu3SRRncCZ6ZV52bFO7rgs0oXcZ/z7rRuD+pcs1bz56GM1XmezxcsbzZXcZ9Si2t6bpkY9iOsv9PIXU5uTGbR1Z1PvE7ZEhWvOxQwgTVmhQ2dWkXJI8P8pOFhdYaFQAlzqrjmmnRZ4F/XZNQdpSMVWeVgazxA5O9ZifRX0EpXTVrg2xKNJ81g/V/IJLjYGb0gGOg4D5cLhi4beEstDvoH8NLMhUmDOKEZDbMhXNCVSzMgJIBQbV2PWFhazOjvQzpODX62XlpKs+JiQZKxcOjVprILg+7hzDrUpjN0GQGyEXOpfB6s/rmqcHVFG1AVsYqrxUDCN6NvAnm/ypQZ2ceYKQbIxi7vPLLHMWKrBmK3mAplfWVK9qvam14/JSdpwcY9/tuSRZwLapCMK7Zhgy+jHdiSsq7G1ed260KaNRy84DsDG80AVS4YuB0xDG1Yu9Y4M4DxduzWuc+FCZ/uC8F8zlvOORArLu4i11OsEkHI1aFr52FQp7g3IKrVELBJubIEutAUJM8o2nyXP+vG6c3MhAUwxNp15KtR63h0o+Z6i28BnomydbtlquLdP+CnUNQbIfHJS4a9NZN+0izK5lDaP/6Y20T1lLYNPDFPfVEsU7uS1PlXykfTFe9luyhQ5bYGs3zaBirAhYhINXXmqoUTaAsauSqvVqcJQiT59JYgj53CwvJ5QkD1Q6faHPnJs3yb4Wx6SfWvDGsDCEc0xfMy9vMb2LKmmUDpcvhXtM3KZE6ABKcrIN0BGm9gOx/K5LF0t8ubZJkZT5aGs28aXDFixBZeFXlEcGlERLmm0coBHaGW1mp/Ba72vwbkZqnVNjT3s6RWa7jDkxQe8kYVHdJ5J5eaIv7t3bkQmronkGcQjyDJW3cU03hD/a5Fa7i4QLN9d08GpCXYNdrjoooREAa32tQwrUecEAVLCkgVa/t/tNqor7QPEdTsAGGSrFS3oE3fnLB4un82fazV4ZNxBgEkzAF3kTjdOnwkCw+Eipw9cPJDDjaXdq+WdSUWjoaCUHWDibE5Q0Vgj3uywEWLVQuEYuhUhxmNb9vzLFYyi0LBoN3Y+U0lCTwaZQeIPgCPgLCtz4/iOOpS/YdLQGYwrbJtZkqh9hedGHrzmy7EBjMR0mDwo4MgwMTXmERfpbwMn5oGlXLRsc7Xj0Kwpaot9+Qys4kEKomsF+VSMI5TA4NW34LNhYkQs2GDzG7WwQylbZNPDhWNrN1OCDUIF9j0aug+wHYmEO6WTBse7m3ACJqdIixYMIAdXpsjDKryHQYsv/xav0B1DOM4JxWSJj8sPDGuzYbQkHX5G74bUWQF76rMrwNVm40DRKVYyAxGWJA6SoeypanKL71AdLbHtn32lshK9G+TQWaMdLcrFzKG/GYDCmxzl/1W+J8tGidayzuWzQOZJ9+Q2CKWYWhCETGX6HlQWTIJduCppGoGXqep6St2HhKotFqHLzrkVS+PQ4dVzYCEOOHidpjT7L6aGiiBMToogK1/WParHjOFBe/J/CBSwM/KHw+n1vQ6JDC8nrrSbh2HQq4+3NgRJdZCvuDSAD0EiML57qoRD0cF6JHPjSJJqfbXx3Zt38CNiPcrMstWAi4uWWVxk7PhHaqpi0apOqHJJCNbwe7KOC7ixMn90xGctdZZxCQTkd1NsxM60l48LNNtGixtiz6j5dqQ6+1uCzPkoHl8tBkPTVsFrEAxr3vuMAC02kPLyIi8U2gjZeMvQfRKYbBf0tNODi4Nn14y2ZWCDnv29WEg98GFtFNFxUk8kWQa1hbfYt4CuRHZgY66jt+q9rnSedwjlCiuTaAjAw83HNoPfwQiCJgWgwTokj+y3xYFcL1F4F1YZfLHzYhDgtjXdK95p+s3KOqNQDkbDk+2ORULGS+UinYZ9dB4MHf6B+0WHOnw5m7D8w5p+n3rdrUnwHvOfQ2Q5Mv0nffQXc9hYRf0HdBTnobeQgXVLoP+xofrzGlE873nob3YCY9MBFNknqUWMOBcYwMvFb+xOLONYAI0Xisvs92WlGW7O24pFfWpULzwtTCuPakwdYVlCeO19A+kaKJ4shScHEfOy5xIgbJWvdo6WNMsjbEbZKT8SiWpO/QA/t3F3P0IrK2lH0uUvkN5Si1GVnjWVPYx9ID0TFOnaAnySDvyqzRhhwagTjF40rGEMv6jxYVBgNyREeFx8DCoLGFvuPLaRnw+YZ6cl+jihcrTNq/IoWnH7ZEG5k9JwJBVY8PejzUvK74LtpnWDWiHZ1G4OP8ypxOM/g2owXxHRwicOV3ujHmnmqxHYySXfY8vmF99aN5SRGSuCfrjF7uzbj181YFnZ5kLXZ16PzXHTsrvoYpR0uxkQZ6+NOjm9WJokham8SxpMr+HqQRq83QTpBbd2p4mEG2xtseILc4YRsrArpAnR3heGE0xL1vs+DUVvvBTnwFCqnYkMgSW3MZsyfWgbod5/2w45o/nLgnalHL0uQGpab398RmzqtvMYTK2J3OQupF15sfZnmR4M7fq/gXZdrz+6MtfJ0OQ9lfc6Rl3d3+Paz/vzbt2qoMG8GeoFRIzO96CeAe+iHDWDv9kAr7rVqtBEzvo3Ah83MwXankbaqXNeeYHWTuFjoGhS5wMUcKzIW1f8QCuBdNIRyHbn2KRsd5mlnBf9RKcyog0Eh3pQcJiAW8e4syK3x5j+pvcYBqY8/0x04bQ3SOgTk2KEFoxInKf5Ttikk5g1c7fxU0NNSLegA3iL+xSqJVYnZi38EJIG6TZimIp6nhke/qfhXTbYiuyDKkqPGqeDIdeOp7jHU5i4Zk9sIaOYhpNbQeB1syRn0V4a/4bn3JnGjb7AuRrtHgk4P5MhLxvxsPGaAKDdRYxlJpy7qF1NWqQPzfRsv1xy2iX9kw+dXE9FtOKcLRTtdUkCNIWN4GD3v6q6rCAtOIeC6zJGiSJK3xLMMLGEoIr6CGxTfu9z7C3SaB+kqsvB/pqKUlJ3xE92PK2ufIFEkjsSLLBv0Yi7i9M2bJoLhFOUMs2xHSomVEVV8MBQ1uulCqFxDCNFOuDYMiYEbIcTGNGcU2r5TqrIPokPbY4pnxZ17aACRx/lRzDF+iCLLP/qhCje03EjVXkcRfh3TDdW4MlDMHjOxyUoG2mqrQzFMmjkVI1quAvYF5s9hwdbnATWBHSxdrWnXiqSnTHlfbQL9X1aY4HADHHLLEWEP2a+dRTTk8l5CIFijfIqpODIvARTsEx8bl6TvaDGbe10uhysK9hyG63+o4XCckY9tac5KlWxYuP4ksZgCODbirfrC0HKTCHvU58qFzXWzKQ0VHY37pLXmBV9uYAp+dFq6MDOEOx2iipulF2eNlLAtPI7YQis9DF9DmRZ+Tc+qkzf5ZvKmDlh6ekTOva8jEf6c1msh2rgwfbOpvtl+8nW4OmdQ7cPILfKBDhWWjoKQsyCRiqBhPE5bBBQmyco5CWo2Ye9Vu3bN2CBoOdT/FKxnvPRF52tuHZqrw97lS2hhwbgB/383DRj8flDJhvZeK0gIEreSDr8toOXDr8vNKnaxaRNcuxT31ky0qBLXYC3q4jf8RYnzhZBLoYnHCytajJg+lRJTFB6LtRL1T5MHpy7HetLI6S7lxqVgdErMQtxSgC38kdn/1D73b499EaQG0f6+uyJzHlilGI9H3I28P3CQKUqYpWmxiN+JSYZ3BOcEinfPPHDB5QS6S+aWKAZYcnpFAoHJlHq3zFfa4eGXZy6ZusvYoYFt458Nzy7rY6joN9jfO7AF7Y6eV6Pwgkum9QytZHIgtr9yRFePmnyuHxNECV58MRtbH2v+TLD9b+ipkXEIT3UhPf/gbm+AiA6+q3D1kZd+iaINn1zUT/UsqQ9teY76Pu4FKF9qrhwKJtuhn4AMxwq2nwVttwn4QoOLCCxQsxuGXOLbd599WP9Cq021uFPE7UjqfcS8/rCaLxqwIK45juclCiKUw3h5z+x9q3KgHaNvJcZf74CzUtU6LtgiJLHlhTU/GsmcDRWeZFVv3zCF3swknTnrVW83mjtZSIak4BA+qi/YH2PLe5hwPuVmI11UVtmZ2wqXQklqUb1ewxs9t3SKFs6/H42GT/AqAbV/NYuiBvYgpQ21Q2SmTYpiE1t9ZCT6b0A3F+gtoV7UyWxIVhQyDET2TZZgQi/XAgcSN4wvw1oO5WrJpcGTpmWTXW4bj6Qc5hG+0MCVXabLaRDyLLf2odexmBZE9Tfrg8K5hR1nOJKojt939gMv1t7Mf8gS/gzWC/CBmqzC7B7/b7O7RxRR34mrP2iIcXj5qxdvWT5gxs6hf88l9smUQ23KjO7r9lcJlhA7yK6bkUbMefU4o1FBD3VfZymcNmV6OFbm3YxdAQGUoHuwmRDFohaSrx2/2/cS5mKfcFDvGbJOXIqrmJSZvaeR97RXeKak/4Ezi9RAJWygAfGaYB5yIkKsbzcjepiUIbMAdxIkmxRtX1+dZDIQWt5e2L3m7v5JDlS4rHHBixGc+RjVktFVx+bc7D8ar5iph1NZV8mcSns0I+vN2sgtL1q4DKlE79IzJaE2dqPBusWjDHyEChz9iTg0dUhGRt4pzuOYmRfwk/hBQM+oGn4H/vaj4fB6S9x7ML4KIcJcjAFj9mmbue0ARyjD7rFZsmlt6KvrHo1GrE6MFVLKDbms+DO2KzhC/YiDBjjmXvjVKeqetviZVep57RaXklbZ6tp575zWBOhybs5lxyNWeAZIPMhZtlWWVJH5LEnztRs3YDBskKE3TFXbYRvjfl3ci3GfoZZA+Y+VDySR+z26gSOs33+Cej8g4H4ZVz0ffskYH5a8QQhLtZnBbTGhF2SBx+O5wcy2IzIi+Sne77F4a4igJ083ZaV3kR2a9E/+pxSrErq5wxSvTWLLOxQCnA3Ecl4fKRmoiEpRzzp4UytToaguXZA+W0sJW7Ptl58VrMUFXzsZtzb9u2DJGIxbmQFrmX4Nt1/2NgUVsMnNHuawpw7cvlnmxTAXqx9ZZdGXheX9XMV7zKI97D00fg+RGUr6WxyiDmMFKk7VjJshfswqR5fShRCp7BQQ8iRTqaPCvNjjBqwjUpHs9XAyQFDjxo8DPXHIXdbUBvuEqhPKl8jS9MpiBTaGFEatBDxmS4uSkyCbCNbCSdkuEC3QnMcIkC4AaqTTaUrDA1w0XBuh5cOObBt1qc4YWDAdkMwghBcYVGt9F+7xrgL7jBqnzi7zolnGw4Se3fojgY55PhPI8oPxGsNOwuq55qlCYdRDv+uJgpxT1Kz8dNk/9CHBAtQqzy682sDCSY8szIRp275G82B3s1cX+JF9KaHzRqm8DkEl9cDORa6yIP6u+D6u3Yzbf3pHg5msP/mQvznp8kUxID159Md8qdwGbL6a5O4yb31CHpzUV6C7qxnGaEqw7MgiAYs9myqk7TzjjGXbtjcZNReKwCyDkA4N8UngvBINEpKW6yOeek5QrXeS3wlmOV65nd/iYK1Q7MTtJn2VKSqiCkjGNI2xufCvL3vxzVJy6+Ut57HIjMRQJxZplZCUSDRqEbTwCVGPJredKk5wLK1J3TUzmFxaPNpGPuMtawbrQbJSOlpGab9fPnJ4Z8CGW5YRgz9w0apTGw7eM4Vs/giC6dd54+2HPvJu2j1qci85jvJeBm+v9KMd+MgwzzwOG0dFNwmFO1rSPkukjUfzdEMu+AnrlQuA1Urwqqom4uyVM07balY0p9MxvwWLhguc7r+/4y7u25NyXHVbwfb8y94yLHk86RysVAL/xIKsGEONktllFGHTveYi0Rh/oyVQ6XSrMn63ckRh21vaYNzsxKutXvtaNdedtT3i6BN+bV/eTOZMhxgdj6dGJuvVIfNRjco1t9d+AYGSALb27mlc3stpbLOEqQw6RwZ/nQdRf1Amx7yloKbgsAEA33cEUqySsYZP3nAO4WJNPSu8kAwd/obEJjkKvy6Rn4wrTwDHLaYA6AE2zboyd3C3orGLloRK3jrOyC7vmFkHW2UqYkPnc19pmD2TnxRfOXJ0ciSoZRNfGw58hyHY8JgapoGAxv2VOIeUlLafIBoBEQUucoQlGAYyD9PzO6VKmayDUFdMCxYR/WgCOjlvJKV8oBOoCF6LAhIEUnBez1TpPj0gAEFolsEtrZfGQ5QI317Tsih8ISUUKM6+fcttxPR18LkeB9ZVjYbfHEpbGEnbBu8ouCRgRgvcddXv4fF+Mi/prnZBY4yCF2jveEZrGuIDu0amqAoT/KLcXRV8bX3L/zXPZ08dS+CobGqCNuifBMxS4IDRc7FCKEsSE3xFWJsNnXtq29YIZLyKd1yDPb5yywweXbMnEVc6pPJsVzWvn9seavdXHmj/DeeHt0WgW+RvkAanmtOMYLkdx4P1xDmBh1b4Lia3of/4Ud4wpziAWYZDPbBOdFrPDdIC5pMdeEdsYhKeh6ZXCzxgkhFUqVG0ACUYEkqDjcHz+ciZoXXi1eYW4FNEpXXnn6Vl0Rp4pPFw/qXWxX1O8pGsGKtMXAyVZv0VwZ8BNl3rmzy+1EgA2JSduFBY6mPcK6jSojjXa+KlWs5CKJ9bt7gzHn9gAjW2DTOjj7HX2DfkTnDWEi/CbIyUY1MROrdt6WwjBHmTuhBqtgR4k5B15JBQm8GskIRZbiEl0j8uqQIGJ43rJq9akXulF3Lyvv6jMrfMtTyG0BxBTbRqCkGk4YKE6Rac0wT3YarZSFMUNqBtWLA119YOxB+HC9f0MXNOr+L8TG2uoalf00SFyStFzxtRc0dlljJCWyjjPS1AP1We45Hye18Al4O/j0n3wS6nx5/5kTTm3imXU4S6E/4yUEWxgxdyVkAdU1sR4HU/idyVjhglECT9XwhQdpFTp1faM8X7U1bT127p3X2Gt1zEK8TCJA0DWJf074PHNY8tySMsDtcQBiUct/N3uaZjyE0qQ7ZTFGLZqFaGyK+5rPhwKO+4Dc4kLFnbeOqyy2WrQp8vrND7BtZnnjhnQ5YQVIEUlSpQsgaHZ4UftYAquxqbktMyG/n7Lq/aM+k1q0hV/tgWu+BRGkvW5+CIIMSsyyDjtDqwAzR/FoxCicYvhsessLOV+q2x5G4S2YDLqG5uPadgsOTcU1vKX/00xW2LN606yRGh0XjvyBsfHcV5aIiMpzmqAR1BZsW60eGz9/tE9AVn5/e3DkES5lQ5il0klO1n1L4I7gXc95jtua460Y2NYLvU2n8GA7JeCvc4+vhaNhwuNz/FbXpHZuq/NrjlLv1lZPJgquav3ElFrXjQf3MnXOcLCewS/qMhME9AVau/YEYoIAbrCxgd3QCdrQ6mLZ9YGKt6wny5wHb0a8Vwecs8fdypPlmN6TImyj0CmqL1uWVe0fnFeG0s7oPGgPAVQlr52/1fHxw1TA8NAX/DVW1c8aEBWZCuIC8jSOmY5qdqabo5UUTkWmxhxJE+A+5bfd/sU8NjoRwU51+0tuyNlwMzMVT222vEB3FjcK/4DZJqzsDkludbewvDvSCbo00cFHY3Erow3nhDv3AmYDl/oqSW+GGA1tjsx+BwYRC6gv1mxz+qq0A2bH0AEy5KDGk4UxfNP5k7fBPAzpGjKCwwC0UGBrH6Hzy1j+kK43hC46lQ8amDGUCr61mPdGJ6ybrJAb0u1F3U0Vgfn4EG8BsYrE/FKCEOVZ3C5ixzlhHvwW4DTwOieR6L3C4/ew6NupEGy0xhYl/rsv99mpBnGgaqq+I78+wqpsqhzVDaLG+BRxeRCsuAHJ8QLmLYZARa/v+jB9iNOYbe/4/dVYAuHreDoC4BmJrirs5i7cfiUxrUZEHIYElTS8hmYqYXPmvFcLM7wvvwVB9SSlrU46vhuPXX5nIsUOiWckZlSFUnvS0UpU4uwhmShHi9uFFEgIdR0M1gg5i8EWsEqYloVmwY26Hf/3ZMvqtDtzCiiINoAjSimYmbm8rI8RI6jwhn4n3WH78QFbKiw8JrmWpgzdWmRfDh7Dy2Eisw7dKTh/IQp1hJBvePNHdtQjWwPGRLOuKDgicJ1NhPiCYagAYiQiq1FoadwwlqVsA0UYCls9ELpTsKLgFB2YIQ5tw2h3+1xvKDwj2ZFuB74DEkoXBX3EybI9r9n17YytXz+ntOoc47F49bk4LWy9SfCc+I4C+vmJ5duqR1ho10rt5onGB9Wp+U1awu+RSKwlW/FX1BjmRLytaqHwIc8Oz9eHWqbZeQBBIWCsJqo0pGvEDR+RTAxtyFTrTg0mofP1R2jtcDmU9yH0Nu/wlQIfD55g9Zsw79QUzEMXPknIFLNmQhJj/WPUrFj/nGltf16wmzr2oqDwJW9dqNaqQn6kQGlHKBNQUXkIHUBf7gHwjOio8QjbTQP4tnKFM2YTZ2qoyih6yXHD+HLiyurmnmaI3+khJl7YziGkfNUJQ6yKvHsiouzBgkSCTy+T1T1kUkDyur68J1PlGStYKNaDgZkM04nBd9njkApZz0QA709rkLSYBKJRofx4TNs87R4pFJd/BHvt8itHTgOSu3Wsur9FLVOpm5ON0L+1zVP7NMuIw6EK908pbx04rXwesxm/fVR5uiWt748yLyfhpeHvMXlwQIao6ptsC6wGIefiNQ+D8r6E2vdxP9AatvGCdXerHup93IMv3AboX8iUvMozldHQeN3jnaOMofmz3CCkMmeNVk/P5IHhTQjhwyJVwnRT+1Fgul4sd9irBSINodF/rmUV/MoYjhUKrLHzNhZ27pfdcr77t4fIFrzLoQpBOnRjT7Xts0RVRHXgaJwVPFUG6BBruVFOt+2bnkvfO7FdEHxtdjCzk3tC6dhatK8uEQ5xQbV5Vk07fsDCtyzc3mdSvO6MzHlF1CmYtZGQQQUb6A8G/29gkrQaDRd8+gSH8iGzJvKxsVBfwhm5UWkf6L0E6e/9VD7qVCwfeyQ9NP+r3g6FlBRaCFlyRHPEDUKUENoEtoE0kDKwyNY4JscW5f1a7h5GnCyxNMmEe3OCuD5mTwpU9MJda1kC5+Ff4iY7u/9R5cEzWax5+J2bRm87beP+Xzbb2jUNsuTEYJoU9rDPlZJQfQhPh+q5nMV1h9Vx0whAdSQH2S/ZIVOWTH+F900aeEwC1vgZqRSUa5Rr3Hb/pLRKaeIPLJemY45ETwDODaIp3ayxEYSQrRyG3h3z8GP4kyPVHwzcRj8+B0LM7gXO+7mKpmagZ7+VVcaE51uFL2kQ4wD5XC6kuUoQ1NpAYNhCefjz7mN+8BQRZZZGaOO60G1BBRwLOPPz8QQVndLoR1JnauQ2fUj1iqPOIQKloX9lXTCsuUCxs2O8kbledFKRGiNB21c0UwbUrA/je2Se7ITlyFWFNIb36WR2ZUab3H+t5va1OPna8orK2ccuFFxrhRoyJ/WBXQilNjpMm+63pwsrowdL/3+rPLZxbEKb2jVZXt2INSsr/tz0BW9jA8UOhrRc7j4BN5ljYgAK/rMD5tdIrmBjwqjg/UBI805vNHPIOKKdmldCOXBgYYqo/NCrrgMHk3LSw2X1djNHM3JQoZReMwep5ECci50W9mgnyXENUYqKFa+zIBPNW9BnDcWEwLCmF1Krs98Em9ImnYaSOtDk+HghxRO/wrZ+otNIPkHPRXcUO4Z3nc46Z6Tct9N2LbZCpSIVTh3xUpSrpgByMx5zJKbl/lOFVLNwrcRY0+jS56s8xVkC1rqsMOPARU58lXGrY8qDzRjbi0Nbxs2DFb5ZtTUY/A9g9ocxJ/fGLOp6QlQhbbudog4IJpxMTDZgyJFO4Hrawgq8h9kPtQHBGFD1UGTFc72Ap/kLDIMCzVujETrzvGFPv/4vNW4pxsysif1+gjxwk3PmFE/F4jUdraglw/qZfVyeU8oP9ip9panzp4AdDfSd4RFfxseHsvP9qawQgE6bVIeFceSpeKJaFD3G3Rd4ub0smYISx6X+nBrYs5ry7jQc8MHmG+uhwd5RaBVYqn9/CaUTCHbqPtz7Ludnh8apRPS+G5m3gisNTxVFWxqFclN6vlbRjHFnrGAoo66j7RA6wSpqZp6ehtAfFKMdXCxPjwEM2iSJAEE9mns4+kMRp4SyUxRXL+P3q2UdqewtPAoj/7ECuxYAHRpDPrh9WYz45eto1MSFa0xSZdidtpW8W5i4IU2sDKJ2tmnwoaiDuXIrOZU+9mKVlmSaumPKn321yED/dhpfc2oK8ycmQuYaIGEBrjbyzw18lGTFkk2cCTaWIU4+UoGhBuUcMknm9xJFB6z6uC2wTMBE6YtLBfzhGfKQ5k1zBS/8Gjdx+IUF5bY4owUiWDCXfGz4g3amew3aI39mphC2j5nG370zN+TcTtx5WB3o6R6SN5FDf3XrRU3QTDfT4BdTmjQB1/TaiklsB5UpswyJWsdwjiTbYnCAE+AjEkknqaW3OIlMdvrH6N1wcPZGlXLN96x3MOMZX6CWN+dc+mWdElioP73PiuVRPCQD+qsSRarLHKiLu4Vm13uW02w01XWea26IXB+QRqA11GGtK9CCmR3G85JlehelIzrWv4nRdb/6APtHDeaRmzMKCzv2IZmFFslUAJiMURcfcAuwkVUhJEsgqTPP4IGeA4JUoAi7VdsE8Jgz8C3TJRvI7ONzxkpywMUKbLEqTd77s3yb6jvgij6xWzjLyLE1NVacG3JeENwgW3myLhYZn+L/szhO4u5IFL+Wro2+JXgGUNvKedyFuGHi9PkOXl7t1CeryWIdVk0Z9jSksz8MsoRJwsPpUoKLAkYb7uWj0NM4nN0HVUK4N8YAsKtch+UqLE+34XzsjQ5FcTswW5zCcA3BM9pkXojM8rIodPdt+XyocQoUWCrxwj31hWhXCfQaz3VD3tTveEW/lgUg3t/Wop+aDgPb4QgSg2WaMA8r8TJL3+G5GvdOxpq1v7vdsweZyykRbpNnTMvmt236MrVMWPLuulqA10OJQahtW637iAn/0q50kfmgb0M8/MGdHNt/HhMvSn13XDABMCkF78oiOFtHt84OH3ssQKEopOEVNaRqfMVGYN2iMepKeTL404Ys2zYsFBxAGDF/zGKyXFIjuQcCCRUuQZHrHxFY34qc0xjyQyMVFm6udYaVcH2d3Fa8RRrcgFElv5FaefavlixhUwrYLKT1O2XOaepBiqsyB2p7wsbxi+KKjn8wjoUCMzI10Q3YneJW53WDoggvYTQNB9KoRoW4PMElgW1H+COW7h1dY8AzVe2UfgqNo82s0Hdert+Z1SqYmzg6uLSsI01sqMzvCDWThgbiR6u5lJBzmmgPFxBoWrk/rE1eHEjxmnkOCwTL/mmoJlEPwYWnWu3Pg3jQds7F3SFnbasAwXjMuxdEZkrjbYtLFqXXAhS4WLsyewnPQDpOdM6DCHVOBffwkBU1IPrSpZ4Vcf0VoBGBdCXeNgW8e+HuxETofM1TDOUhrBv6Svh+sitjoAtLc4Yu8WSg6Bh0n/I9Ux+KnZfBwAz7u72QGiUxq5WHrh59CpDRyEaf+zT9wJediUqXM+nO1mVU/YEXpP8LHS7lGLSttRQt88xP4JbyfSLbxvKpdyyW8183DrAITxQ/nYrVj2ftHIz2N40i20qBhqapeV2Cq1e/l54Jenb1pUhtyUi3+UMprUuE8D5Ik6f/gcUUssk0K7PRZp+BG2mJ3E9IUCsUGVXT90Wk3uM7pqQDEYdWm/iaWYY+KKkvo9qQNBGvkD4cuaU5mnpobTBxlUDkMA9rMe5awMT3mqJsnwr0EKDLoKJTYqPg7jL4Y9bpeXNzp2eNbPtpqGVdQhSv+SvxAh5pIow/stW0zTknPG4jvuGg4jMgkt7jkvwK4tLM6MVNYHqk38qzlvSYEIeSDAF9tRQtYFSfQbm82dm1kHUL5PUmuxM77DHNaGYH00Kgum+hPjT3FuJ3xkPBFQ7JfuyuFEdnHVax6J3w29hknTwMalPY/JjMJQpDjqLlWInfux24DIGCdyHwsEakW1cgQ9ABHH9BHnemYi26nsqbVprzGbE3HKVRQo+AMC0Uy1ew2a5GAHcqE2cArzoUVPxSa39p1keDCVZsYdluN3NPcbvEqo5+CP+pcS6rgc7KHs7S6d13ks6gDIbDdxHfDy7SkfeW1yf3XXSQBi7FH5cmVPTWw8i9VdYhKeIAGRa08nk1issksSavFJKcRQMJtkpuTsog0+qx3oRXnRNE9gG7LW9UpOHdxVLFcQ96AQ1Gsopq4U9xcn8TS6Z4rl5M3/eZsHKuraEGvEAWOMpxuneoMPRZUNY0okUSVJ3UcoEP8v8Ygq/b4QOp9lmidIjtGqqR63JYZVoonwr12B7jLqyxF32Banc/hSPJ3rwqUcXrzWrnE0cTUyu9NEfVeNSM/c3ceH1v9iF+ujG57TUakFwmRFLtnM/l9Otwffu86/9woV9CotYDnGeReJUCd+DYXLg8RCZLDQYniadoEQEGJwTIxWlpmjlomWYdYu1r8dSC3mzK0P33/7W+TNkyFP1sALLnAx87q4jY2mFTLSCeSBK4WwBW5i4hhFKfApUJhltOm+jVvn6eali7OhmInoTWpiSEq+PAFzgaKTnxuo9h4Kw6d6nkyve2h7+zTcgR8YU+a0EmhAadfLz/dVcQYadJ+ZSbU75WncqwkdpJDOIjgCcWFsYqs2hR95DvjlSuKoxJE8vNhJ8KS7fuBWgl9eOEXKlorv7bGWeD14cazz/k+gpbg66v3xzlzaHObFyS/oPU/ilVyubY3Xop07HBdb5ObXzndJQp9/VjuCJNEv1Bv4IX7LHA2zNDaW5PFtm2v+SQtLQJ48bl35nMSykPCzW6iiqXKjACrbg404/hD7lqMR+8SS7Xio2nM9KnpU/iJyD7BroZGQxcwYpswM/0k3BeUISkDOoMMBtRSIp1vUsdePScW+3v2R3Ec2ofNRSjog3qulNQf/J1xtzNt9JQ5DFTrIoXnI4+BYvaZicZ5+ZbOUlM4XqS5c5VoZCw5fdTAnEQRoe2VkjWpqCzbgWMDSDptdnu9lHcaZ7XjsJ7/YnKqq72TMvYO7JNBlUN7UnrH+/7CHSQawNSE1508oYirpcDlY38z/3cTLUeACmF5SyQmnlMw9AJXxQD6H2/sZvPiY9Ja+efPyvBiz6XuF72C+9D9dbB5HLiW06UKSTTEGxA4WceR8qL/my2jYoXQmrLvzcpVrVBjaGcQsf4IrWaFQLE2L/W/wwy1/F53hge37hJUNE+jxatb3Oi3hI29gag/qVR+o//Xbye+9znnZmNCopIbtYjX65assTwGyzxzTIdH0w1Q6Ms4WKHi60nJResXKpjnV6K4lM9pupSlZbacpFooF91eZgc7FKhXhU+hT6vrCAfawoUNPdnWd77LwPG1xcO2hOnRpwICpgXnX/FLWM1vYbUVuvOhyTUOg+vpTSjlO97KWOVaHVF9rKkcfa06NRgELm3Z94CcYag8hzfPY0zM61gAZNP84eIafe8jzRZaXsLtgkEEM8Dsvh91hGODpj8lQEz20AlUfckD7GOqRQH/lKdo5BRIvHkX02qwFtxIQqL2tU6oebgypOkqoz1onFJuEEwppGZuetHZCkAgVmUs2svpz8nrjuWempVVfPPXbdpHfOKYDZo0ZetzlSy/BQAKhiepv4xH6EVVBarczOJ/+UKZxtsXp00icQy+KAxS/gtFXGOfC7N+lfMtSv2y3Vn7ADapb5IgRfIjgIFQ4MSUpWysvidgyP0XZuzeSNOMld/a+GQqO0hMXc+ZQ71EyIhEGwfs7+1qBdNHkRQMXCR3VKMpXh9DpjRf9CnbbwL90WCykBE1LotyAM2DxZAQmEz1ZbaRo9GGIVFBj/Uhxb9Zgzs2LCw17ROj1DGL25PNgFr/s2KP0PEIjKRZu9/ZbZ2p4tn/EDJUTKLzuil8lZOW+Jcgz4Eif7eiUcvapEnOwvIA0gkKmdA5iZbHwpKPBiPj8AvaC9g1F6+2Blyy0AQo5h/jk1elNkCmNOrR9oUnTrKU9YmVet9e8UaZi17p1ZZXVo8aoebo0TcXyGKe+TfqP3OtKeJHp3mlbIHBJUNMaPMDVj7Ig/cn9/AMqbRK6TXzAV8JN2CVhi5syUHRt3D3VM7JJ35zcMRnAYi3j5smL0b2jmXkIo3c0yw4Gg8pQ/MUhMOeY/fU9GmTlSpORsk5VADmrZ0XRucfE4DW4lk+m+3ks9iCPYc7rqp/rAI39s9b7ZkTpmdZfTwNIcbuwlIJ04xHamvW6fQgYp/1GGP6xwJqSTrpXAZKI+jWAnCtERbAWWu3uqU65vSQzXSMhT8gzyO4yOC4bB3rMBXLITlFnE98pRZ5DHMAWFMtnP25aqHFPzQy6Xddjc1ZpaGvmLo+EDEFOuJzy4GY5BO0FVecAtS8nW/QYcRH/1rAwkOhDbMpK36769i06+cmqOYqGpUeEIhWvHZ/UuDX5gcTPuBy/9pU145DceS6LHLY95+2X6eCjg/qWhXtY15gPRtnfbNk2wVwSgzywARR6f7/hi98JHZWEz7fS3VFCT2JhBUPhpuxm03hFMl1kaXgJ3OJpTtd9goOipxRUQd7FpegJzfXQoI9swTZIo2ShcjEuhO9xFF3YCiSMWwGR9jmYvfO59+p/oH+KDs7R6Ru5I5BMroQ3rb0Q5f80QPi20waH6cgirXFxtyg/tc6mlf/2IH9Esg6Xl56yaYZjiFh4G/s2NS4ymTjoCeKOnAMskGCbAIDVvlV9W5FpMNlfCfZp20UFRzdfP7zs5C/bdOitcHCAbboJyz3G/evkLHoPFspXf6AqKfyvMuXJ2oS9BtvoktbOF2Ez3kYq9T5KMzCkAuTh2x0S/EZZE+pCAdui9Bz6+6YujIdIiF4/QKkEq+Tm9FhIkfDgZiAuLyP/UDpVsoVtvEDs436NHcvWVbvf0BVNfNM54C+irujlOXQbuEmQRVyHnP6Q7QXGzG8UHKYOIzb7WV4PSnQ6yIIcOJGdsSP17xKdyr1qeXWapT9dP8DrZ1Tip21oSISdtdIlYhGI3szjKewxLFZDAZT6hGK7rNeskkpalaONXpE8y3Ahjdm8JlATn+bX1926e4plG4DRfWbBLKDF337JRWCIJZNIfMgkwOTvqBdF+npbj9DWi1gK2cuxYITC0F8vyvJ5abpPhrhcehe2fCZAPS1IZuWZssuK08aJEV7FkU8T9ydF+3fumB1PNy/ypPW2NEDWhJzZS3RwA6OWPCujMo2N7uLG9UCHctTFNJwNckX7cyNRFmB5KO9iToSz9LYwb/braLweYtnd8ALrZsLcphWlGCCL8bANySGNVJKtTkKxnPj3tfMswRo41mVz2a4zV6ZbaorQyhfCLd1WlsIlWGoXYvcFQ0PQngKbpgGSfc6BXEbRd9zx1zs2GvQKbvVDfd+qUBTSauGbpD37l3gH24WLoSu1erocig9uFH00cDrx/oZawMuIZvoDf5AwDTcL0c1mRises7pFoe+ToKNkgyRpglyI/G7rccGZoZjzB2uQX0/ryqei73vXbyMc+iX/6gpQnUx+zuqdpwiAPyULJSsUZi+DFe1LTQeMtHDcDNtUbK3VVzonMNvFtX4XgIzyGt3VcggF880vafNMvDOmVOAXayB5ehsz/vyxxj5vdmHycJYlMdAUkRROHVfohnpqonVUE0M3/8GdGhIAjRcf/AxphdSAjyezLc0tLnhw5XnmhGvczK0zoGnr6KxCQjB9m97DH5v1Pm31Q32A0KAUDdhgbo4oXEpWDPUmqbH/v6hshODmP00OIH0pxaoZLNsN19IQIYNuri60OA6aIE5Eta3u/myDoXsgLmC2SfOvkMFu3/DKahwVEJU6sVm4SzKZBcpo0kZYg/WwZGVam8b3HsqsY4S0f0MFLUihGI38OURpAifqNVvfzeL3qj4wgxg++PgkShpgq9oG1SZ6HwyMJ9llaWZ4JT1WzkLqK736I/QXpfDRHEGHT423UOPOznjnQLT8KRan03U09ANY2kByG8mEGJ1IWkeX+RsRaNd9NZIg6vPI8Fvr0NQ6UYP3LVUMm8x0ttZbB1WR/KhcygLP2MUj+XY4er/Mo6Dl7DyGmErD/g8ntSMPMKxzHkm1O1GyLgxB2qz1W8INdf14I82Z/GYLq7bLQ0kYyZwuPeuLQoGj21peeqPLt/AxwKP0NZCjIG16hAG5a5+BHyOfQG3gN6ginJD+bFYQPXHWitbMEHqTUTgeNNp7KwxIYQ0SxkvIX/ouXE2JrlSCaI8G7AslnvHuwnoewneeRMxYsLSLfzmcFXOWw6wkceGO2xbXPmn6lxNXqrw2cGfUc8IUZqukaMOamvWJADMiI96794rY1XxSOwvByDdxnwVZ/T7st05oLtMpihuHYXKGSjzetQ7jO0sCGNqIDbxSFW8TJvXqkLgZOekFAPhVd2Hp+PFrZuiBG7S/WXAZ3zvlyAaQC/vUw9gTnI/TEwFrlxChDGeYxTGaLUdbfEXjdmKZtyipNNT5DfezfNyKnIwIFgi+0ofa447T/J8KaXZwtGWPWxSiQ794uny/Y/Nwhs7PhmG+JqyREIFEB2kEnFFFmN+bVcMUOukeMXKnekZCnqNjiwLwSKgw+zwt8QbJJrCMdYRtKTjQSoQHHgfT9ZwunddG1Z2utsqbVH8Tu1w6cNby/OY4AubnfDOq0ftQvnQBfoi2ERx/RfWALugiFfzdOdwx5rYSxncZ8KRKAS13R+Qoby4eu+CZtqogxtkVfvEnVEtjs/fyTERBdKNeq7nnRaIUkEoz75hoMbWH05um5AMQmW8aejLjgIITTPEVBEpHZbQ/eWFhOqDVXzIV0s1OLFUpO7I417Vgs4snXZW+vWPMxm46giYgP415SvGCMFisrWqRgT0+eE/vdfba/Plf4K7UTYhiDoOI6/f3JypPgHcQK+eWeRiB1OBcRsuLRURpQh8qgpYx6Dvid773jUMwpCD0U3oH6+2y0QtrIw2Y+cmwL4qSDmmXfd9xMp7ZfSxnZg665M9rt9kG8QdSN+zEFh4aI7sbc3tZ+JW9caP5N1T/czgqSoxxNjy3fLNY/QtWt9MHmKaioes+XSAcRiRx2jihviOj8w6sDTb6PBHGe3OmX+u3VoNx2+HjNybim1Giv7MpqkxTIXRFf4t2u5fAXsjCJkQ5vlNvTtFz5XURBKZzTOWe2CKl6yc5ok2+7Bd+hSuvCLozI0Ckb3M2S+SzIEEK6YpZAzDMwNrGsjqYcMS6AqHrqd72pM9X3PM9QaizHRquDUieHMLWK0gtL7nt69yf9Ayk3G6m/KRz3yhDlAYZMjf+svNdJ2IE6eCBu4iWM2jk/ZKzxrK5yzxQWysLz+Ikk0do0oMMeKfww0WiCWWlLKrZU8TIxH1eC5Zr4Pn3JnwaTNeN+BYaB7BsPoxtNcoFg+GFxqhxMn39vUqpmlcJ7UVGgcMN16DzpaZOQhjgUR0zO6oHmU9yNDJsAU5O2uytPHk+3hCmJ1O/TOugqSyd3d/6P41+lbyE9P96T96QPIHZUb9hmR+QZ3iXqCdVwlXtD00SkFCxyAW6p7xPPghp+fs2DCKne+irwL1cffB+KbVNJwSRgNDbM6mVb8qkQ27htRoP2AAVgJkhiO28tqBbgBPI29zMtDz3EAToyfz2iGHniyZ2LNk8vbzdcjkB3NTMX0Q2UXjx9CaClJbzim4tnd+QIPPD/osY+D783c8ZxOKPnraSfkd5j9pGv0IpvMvw4ZXDbb2uEIBKUHTEC7oMffdPDXW1GYBvCI3B3JciuwO6H8lkXjcf7qfUShn9Lye2KAYcrUZgzpJ5PXmYc2x9h7nShBSSusF/sge2yii9ZOj0uwGuKJsP6hLL7irxfXW+RLpclDgeBPIOG94LdGk9kLq0CJyd89aZH039C1q7JM3jf0AZgI2bhhjSpFQEYEA8kVi4+IUKOlh9kSaxM9NTfoDNVNr+p/VNCNLQcZBHTX+jxeXvkxOol5SYMIPjj6YfqFW7GYKz9bXV4LHzH7EhdzcYGwKsV7AaFnc4abg+5O36VRSh+XS2lWLX1UH+V8JlLXSNTx1r3OFJTMkHLloLqGZN+p8YgZo5PMqkXyEJPXe3pMBuRW4ZCefwdjVL0fozOR18F203j/RDff9AkCxpHQGUeH4hgsM4+mbHCjWRQqZsyv7gsWRA2HdnPcGMOMmzQs1EgjmrQJB+sXsCEgdAPMOANK25NKLgO/3B+FdWnFs3YPfzUghI0QYfzc6VvDxqFPq5R92hu40Vxc/R1XKg0KMP4zQsIAGduWLsXrUQlbs+OfE5zPSt8e8Aj36yspuPxnlq4odMwk3tI0WDjIKb3DDE7tAYuJ5u7pTyJI2+ciAlfclI9fhvbKTwdPEBBX7w+fVCdo3BovgyzYJZN6WcRIOzjfANLwFvdkz5IVTOTtrVlKK2Or66lA4MF/Z4LPptuOZoqIxBHP6QxTnAGOb3xWmcXj17fNpFW4AOZFk+9suU9GERsx6XA+WMckoKHdghpTIcAsRLy53I1o+WYJ8wgPfY/kqU+9IeKVbvNMcke8MMDBptr6QRG3EB8SoJQCi00xP0Hbze3Esf5Ip/wng+pOShTGabEQdodY1yAfC2sNUPKmmOvaWba+FNUDUJ+zrl4ljHIRQ2AcbqIaVcQ0Cha2XFT3/GYMoraRuKeKkiwnodXadPWLziOVAUDAD7qM+0DXx9ydWhX/y7SBS99uQnOSTsZu2e81HWRcEX/dPmFhELMnCudgbf+aX4H6ai3/jrmlZsDsdbwE1Rsk/o9zvn5VMGvrdmD3MnWtiXkGoHzXDt/sZAtoW3nDD+Wm800a6VlaItPka4XDio7dA7ocGxFeQS58ChqmYoQ8ahqSFgRGLXwwo3+1fWLl4lsN23rLQU8zpLIVESGtYLkwH3IdWK25I9ONtekIuskPG9DAAar8HUhoEkZ686cY/hmGKA0E3a1i2CRTPwnFj+Cvei3sOdpuf0d7otcp8EUSUQKl+YtAvTt4q7leyO8ytYaHUYM7ex7THfYwjZ/u/BPYQYAikAb8E6RaAnPTxcyQr1+tKWoowrKeqtPjB1ae3ZHU5HSSW0mNnaADV5HWEQziQwXvZ0kPnw/e2riJaEk+M9EBa/1EMOUeYqLGhTq+cUy6WH9PWN3PMYSeRZ0kCQ/uKW3+SBZIdAfMzE7FEFaLzbzxxxcXGBXuBx9lMFo5L8baw93xcx7EFMUDLW+rqBlzeK42jDETL0H37YX7pzrP/g2wZfbbYxIm3vU40E+nSvPuG5IEDi5iE8YWPBORJgjjvIdguoAp2wsH9mFGmA2vNQnmXZ0K+X+qGW49Bl747pHXH4g4lV0ZJnz0DGfnhdGAYQnfiBKl2JsG2DIe8vJ1e84YKFPDN+lycvEmqA7U2OQ1GCLDv5F8Sk+8Fhkq7kIPN1m/fgWeXhcDpp1vnCKHTBiqjsfP1CKECPBlgrd0ya1bLYN7ha7G3fxv9XvmrJNFTCASv6+edyB1ReK62z6SUZmdIylPiQX+3jYWcywUPWlhMIWiv/JGEkV5JAjrfzqIasCHNyt3gH9JiZ6csHzMSb8ZoZi0ZdMYuJdppSMFLzE48/16U5t2VOywnrHuFvOlbN1rG03HFAQqturhqHIxkPCOg2Hox9yNo1L3wkv7YPPAernLf1F7TJkEHBX1/q6wAEnqPCVFfKptjlEEsnHCH1tvBnp4mCR1p9dFBuSWlnuqst/1Zwm/OMjuSJNrc9oWDKQsUxJhasDh7PidoN16IeynutM/lsUI5SyZHhWHkyiRFXWc54W+kTtY2vlBoiTwEE+aweGmLXav7G0KjBBbklepxpr2eLs+7sQ7tz1ZahkbRt8GPJEIT23IQzmkuXD+3Nul7JK7lhM6fzDrqRkEYsgGN0SKXOLhX8m/qbKKQxzh07ZG5j7mThgcOF+yI0rUAKqCZYalV+8xCLWp8BNfoggk0yjOVltpMPePNN2Y5JH4o0XF+ASf3OaTToGB9x2qrL5qoc084mFKyKEYMOsF5Nv1d8mEbl2ippNDNNtDr7t6KEbFonzKGwkga/fuKjqNspg5GCQpmon98Kx2jGxnKo60NnBo5rLQa7YIVfaqJ6Z9BLTR97mWsVcfcPfo8Reu3irrU2i5n3IdfKQ8/gMFbGXLmvT7mNfSs5pZkgo8U6i8xKy7K9rEhq0LlVm34/AmCogxcbr6Fb74Wv3BBvplYXFLU2/mOIh5B6V5lUjJg+KGCscM2cHkJIsPtMxc/FRMFd+OiI+LDCzNkggOqDmGpjaUbXi4wpwQJ9sKekzhgIkZ79sBLoTb5R7o1XmTVmKo0VwbP4H0PfD+AdtKbRRKZPmKiXnltb2KVXbXaf0FtGCoecF53HMmTTW1JIZtvQGJH9X7sjZud4RODgBAAaGySL9OvOhrYObQzSRMiS8z12MOuAqVWOU/Wm9Hkad6jrHHHeFNsZ2mNa9AUnh5Ee4OlIVkSs28DqgvTLiiKbxnW3BRSM7FGAPTrBl2084wz8xRAzf26d+7b4F5wgEgzLwEJfX5a7MYy+pKELT8QHxnpFP8uuDhTF48yQBONwe7XRezBFoRIF2h3DuQbzjBCL9dLjqGqOx3IpyVeKxVP7efK4xyN9pXWCcKTjThwCIyXq3hOBVR9SfEh00bEce0o5mGZafTa+FyEtR81oNZ9T2+4lBl/dCESWj0ErLMMpgdnARi7UDHisTUvPFiNTqdVJNpgwwBDzUdqZ2GkbRaq41eCE36p9SX0MA6zo45U76+TRxFnA1QcUs+Ee+sgYdqmbvMnpchlqrPvU7DirrdNhphdmbBGycCCURgQFSe4k9fhGkQX1/acinLhLm2jFzXhHTV1SMeHx+D3KmMGltpRhHiqhto2zD9f12076G6NsgcjPBRVAifebyTsUeshQS6JNK1is3UuqPd/h7zovyQ8wxdTGc7XaD33kVEOznpJhjQAnPXG3Rtu2ltX7yGFXhfWo9bJXHsnMYwSC3an/atnm8CxOPpA0bLC91OhkWoD3na56GTGY27yg4US9T9WWwVpBMubX1Q8Wkq+RYCoAOrhF8QMmpYUNp/G6ATl5n2Ln2L+pZbcODjq8i9MoHOQf8z5a5ZUy0Y0wdzSCslU0b4rIaMV8wa/S3C+YgLG5aaI1Igba9Tu6Z615QsJWzO7PyiUmmYj4q9dgZUEmH0IvE49K+7hpWz9ufcumI9XSVzcUsvOiONDWpq9jh2nEZW4BvrLbwjpJhI2HnajZCSRZqCQD9sBlrmciK54Ft/H+xN7gqQP3c8udO8ppqR6dFBQuCbG+AsDDTVrf5oBKC3Gy5DXgn/82AZeN955B0xbiBDaJph/CAs+bWFp1MKxtWDYV9DXMOk+2+H/2FlyI1IKko53BRfVdnWQfcMOb6EVGGWZwrCXMTMY2bec/1f3I4Hu/Y+EEdAqVhPCCAWq/aBMyiCCKMbfjKH1QXwZYa8kU4DOiQBrYPDgQGkDgGMyKonv3jyE6v2zuPobJK3Ci+O2grZQEJj5YLSI1ZZCdzbINTcJGi9zsc7QHh/2urRvQMf2TTxPY7VpaP4WxtuCocs8UveTh4iyj9dhKo8jJNfBDSx94kVgwOMV8L+dzMejfdyItuBWaVMU0yOO0y4W//DWY1MqY0QDlhFx38A8IljJNk2lfe50Gx5aNSndGccKrPj43EdPGHQQKiNLxjpqGT6gkllyDLzee699rXXIpsOBO0ZwhE/0jpy+TI+7aAvMry4ffSmwI+8tTUbkWblygvo3bQgZUH/R5AV5F33tScF7dk+4U8ganfQ0GXBv4Pp+5UED+pl1Kegfy9H0gu2FIZIADY9PtSPgaIoZ/90Cb1tPc8Dx6AVjxoFUT68eZL3HJPZ6+VXxZkLfAZKYKdFXouGODOboHVH2FfMrfOgfDvjwVfkj7mIK9Q8NIRymlfojhA1iuSse3sQmAt+7RZFULtSxWh/NwVBNAtuF/rZl3NsxYWgEYcRsUNE0e2hNzWTq2uFgerkYH+dYf/XbyXRDQsndsPkGSJUrUgBMijCH2hNjn2zU0bLBBfRtxg5ol1G5ytL5JNFIx2+VgjlejaAaO7EeGMc7gi6+hKi/QWTfOh7hXQTmPiSSOxwxMZLrFHmPpW2fCSu03Vop8vl0ksyMq3mU6P8ZpgsqhGEuopxGLySAdWx+Z3eG8SM++49qfai8UJ9Opr15J5jOzO5OHtbQShW/1/2wTfN4Y03gyEbvMFOLpHBjXjjQszSXb7m2UbgEynq1Ao1R1s4kO6Fiqbj8qEAUHopIPXapdTxPDHsidEn0ooe7L/2QcR20cpBtahoypia+xKd6zmQ7D9+N0ahXQtzIDVPUUrWhzfOmww9whrvVWxLzivfGcS1eIRaIbqj2GqSLK53yD+jwwhxVdpyTu3PARlf+4dvtHSYBPhI5pJ7Fy2sHsSI8CzoFCL93rzxGudAdMIsB0HQ/FWRZD/hhhnqOpQpoUvCEQidOtiTsX9x/teYBHSpTJeGWOdi1WeoMBrNxFJYxsYtDo5mc7fulelukdCzXEYZKnEYRG6bsU9bHGU4NCPWLcrwMt/nUdyKNKxpOkoMHzqMeyStQSwcvr9qnmso57Dxd9NIoZPbP5E7dOYe6dkFyR1+JQR2T+zb7pBnrAXlGfKzwm7StoZPEHcdKa3Dta8v8EPYuhxcvo3AdF6b9V520fiekQ3qnZyXOY8K8ncAGvk3RAR0rBHjqiW+SiMqgo+XlxZg8y2CY4SNVeVmvjDNl99z0XWxcRDbG7F7JjxWaMqjOUNvMnF5R7tAIwb1RWal0fnf1aqgAOI7VglXdy+Eb/9/vJBcLb7hcrxgr0zC+jHMmcT3N82dopAP5Hj8wR1bLDxgr+JMKWtWOYTexRUcWbMNs9TFXLK4t0NbFGFvRkrlQtPCcYmwo2p6cY1EVW3TK6lOk41e105o9bWxh8EVfDnFh5Uyz68RyXPkWP3IhcdJR//roeqxcfV9cl9V9M8H+LAmb3VCsfe+q/JzC5MVxXrI6QvfopdsepGpYEkE1RQRaHowY43kIgl6byEQyKHRrv2K2c65xexRLLM+NCV1pQKl+qwi00MWBjX5aB2IxD9lGZBIStLcjimkOdDbz46lsI2/99q16saSPWMiN3U5mMd/AUZhala6Wk0kvOgXcFHdDZa24LM2lqlw58Q1jTjJ5/xsl90N6fypxq4v6iUoMiYVt/coob4lBS9r+U3NDcnKBcGhd74R6x0klvGE01V+cF9WGc6arc1pOyP5fsDFw58JhXK8IyDMVLciq8jE4AHPrJK10NWBYPU6rU/vTsPtLZnxw84wkGYrjWnUxDjqXgA4oE3vWRGeqlzK5beaOvPAuXN6Z+rhWzCGhtA3/Nbhgj9BWQCOxduCOsUtEVwW+nhUSRRsyxLZXKSlOFdYBIEuyT/QALsQRZVUloaAI8PpwIF8Sap6xLgWwMG5tibBG2ByjTVdSwFBJzVh7lOpUKXR5UBgfG94dAX2iv0lbqVSXLmm3SjVkyw890xxIIl689IPtBgWeNC7RpjfksvxFISeTyjiRjSNE8h4DXiHpgENCAW5e862UcVZGp4ObQKj4oifqnaXiHQlx80K3JnjIApmsgosQYts6nMzV7+wVBC36XVCk5EBk9nFVd2ubsYVulYyMdgrtPtUKAQkjQpmdJyYIO2upxejakALqAKPUFNBfLifdXvuKXA65LBtBoYW0Z1SFndvtoalShvpOreFVQzBOUsW6qRahICY0us/fujiaDZHWzvjgT+PfgfI76B8hRr0W5Jau10jSm5/nzawOryWSqWyk0KGQnthaTYfGw6yVLOxvlHXWllq1c4GPz/YiNu0Nnw8PJM4sY75SBvJTOwnRa8y+nIoE0N+ty+1jM5WouAZThJ9omp2zbRD0Kcd3OLv3aMsOIbT9RhOn0Vnki5rxcYygTcvkyh0Kprs8AwOBBZyocQel2MQ9e3xE1h5GNcYEyXJmmitUCsLwUfbJI0PceUHqO0eVat6/9+GY9dl2LH04YGRNIoMBLVGKnwEV6VtCCPYZQie4AA6T6B7/jec7QolrJT2ZOdW2wiwkKE/EppZODyNyoun5evJOxJwp2dt/BQhyJGV1OlCkD7skne1dBr1mCNXc/LnVvt5xIGMLO30XlgMVUsoiIjhGTIAn1irybqrqFMSNDKWThRfEnAjdK/6N3nie4TEJXHVIJ4Yvgl6vmp0jzvL6BirnM4xRhTtDjDso7SJw2biu8sL2qOCUM4hqpysoEZar1M3a93rsnwH9ZgcbaSMOhp7uV6CpJkgxcVmiuFeW1r6FfWewWL1EjCf2tPC9+Foe/HkVyBUqKd1Aof8cO20YyKRs4Py0mrEbPjDk/PABHzbqfCRSd9Jq1KtMqFI4Y8LchXBnnhYJdHFfJyRw7sHZNNTMDtR7lHBodaJeYqJqMzEI8J5FwY58RJO4LmXmAdXyUqDUspqgXuC1sGAgtCTBGBxdBmrj9KEzDqJtCGXBgN3rk8+kiPiXoXestCF3dQ4yKFLe1eXV7j9IPzhSvWrDClGYLqtdG5VX4pJL/jNr7WxO1rNNkND6rE9WiH+YhhHl8grwSMtdRNdG/+MjR02gnZLTnwkF8wBobzxDEANXHq8SL9KQJtE1guUAdIX3qbGwKev/lwKodJd0gJ+uXhrQYPnGRdhB0lqOUsVksWA11NKCJYZToIeLlPAOQE9/xqmi9pO5kFoRXMtP42FeVaLgjLWYTPzzyjF7oa1JrQUp02FjMlfl+n+tFL5qZtrV52jYnjxSor61eDX/m3NQbzYj+oJbIMyrhRCCRSDXtECZjEQoyUTRLrBcas0NkbJ5pnN0TY9oJm3mw9mHyrouCmN++5OcRg2vn2Fh6cs62uA4WzM5My31SB+uhmHSYr0soOVYSYjNBMRfjH4yUMFOqOnbl84n5d/C5vYa+u+QViBxfGdc5ndca6+XUU+jkSaYzFCV7zvS5XUq+h2hajTecMoPpku7hKH2spQbI+bnpFJEq3FgByj7jVfyLTB3RqQHrGZ0BKtkCTeFaIVx/JW212dKS8eFoNEK8l6ToQgPGocWv/F+nObZivSOctx354vn50RP/o8XSvCrwuSwwmxN6iL8MXUGUmH3aogMGiVmBExbffmN1B3RJ8OYeSefE9qPdSJcpyFTEe9dxM0VErJ3YHHYb54bM8NOyCzwgTwIlTNd9zUKbrjVEBRxT2/5WRWl879LCHN0+s2BRO1oqhCSWAXbj1zDb2jAY538iWVm66i7QUcyi+ZjLLX9Lt3du9X4QHNd5Ujw1KRDOWdUAy2GNfy56h89b4WvDeNpPn0rK7+eyXxiwz4Cewq2l6RXlf4p2g4M9TM1HazJ7PIeGOPjW58i1u+f1WtcuF8p4o7N4HkRbX+pL5GejVmw+zmGXHdIrYddeeqTQ0+nLZhE7+4uhz9/wTTKT48xOW23QfWH6ZplBRCnxkPQDI7mSjXzXZGP4RINY0OQjhDrgvZO5agUZoj7hxKKw7Ye2rP+VhO1mcAG5uPF1nPeESzprBH3rIiaAfPRPqX2SKtnOSXKnAuiVxgei/oWUahZLjnq5dqrtsCVfZuOCHlbjX6wIw1Oi88Ugr38cGd+aWM0h+yG7bl+3rcmBEm0GpovN+ZKfr3RZpmy9sgTAtQi6Hlyz/pwpBbCOjh1Fda/QDQakH6LJ893z1aA1RnbaGUvwIGkzYCDRzttXEvyy6TuogDWMQ3YeMRtC2KPl132U5Uo/fnrbS/Lpmqlc3bfxWDVpjmrehA1J0D/FdyofK+66GfRfDtFeSe+IueTXgAIQpVPhyPB9ag/MrA9SJwCVgu8y02B06TfM8BFO5GqgFmq0u3zA3RTQGiBWhkzho6DLtiQ1IsQa6P66gT4EfmNH/a1g18HMP5BnNyHRmBskeFOkaYFS6dHppkVFDnjXclJ7TJbwzLf6Bqno3UgEO46WhjGuH1aoCg27D8xL902jSb/8qIV4YpvZMae6UqLIiJycRtFxvdg7dvVqvZ1AGucfoRQAj1wrtSIb9tyZH7StZVS/5ZVAocyl2+DSK08KaXvZpsBRS4W/ec8U/q2t0gkkWuw0PhHXW7u0i5oazAON+SFB0WBYUiyU8FY1TN4rRXBVbpuhaT903AWBpip6CPscLGpY3+aCrKJNbWFHgiYXVWjX8jFk6Z5eGxHquiifDCIGJZ3Sb7LQMIRfeZ3h+a7UT97TrSvhQS4/8iIl21RVK5p7+HejPtNP7rqmg5T7zkqDkM4ahAxNgMv4Fo0PxMlZRKMDPI8xfLnLeZZ5FwYgO4sRP8Bstk59LreUv5rG/MR/FdPzFBmcFfW5bx5P7MaW2t6hjPuHhMeRy/Yw/Sydy8s72JAM+Y48chEl4/4YlaHSij8ZFQxLfhhCgYPalgtmmbnDMEqTSzC2PDct1INvujQE5EvhdIGIk1qHMuLoWLyRur1zZ5xDVzKK0rnuoWp6o5Lk4x5qfqsyNTCLFu20F0pvRsWov1GOvwVRSElF5j/qEYgmDZDKHv0NK7k3UWReAqG3btsi/DoXvYVmg2DDMf7VrL9OKr9zH0uD0kBRJZe5FCCB7l7dihEucrJvB9/IrDtdIUFvQi/j/dX5Rg7yl6ZrKwkLXKI8eMoJ419kZhpHorDF9qjw6AhBL7owLEEtbCiBLBKBNY/WKAG9RFimMiMsqcee3i7RnEsuyEXJfBuhXU+yKnZ4FoQ+Wq93c1uqNyblmPtBduduJy/bwfMWJs1iEnIH/0oJRCX9G2E1/ZaVORAfdbj9x+AcmMhir0VKz/Hj1Cgmj8XDEZhdBIeWmvpCj0P21BjIHYUgcGxVog8Qx44ZxeAC2E0GMn4AciXLDT8s9gA9Q5+BHIA82Q4lwjqkw34ENsINwFLnLnAmEsFzfQtqY8NFZkC4LU2hnsbpqIOxb1JsG63WhT4HBM64liD8vstkPPwU9oUhwdXXp9WP7XiJqypoJGArzJETxNFumJEd5eWNVpr7SgFgXn5uIdPRSTRb4GZO4nerZENeDo37zo/TBEh2cCOQlVgW3NO8anbpi7OV9PcqlomssQYauJHUjWQvmiNo56cRuJRPvy8mJE+BxX7QJFIA46pai/iGlyKMxq5UCPZ6eDkVbR6NgpkSrCUxyCr1iC0nRJ39Y8egF8/zSpU+7zr5Cvj9Fkxg5EsIHWI84PoxKgeB9cgixgh7qdMnm8/R4ChLCACAoFCYv4rtqf0HKW0sdGORSMuxzyPSl0PAfqPf+RZs4oaoOL7pMeFdN/OvdsVr1pKEP8fn5Qg5+Rte/atx0P+IoPVonUE/dAe9SAYW2GYLxMaj83BN7OIQTXrNKpMmSoiLradTekFWVCOkCk5zkXP4FG98ZCIK+qNypg3Tk6/+VLPYuePNOYSJga3EeGXBmiK+QQcFm176odhpGe735ldT1rb8T5zfGY2lyigKlpZ0wqWGLpVbjR0Us933Dh0L1PQMMLccPLdrZy2A6vJa7Vpnnk7P3o5clvTXNh/liqiSiBUkqvZUdp59FXgTdTVY/Kbm626rgQBOVVgf1w8NXBfX1+ySjFO997qz/bjhlGIaGx2LFgQVULYL5OX7dCOVIoMbMAsDGD2BsZJ1b88xN+mJS7+Ky4SkgJTyL0+azk36EVV6jG0vxaLPkLb//s7zrhyKROO4of1MuchMEjCXsHzp5+P7cL4MK3JAyAbLbip4N86DhfEng96hf92G5XCin5HLw7fUwo39tBBVCWK8fMASNw5PrEC6JHJETjkvnl5YgpGfP81P/xFm1gAIKo/Nh0fqBZe4qAZpIJp2y0qaoMDKCDE7OxoeYoi0KhikAk3Fn7r0qZAuu/GWNhytB5EHkfr1PfrfhFejT/NsNtyuoLGU2ar2sApcewGKZlySqvZ8q9GZ0p69p/vgdidtkHvaYIUp9V+pzllcdjcQ2j3HgvfzIyBU3toXj31TEnuRdX5hzkRbQiVkL6omGsT/oBlqFJS38ECwsnYlL0xrDzGOODrCL8rGgyqjctRadg8mzcc8ktQhOy6kjc1n1HTLVAESFOOEq4456uAJPis4CGztgWJH8vNTTHILTI+7RCgb7SAAclyI50XR6dcjgP0iSDeXYNmndvEWFDc+URnH3aQAsSinuUXboDB+VpxyqcOppWbCC/I8ww8wxHwnapQXiuuHPdSrii8TBcX7ddO7B62K5i7EcRRulEVr4QVuJrsIo3CVue/yJ4sJMWp8h7kFAQ9oSa5W/3h6FOzA8yhhHFYs+V/LLOanpii4qJTWhriPWKMFkyV5YEo8j3Z/MMCitZTzs346cE0G4CQewb9midAXEsjGqm/3tWoVkVjU6bH2nvg8Qs3q/MNEtJENpkjFsRcpmQFwgpyE+3MRXlZzx3uo9IsAveN65Io9ZczLs25Aumb5VezzSFpPpcEd9PBXtl5V3suOU5feMhDSf211sFKFN62cZg7cl0Rv7Ee9aEjo/ZW8uiWLmKQmpGzz4kaeHfpYIKSVQ2A5/zXZ2+0JSbz4eECDo2wlYMfj2JF/CdHyS8uML39h2Kp/7OE2RHLyQSfWPGn4WQx9IIdxG7D1gjSyYoc4/7XNsd+o0LPeTRnPheqnkGhdVm6e/BesE2G0dZQggCny+7rde0baOEzftIfl+rv7u/cBSJxz0aN1iVuiZfqx6734jxrItYlv41TIltvIJ/q1R/gkEuZwMLmBeuId+gUZ8s5bOEDUMXjQhA4IrnufxCG9yHbTy4wAZyAMz13Gpvr7LtGn/yhd8e6x/jmNZvFkS8rkUhX81pzx6IxLq7xolFFgvJz0/6nVWVoOqo8WskXyBw9hr2+5nGnGCxkx9+IYEufVdFDHMtVtctub+hhWNQ3HrZk66w7X4N7Lx/43R8c416ssoAar0MKnRfKbZJkA+cNMEV8CrrdiNY5KCcUV5DayVefjPWQdvmlcMq1xCdRWbxSmoAeh4ew4WY+7EeQ3PCFwpopxubI3zxuDw0HkmceQDo0T6adiPtj3lJ09huh//PwTHIoonf5B5b3qc9LjOHt5pbVfHLC+l1UKc6hts6cG0UnCPS+IBCTmeeIrRm5VjTifiZFRZCvJJejlbUQTn+NGjIEevuDBmOVrLH2ssojPfN787Oas4pp7SYTssBb4daObCuNfbcJkZjx/bolAjMvtvSW8sGVOEnyafP9HUksGK8NiJXUu1kylHve3w8mSSiRyqbEJtUlU/qqgrOPioCCv990s9ZNr0I6XzPiRfvnJWvT2wmn/+fnFJVrlLOkJ5SCdT5gWbBcldPiBJASzR6h76SjSwRstU5U0oiKlkUvhyDaV5Ts0pfasUKxyFC1gY+gKzdYuhKRec2gJd/9fCUJbPE9bIjgikED4FSme7FX6nYDL9FYsgDJZOP05cJ8HSi9xaEAZygOS+HhF6IyzT2II6RMXPE1+prlDcO/uoCXQ0gddLXflPaqUM71fbLH4zsPCekFptZ4Jh4yiyEYHR+Ay8QjtV3Sf8ofihelzLqeeI241zUcJ95/SYi5tcbmFqQNOHnO4P6lVnmyHnQbwXK+M4gaYdq4b472T+Unba8/FMJtvmS6dPpci/yTeGhAQ5Pg+vh5QNXWFPg27zoL+9zkWYN1KnHi8/SCx1z1JmJAmwmSOxjUPpMgZvTOSh4EdByW7f7/46telc9CvuFof8uUtpD47aYUtsSKspIiJc0VW+jmYJKlfvedy394fX0cDYOb03O+eLsPE/YfCiTibQa5Ob2FtrrN+zQlQoUIFYqVPtWYNH0mZrHHp3APK98n8WdFuNieE3sXPvkjZcFh+9uQosA6QOqdta+Hu3n2Cvvhh0JPwN+8/znnnqNRmyMqq3JMMsMFtKvzinnjGfiXfPONpFF0z1kDfIum9LvAgxM6aSMaunilrAPVryCjxRyCTjb4EHDlS/9y8k2ptPRjRjpHkp+gNtIGiVXanUbSjacD6I2+fQlnmlgj4YoYbqmPAMM1Oj12LeZC8qlDyIHdwdvPjSwqCAeAfxp58VAhY/xXTvf8ZKe6sSh3Wm1GWGonxN1IaP7EYBhFKph5pTTUN1qZVZUuiqqlUrOWi0BSifwW/57nkN6Rq4d46nKmrLdVgy5YzmkitLPB7pIwH06ogNbq5I/jOYW2MYIRdZlgUFLYytxL8tRT03Se+jYEO7gzWo5GgwKxEXUhB8vZ2McSHya/nvUQkWxvJcgN2OcuEcmTqywlvcQKRDNVZUqbacuba+Gq6i+jG78JsUcUEBkJ3bV5P9G8xNyqQqzyEVfEdkaKhDHCfsGWFQQjH2+5vCgXciT+pYOJAaRrcPCoMV+tDeIs1ezExtoKT0od6JpEFJFNCvS2Zk5FUCfq07rjBQEn+EQ1VZ9Ik8fHnVKQQIn+VZ6lp8k+dVPFEegm/j1o7AmNfFCWSwrfwYfuRcUktLPyVBMNlaNOgsQhcFF/B9QsYyZu5c3I/IzsDYp1JokYtVkxZA+zQRTt8ECljHSGOGssLry5DaG/Fy8qEkyD19zuHz2WM4KuVE45gU1q1nMYDJv9/RRRF4B5i/Pxt9rI9FupBiK2lvlCJC560VSLctKsbFn6E8BFVFGig0RBP6Kb9f0sNwCR6PbrmFKsbTK9+5K2qroBxjvOeLoU1EnEePXC3mXO5joNfq3dVCEgRUZPTuT/dfCyfjKptM+cKuxLno/9kZ6dD5r6wdrgnfTC8jq/MEzJ7s3j1akdUZ/yflOW9HWGVTrgso32ZkawAh/NBZTQbLMVpn3oTJTh4+NxvlZjY7/pHi9HhNkU7ESu9+kyCCWp1C5uUmAaOhSYZmaVV0PDGQDK4M7cNlZp74icJDak6Wi5QMpmcjfTXgAq7zgbHaQCj7fGnBFQG63Gnm9CHnoblRhpUQWwvgBe3vFxied2DBxd7izvst0/Zgv3w0HcwZ1b9NnB6HEXJyLfW4dzeIjT0O2qODesfq6KvF0JIhelamC/4KwAqRLQfvLzQPRRKCeBPfRJbLNUCadz3n7mSGQBwR8voQDWvNShJWJWym7gC3aYIkun9f/TJcdKO2lefAN/nE1g8d5jkkfsPQQA0Mrbmr92FrvE3KIAMc4KJUNWJId9EqU5cpdvGXNMyrQd4tbW7FuNtSsYGTrjDh9cyWKKs5g8yoZEgmBK2mmAxJZxBvCsiaqM793Jm2ajcLKYn/PO1JElLLlS2xjLXSTG89oKXQzDdt0jvYWZgeVdGucYnRWl63jP8l+UxbIvCmxVLFuwRrpnZnWnumTSxDWQs/XCCXKB8i75tc3u+61JTkWM5rMhWjoKNL2PKtqH+gGEUorb3gIufw1hWMU3T+ZpFSvqbwiCYVOER77GLQoh9mrvZHN6jypAqT3hqVzpkMVLYpLs+60wkbiEb5Jpsx/bfya+8GGuIby3XpYb/jdB0KrLhpKATzJ9k8ZIaz+BhVvZuxuDRIQiw7GijC2/sbZyb3lfoLTZHpqpS7YEur+D4C6TYBHhUMEdKotbPmp62jOFRI4BqVRXjm5oLPjYv7i74D0gr48LaC+EEGVl3JudM6gFFpz5t/NeCObqGKhfaay0rwG55d0C4V48ejwqF7M/MbfGtsPAKb571qhacFHt/I756+lZ5pWjcjkCWNdtOf1JrlPMRfhloSXVUG3iGpTmgEcqrmcAmxrkSWxXLjuNpQM7OzEDb/yB/SozIAmL0gU49wS3zGUU+lP0GpFjh5g4DoZtwm1P8O9orQxRta2yCrWuae8uU1gQP4pAkQh1JrdI0QLCEfvoK2bRao1BFndIhjgUKUk5Xw5PtIOgDHuIDceDK2z/x9JY4xDfBDvzV/vy68lF+nwWbvi9EDjkGpfilZJl3zl8m9Cglvtg6Quc+4LQKrkPAMXF0o1TzuX+CNqMvf/ApOP4q0G+CHqlI+aD0V8AdU27a2ZvmO7GakA1j8guMRaFKi4wkYuaGfxsuL+j3ku7hXAivHcDV2bkDT95PRGffe24Zl+2B+GX60tVIhRkthQGOPLCsmQztT1Ozo1sqycXI0aIeNArtuBSJwMEipqTscYHKcnoZZKIcZ1jebHT3KhimvEAF8fXTmJB79U/3pK8vkbisuUofuieh2LpCCu+ZNjena06wzuBfylpc3GttyArKvDQSpRuUDUkLdApq1gC5/nuBjSVCI3C0XG9Z922MIs08uAyZ4LrTqJ32m9FQANTzAZ2vZXt8Soarnm4hxS/imcV4IfaUZM1mEEcUwgNgxP6lBsr2HDbIiTm+xGCwoPDTH6s7HOd4F5ZXe4wWkel4mbsjEliInCn82bCN00FOeNtZRctew3m49S/cRRofoEs4BXgNwMrNaiNw53wTqoUWsZDoIWG5hJ4kDJgmbfKbF2A/IRIu7jB7ZX4dpEOXcLKA/UD52J85EIu4dHzU9jsgiBXMoCZcGwLzV7Hvq2B5/IgP30bpf92JONWxKTqzsiNIKkq0AFywChlRZhz0M+dxJ2w7i7Fe40bGNLSsUEEblN2M0yvBd8ltOpog5rQlKnjQbtXUtcGqiV0OhXMWPlpBDnodGnVfX7AriZrmSHIWC1tP1sbRewK3Y4863dfJ0mnnFLYf7S1FSI4l2tNCS2o9cW9wQlDcLC9Oq264DalS7of+IzecwyR2fFhnixoy2YxnLg+xPnoYT8xt3KEXOnxJzblywPg3g9hmkiNsEUAECVDRqHrUCv5G3c6UC6fget6wHtAvMvTBLTbQNIYSL2dzfre4RF6aP45NMyG6xFpMetnpE2RFGXN7E4cmGep2s6eQppIpIdxY6jkMDluRJThy3mdj2jp7R68JxxYt9LsC7g6xciE05YBGzPkz+pybHaPZGjQgmPez15+lCspWpR5E+ZPSrsvc3ZYtOOJIMKxb6wNCKks+f4oSBilKU0/ZKbd/USNQwNNYmaDisIsPySEvPsWcjM37HAGRNZokFAx7lTDCNCLNgYwyw8tZ9nm8jAsk+o6GduXgiKIyqLT18n9Jh9xu/kZdIjAGaIcBVlgCbjqG5CXXZcVpuoBn0iuSVvmMyXofBX3pSPTm3m1eCC4/RyiOHBFecYPu8jFmAOVYfpu7QGB8uoqx2Ag+VQ7fMrq9ULOpwKlQFLMXO+n23PBsyMcACy9PMrY9VjTriVVYO6bAM8VFnVfyIJOxI/1wYksiqH7E2wVaP2LB00AMi6A++qsw6bL7P62vsc/socELbkHSVoUBGZhuzXrC2zMYG/ftitMURQNT/cNKMCBj9+w4zzR8mnBsMRW+0ApQfoyKOZfGuacZhFMHLDpASK9UtGvTv8QR5nQw6XHGhnxUHSPAE9ycR74aMEuejwfUOMGXwPUIiDM0JiAnKD3WA8MV3iK50hvXivqKD/t6A3vECyUyChmNRUYjjta/GcqIePuR9Ip7/RhP01yduR0Hc+VnbzVBFNcaulhAaqyf9U2+vvkdPcZ9lIFthk1q1yy3Km4W81Mb99aW9TL9n/NLzwlHYFS3BaAClyxlUnqr73c4aHQFrh1w+1mdabH5vKc1v6Ph526F1lSKK5EjhmBbPHCAUT1WY+3vUjCBA0Bs+yhByFDV1ct4gaxx5ZOLJExcS+b66njRbXsfA4FOGXTqg2HFdXDu4Vllk8JbvKBgamfGW68SvIDUrPG3OTVPa37q7FQoctYBx9qorJ1uS5u8m4CrJbYIuUrJdVt/flMskKj5uZfHCNk6dFLKJIbtX6dN6iZSFcrxMPi7HQ1RnSWctCHhWcc5EFER1QVQ2pGqwG2wDx2VvbQDzv1rYVfZuPEPhMkw7g3dhJtn30MdbHOeNBXzvgXuHDfoAJXby02L6d1PrXYgNePMXEAc6BI0zYHhWiwTyr8UPQNSvpxfdN6Qa5QKURlHX7tH4JvUP1tEGsXl2sw0tt9RjvpuLgfi0YqvYyiH/cL+tNI+46KMZNuvIA2f3WeyS1m6216NhnlBP95pKFEsPdOXerNhu9fk3BWtq4chXIxmgSdJgF3b/z2LFRsj9PCCkRq6S4zqqPZtqPUC0ctUF3DxUk1790cLCZ2esPXZWTldn4RSDB2zeFGOybitvbGH+AGO98+gPMCgw5iDVdnCsCi5VAcuGFpwy5nFUHp+W9ST6tLiFTti93ctEmoOCtA50cwc5lf8TaQncGrz+3QQxV1vKcy99zqtE3KkGl9C5kh8KoajJYAgVOjpGtZW8w6bTbhApB1Ogohel1O7ZV43fltqUmnuBs8nXoOT7VXL+FecnHXys0SfFpa207IQUwdhNL13K3b13gV0Xg1VawgVe16Yo+pxBMtVSaxYAK/Ms8C5y0iMKJ8/5Pp41TlmQOnjCHtm4ppHGHxDH0YssOpDeRdTXCZRbln9mc1YegVCKAZQd5yU43Ln85Gt5af2E8stl8pBtyJop9nx/ZrcjAQ6IZR8c20bxwNnBhdx/A1ARHYbb7YtZ3oUVjb2oxQayDNfzmv0aGBMguJV80HE+EcPrYXiGBz2zbut9RfiNvdRPUzriNBuoVRwAt15DdqjPoQTgJOQPRVg2texMGHxdGmqPb0j44CGJNesgWx1iOWaUps5vTJYiZzNOehPSyC0r9qo/oJ3qpFWJP0gXGEAk/ThBmAJM1Hma+ytgnbatFRu9HLRAWiULh7Zu47P3tcUnus/Ri/zhjRuoWgI47N0i/CtRPnK4A2A2oMr5YwwW8xeznughiXmoGhW6Pwu0bys0IbIu1vnFIKrBIj3j/6pDNwX+oRX6Nlx6fkUeL/ssANaPLghoWrF1dq0xuCHzL6OU9OjGVvFUBAiXpDmn/JCeI0nN9cHMiwwOdLGm2x2nyKm35iqOgQK256FoJCeuh0hQfCJYYmnS/3chOTlrqSk0UCjnbYLqslfA+E0NzfTE0Ig+8ZK8a3mAa1/i4B1OaH0KlQw4PmHuG22G946l2Wt2DfVPR2nkEY8utg8koeqWA7JQAyaR1CTPNoWFm9NAjvqhj4qmXT3nLdIsPwf3R9QJtbGsRqSYid4bTYr0oT48SmP1OJI6qe6sTmK4tNf8/H5gNNnvYncGLUZSqAOMM16CyDTdXftJMCWLtnAdf/s4hq2r3CJgaGpnj/KJPp078NwX7u/eHe/m0q3TJejUNCnvH9SUt/KAonxOBXj7VauJ0ovoon8VnoLs8BUjzl3U/djnQ92G/KLZwTFVQBSX8wawdh5a6KX6nT547zCK308+0UvaE8lOQ3yExge1NKN0IynMTrXIGmz0H9tZ0n0TmLxgzMSVoZ6AnGAiVgVjWUPO7G/DCdYnTbURQ4D0SPOvoPwbpMGsVIXVDbfRi2iH0PaN3u4nVpu7sSSzRCRiuXlLZyX5cEo8+FCU/QwDbO8mH4RWbwM2pjivyCqm9pr7vyQsJiUHGhQHMqQgCSVW/fCdadSQjxZfbMqywfJQmbVJXzDMgnAgsbxCdKgX2T23AiKjyiR5xaW4scIHmYNRpbdz9Dhng7metibCQ9FJhVQjXlBR0HPWo1MGkhXdOpAmj32u+KjGfFkzgg7+CFg7a5uiaTHEZjbImmqXHVGmfJkjE2vLJH/lKeSBla9zHOfCeOph4tDSUiGWCyUnhi8z0swBrj3V5PH3NZnTuBJP0asew8LsOr58zBrCEpSWygWH3R8chdA2kTcaalRSvuZCVCCWkbIeHVj8zSxIPkTgvUG1prAci/WMvIDZmmTcNR2la/HfMcSfl9YxfaUJBjvh9Ln5WoWRso1LX15bLT41+hZt+OEtUg/Sm0zVJmT1soNDNzPtYgn94UOkaTMOp5ffod71rzI8w3VPsG2T9JVA5GlvNAy+3eJdLzOiWZ7MBKClEwJ40xRsf3n8Z+h+UJjMzXH8DnRDlLQbQHFT6865tPutP3fzdHwOc3a6NGzareI+Nx0iAzqYTqGaV8lRn+6L7mSNYafU2kJ3le5FFys+jF7uJO41NP1aCATo/A7mO7wN4kU2eNLu5O9aqKkRnKRB8E3BDQEKlxTgzTA0cQjo4ZhPYmpV9KrnDx2U/YU81IqGxnpmnuUZl+GG+esciRCULWVdODIjAjl0+8Fr0AYxbFnx7uM53cKjBbXZQa/hYKInMzG0wdRBfr2VpoO/9cQb0rpNmhI/s0iZcTrmVlcLtbpXsolfNZMzkcZlAon3/pGhFb91NOZgtR9ufklKoB6o6o6axwtlJyoE/E9QXHeVYznZ06b1k6MPh2Nn5zFhBKfdOPegPWek49WP9ckuBWrMz03MtUbsK+hQ9HQOHjNH5OAMlRDb+9PRxkILysphQG9JZ8oZ0n03tt9vVpRkxczLMeZjsKE2Un2rw7v66A7wLRY1GaxxQ37omeGpa0DUf76Le6abXrpwrTlfuxtNscFEuRtUM9vxNxFXP0QYK+wHkG3qEPE1GVqomsY6NgQsrwV2twrsJytPeVoOSGYnD4ynzuQW1ZrBBBpMAmVxI1LuE8WBPWxTOukq9xLt1RhCP4pjqrbNj1i7WfkpHRYDquCzf23yNK7Zy0EOjIQK8aqquluvzugQEZPeCQFPdBVX28yBsRH5r58XQYX+F88gqDVbmxEzT+Fu/WR6j6V1LSyKu4bjOPWx1dvtB5TZY42odUEG0BXftCWoVcOCHL6KaTIZ/yAbpIUIX80BJaRl+4/8ln8qMfG1Lmpad/YL+m/U654LYzR4eEam4QeqDF5Y4KJ/o8Dubwz8GLhJ96Q1WSn3gjD3+fxQBteyu87Sl54TV0npNHVEbI5FnqXMjC7nXwDMmqU+/C20xPrObVivKMspR0P2nY0KhFszQkfC3KvA7+Nmtuqjb3CyUIBpDAE/zZSM1HpEblVPe39lNdjo7OSDOfqkx8MQ5ahz2UtcmkQVdHT5lgMOrQ72DhkWhT06mxhNqSM1H7oksnVFkLEkdq4b7OjhT+Yac8sGaYNPEDDHNAQroql2gSN1A+MILGmq8E7Wp58zV4YaVmMnbHvl3d05E2ehhe/DdyKACbjHAqIyOaDyUZeYl1hSFgtDTi9GlQAcxtmiE5qdC2hKwb+T2Ut/b4EFjT11iuUVb/IBw9wXGpjRu8LgytZwxHV5HGQKQSkpq6QPLSce5355IMtSqt7DW0wbxn0Mg0SgT24Xpe8Db0ddrGZjRMmJcuHC4oCaZK4wr+AdUDtrger71Rhkr305f+qWyP7PRsyBt5DuvTAmkPQGliE3F0YF37atb/gH7xWmlcLaXbMIjAt1xaei23Fwa0bo5xLiXZZwGHnZpRLd1uVTN7gtZRD/Pz9Va+c+wN3aJD/R7BiwJVsWgmfT3xOrBoHCH/G+5/wfrHrW9XpXo+ZawmVG64A2odd5KfMltS/+QYzQ5COUQdjyXylAELUsnaNdFAedHOhpsklGpgmBe7IrSfEtq9qAlzkaJ/O9EdOki3+eg5pExap4y3gDXKFpEqkNdoO3FbduKFyB+2Lq5tH6osssDUiAOfHDae8O4IK+gVJNW1s52BeOnX65ZRv79tunFMVvs2FPL1Rc4s/QJr9qszJI2KKhIgt86Ecl0NMQWYEIGn0l7iiL9ACAL5Ca4npsfU1lvKNB0a8FffTN0Po4eHbalYEiRjEoEu35ZQ5sOHEglxx3nUbG0cONSEX/W1lXstzKZ6FWarKip59K1oE7hmBxgK/vK7vN8ERjzJPApptbSZlt4b6JQs4uoNBOmaMfuhqUbY9cINV2fBnKqx3xHn21H/QLBCPmA85oypmg2MnKXxrqhElfJprRrBve+wQ0KuGrYmvg62DCRsbFEaVL2FfvldduydACwN41H6cPm5221MVV7NGI0bP0jq2QfZ7AGgZzQVXNTp1fDuZPnigW1Wcf+yVy2qpG6wjof7TwiAoEHjMYUqJcTWp/HflAbi4b00IjC9xD9AaPLVfvoPZIAAMSu+ggGVHnDjWHKcpeSnngTWjU+82XK9UwVUKaaKYfmW1USqJzoeexazwV1yObEjJmpcBMbkMXNROEW7yQVVs7G3SFL34cUJetjXnvM1gys5tCWy9GHyF/5sDh+VpIA+J7TnbI5r9DFLO+ipHuIJf+P3XpG/eRXbhUKfmyQ0FqPo98syuDkU0OfhyonZJ7ucN5xAQak1a6YkLpNQ6B8Sqp64b8u0MUA+a24qU2NC1cvtCMRhXrSkwcd0+3S97yMz8Q/IMJRoaRs/pqCu9+VQ6a+br1K87Wlpvx27Q9W9usQ+6sckVcLRp0jbfkg3CzvsAbjKleTVEYnnOb2F4TudtaJsXoUNG6GcM1Rm8lpD4vVJ6g49taF7Tb6zWdQi1yXo28uoJUd8xbZclJqhssd8PwNZ4w6lIsO79FCaPR3Sssuy085SqKA7OsvlxSacm4QHnuQq4xpmpKBluwPB4h/rl3ppWU3Y6bFzpxHoguPPixSxlWaCcDTdGOnKmYmkFL2VFMA8LZZcikv6rpPINtYha2nuwVe34jGU1wW4YtndCfzAgCITNujaZ9SpbHxJx6BfVfYjYF4ucty1IV+8OTF9RDFlLOMLlg2Y88sRaHeRmtbWNsC69r25wryE6Ljht4jY1g0DZW3L2gRcNaZ440XQuGmrW5q9kFsScKFV5pOC6s3i4rTi6Hqg5rIdqm8kSCu7eh7N7JBn5vo2K/xlgRDJ9PhGSAJXMAaA2JXjVB3oLQhH8Fv5LUaK7FTSHA1dKGIiVY417RwlpZOPjhjTEOybRjjKt6VL4HgN7Y17uwtsqhTTAUiJyG8aSox9KvNPDF8nJ46jde627RCg6693YWfNjiBF9ClR6J4PDXgnm0SLgG+27h1ZgbT0WVlSulMXo7pFFz7T6K+Yt2kuS8AvY3Ul2erMOLCNpc7SR3wL2me25w0eRHaFFqcKL4lqt0VKzetGDAjc5ZBojUlvV4jMzt1Wjn4HO72tdNEGR9lq3EDkOdZ50X7wn83a7LAlVAYg+EWOP561+3/cA7IZKnBxePQ2mJooUGrtPsZzxK0zxvJtMwTjt8k+26KVEGMoarEv8iNBIq9v9n/A7toTBQ1dERHyb9EkgizfXpjy8icM0R8aSfLQP83mvgPLKmbU1OA1yEj4CsuD0JsFD7RTDZOaJWU+sAlMgkqw5IuKRJA8Hd7X3WUe1IMUxasjB/HYAWsapZauQ0hJ+vg8e6UiNSDo6d9B4m89pGB2BugtF93lrwgiko6/JCMzlXbCnpBFKWLHgLhLFFJh4BywP1JYSC3fzaflOBTJALk9v6fMNgCGnpu7mCJ5bknXh3cJi+abcsN9dUS2Mpm0bd4bl3YtExL6/3sN8sSZvM3eADOUPxk5WJazXyczbfFxqvV5iGVTT9Bm4VKe28ozKu4xtKL5Kg0sBIfSHFVOLFuKm+Pz8/lsYrS3SuLkdIPXhTo6+6ymwYyIfZtsgCPpHv/6LJH0WdTe3lWGSg7Oq74b/T5SvG8DDIZmx+qH3ZNReHKsbpRz5+p4s8zzEnczq1MdkHWFAsKTO41gKI5EXzXmz9+rFdZkJAsnyyw6Xm3LgWvo7Po1Lj4nK7LNFKgtNgVs5BjlqTqqZsy8a8smGAkub1jpS85EQECg6zvddtfIZPrJZ48aj1Wru44AGLeXA7q2VWYuXDjVbWUAv8zpKaMwF0YbwSz4s/bkr2iZa8NNLoIS64nj0/jpSJ8a4SEeMnO92EXs2piHVz/PM03lKuQRXwuA2zxKMkGHQpxtl6gI4MQMcy2sEz4YuOZNJa+BnF454/g3uZZsKhj8lOnX1JZxpPEpfygPFAjTODWGQDcI497/7Fc77NPwbRtkLB1+zrV12frpH2dKwM8v32ehGxpHVnsY9lHd/cScWi4JVkZCsLiMP+VEJswP8avXXi0obRdtscbJOCKmqEfClnlgTAtd7HRamM+N943dvuLHqOj/PsEb4Qn+pCgBdAV1Uz5KST6n2vDt9gDi4gZma4OxqglQ39VMXaBsD1BiZBS2IxkHcC4P9SiCyM7lmrU8U3XVulbenDB5CD1/0afo27SJwl9t7BF9qXXH59X8PHJFYmIQ59WqQIcw134R6kYuhRi1mEtMqofVLgmmHeiGpOX3DoqD2VuEPoRR164JndnTvYTiwZtw27Gh8nZ4v8XJKo0j07yRK8dl3EWPNczlhVGBSoBDhm4evNWBNCWx87uU3AJW8QH8EwYu4TOw61m+nOktmyZNFMva2ETWX5rnckJT1rYV3fRsCy8CMjYlv9gCum/YI5jPUFlXu/DL5xpI+yy1jPtJQ1trVZSKk0AGshI7XVlZ4GtyypM2aESQlgg2D+/Z3asiIFJi/BOllaeVhgCX1U+blT7q+4PaefVe6uDjuDXGLql+WLKJnxX8wr+VSNzxBcJ8tsNYYpTavFKN7hGbUiENq1Xuc3rW8fErtv0MYTHxIARqqBaOg2jarZ9zigdXlTh4f7KMSL5pwm0prsTkcSOZzmV5eve9hDUHVM94rnkPLUF9/eZJYlQxsqhijhPz37WhyERidNnk4C0tRewBuIw3KX7I0Ln/tJNxmqEr2zDW2iZjoPwj0O/ij0YBosHHdd+VloTtxC2OzIEa+wQcsD61PL9Er6UZR1E3z+QF5jfcgEsGeyz/xMD6+ye9QEhHMpHUoRibDmyWHxuZ+Zu7kdd2ptX3XOlXFl6nR6TVTqAJalMzG7NSGEdZtkE7IASerCJGmKaOzH5TMwn9Q0jyei4dW7b4odfPz6K7jzZDrDHufePnSTpfueNqQNT6bZv8hgvF8HFvJxjgQGj27qLXRVzPlkb5mpW1DXo9ROY1QBrIjzAtxUSndoWMXpKOJoIBvDg3KQtoox0zCCF/bE9HiKCHf2i6jevoTQt0eatNEzxRHPFIgdnr/jFwxsCg5N+IRmmvWfy4YUvobwVsOOSDfdTeI4/vZg18tl9jZANALWg6awdFIn8znG1LCEmw+MlJWEy16kpUoDyDt9ZH+ynFY/Ww2adMa3EfgAqbMgOPlbjXNcWNp02nP3C8I7IrA4t218GkDr9CeHHpeiy4xJ0WhngwMO2+mfT3oft1GC8AWHzuMaMaZKA5hXdmP2r7HLsG5N2RENy16n75ITpc9GFlHwFkPMQAclxc9oakb8pvyYkDrL37IZWb406+PPpYrBPJyjTIpgckaf772ZxisBZkJakq+PTohwKU2cw6+Z5u+Obz75aDhNZWentEjiD8R2kzj77tYbcquOqJVtS+K6UheaIahZgmS5nUp4DAkIuR+9YUCBHwNJnlnlpcoPKJLec8xbKQTkENEMpjDyV9ENlxR69QKXG/vhjUoLK8DZRcAxHoT+iFMLejvEIW2hceOIglpjFzhpIl49k5g/OKim6vFc3923DD7rK/S3BatHNCUkQz+AJ1U17lnqgLrlwwDoHzOoQsYYbEmdKeIAyuAECTJ0OZSZl7FSTCm+GO9YPsMZ9Oqh3FNuoBqGFWHD0J3ZrVJ7GJI+9QlGrk0gNLkTCNH3izfTtkCRs/VNJtN/mZkd0Hicdb2xSdxvSKBYXyul0i3A900+wrCul8/f25Jb4Y/axsQVuaqGRS70agkc684sSugjJhYFA6LA5zrtUilcoOgMulsCmBI1llwNOOztGV9Kb1WbLUJbsb5oqTOP4HIzZWcT1WhtwoLoizyruEQa3r7znoKTjH48iXz2M/1GuADHeI5lvbQv3wEIEfUctueCsqutlLeK39XL4Xe2GF6x3xTKZ6Xivq0k+nvlnCJCsQcP8JqkP03W4NZU8/1XDR9Dbe8tFMGO/BeSwmsxQOFsLXg50veV0uzK7AyeT8RmS7+ejIHsLGUE0CNP/UZcg9HLP1RbLDdVVIa2eXLIib7UDXVFIMTHYscY440lKnKuDxFkgXtEX6DmaLwEfzCdaUe6Daf0YT8PCPWwj3ll4EchZwnAFUoQqMVASVjR3bWD0cT5FznZ8FtjT5Mw2uF4rQPsp86YZU47hnEOdrtaLBWQI6UVwUdGypodzBXiEC+q2aIYCVDV9BFq3Ajl84cwqCW+1AL2wkF9CAnGbpMBW9RhPWZaHbhmd53Sj6OMVLlSNy4r7TsJoogqHXI3Z4WtVf3sAxcwsn9vku3tgvV6iuHgjN5mNsyqLGxDZmVgxiC+7qG14SmmicPtXl1SzSMgGJQ8OSHQdzX0WLLDaoIgyGCuZHbC9sEpNyMSReP+HfFLQbGl4T+vfTlQ/DkSzENQu8nIvhSjkQ50zhrNtCzrAJ8CX4oqYJwv/Xch7kMKotV3vnvG0+1AUVBFXhhgoigk3F7eOINEygZ7jJYm8kgE1U/baGLKYDAIB1OHB3uIrLoESf0jhvVr7m1424Q+1MNPaSz4uadkVSuL8fV9DQe6w8VRqO80MqH0AG4GfoGeW8hYGndR8Nw5lNVhixZdbEIlHTA0zpjipmkjZ/d4UBdrdBX3RIug6n4RSUOd39W6AhArys3E4HMpzF4H7rGOnz/kopj6CTsDQwfweCPw+T3ArU9R1np+dz/Y5DosB8B5kJ1R53Q58LQxu1kZUg4UBn9ECWl28rex2Ieo1A1t37aibdUKAC9Xhh1T9PWpu6KcWUqgGiMc20YFTavJ/NI/FlwQJKoF9ayaEtQKTuLApUh6bOvPPvRsg3QlqdyrlyQ0K3m93vo7BqqZEp5O0M/bDaJb6OQFdBDNN+r7PGGczqoKzYoAjAyF7wlohEksfV1oip/bA8253AKKOIVBanjBya5LzOQhYFnJYzrTEQws1dh+XBHRgcMyE8L6Gue0oQUq0RK/3UTzI5QJn9lPU9tpzjO52XB+ldLI3MDHcvSGeo2JCejhXx5BkhAMAIO9JhkaQ5Xo5xcBne4egtp4H5ehx87Vk4skche5r0eKhYhVzcQKCFMa58epju8aQcr677z9KVcrWO8Dx4A8eZIdX/5+N12q/sW7+p8po+WUtTHY6l/LX3Bczt6YeyUpOF6JN51tswDSOEhF8Oan1cQjweiPFXI3ka+ryBsNCI17txHv4GrbFjydnbfK7eNv/7Er58zfVoDmBi+pMPQeOp26gsdGrpCwHFV0SODILVGGw0EsC16j4X7uKR1sNpKnziYq3rPHYq8P4/q5TfL2n7h+gUjZVjTiPeFgoghU6WTDHAQAakW9BwsIZMW6SmOD7cPSIfnN6QLA+1D8J0cwHYiroYVZIPAVEGnVBkwIeHzU7CylWpzHOcdRoiq4wIRobeZOavYnqu+ETwKVtgBtHkFbbsjWtZlYSL93bXEHmMD4PmrPpU3t1LXFPis19iFJ2X0KBlbobyzkGdN762ExroCE8IP5Ycn4fZkikzc/Tq2uSLKuD708UL8erDvy1ZmEd01v2NjCqA8PYmgHas3v7zkVOVa9iy85VgYxkvyxzqA6DZ25ymiZdsQuHPrs9vNefE9nk6r/SrHDDR4nNsi+dHWn5+OpNziAPBqvNta5bq5VbKEKTleyvl7hRFmCxOqMIHn9tM/HoAFYt8TS3ALEDN7MdpW4zlqD6Bt5TdIby/HYigDNvM2l0GR9fFtkNmXW31AyLMkj3cClvGnHccaePEJc7EpHOSY1w4E/zLT4Txm9t4QcWy1H6faQzDXLiRDWUmig3uh5qZlH9/wCMUGFF36Zi4fBzg1phlCNpop7KPcsVIQaKRC+BFg52v9A106KV3jGIJQVo66tQ5chOvO8iufhMRnJXGTEAWGRcRWNdaPMOSG8nF+HtkZ8N42GnEQ1a6LJ8SVS0CeZ6QSshOJx0psJrCGQj+1AMA7cdAaT6/eUgW+K/D02k3Ejpq2vclgdAi+h1hr/fGC/h88JFtIio4h6kb6LCnC8O/ycA+HbAUYSTvi1vEeeCWs3L+4Adau5uA8XoODeredkIwnFuK4UvliJ5v7lohhrwYPsLukLUmd0m42QSD99FQsFC5XlOtNSi1lUt+jp1cEaEE4ZofeP9VIa9DGEBaAH/Y3619+2DAC0GxDeQesHu/WDcr+WknHij5G5jW565MtY+Y5QOiskTZGx5CaYT6YhPBjepau0ZSHC36IerH/c8wN44Op765zXEcOLy3Nf6TC7DXD2e2BxnhMKB0l3BVKu7B+WoqQmvcWz92p7t/unPGqYgzgPL2Da8KjnzAeJL6MivrLd1UNz5Qn0rOO183ZfnFTxUNQz+jK4UUpcbh91PXQM+crBloliqzYZ7buMgI34Jm13kjwLmlI/xSd+L4qJEpG2i53VnmqjLO2g0rSGp2lEbPWftB5Uw5mE3Q7xjaz4VUXvPtH/Y/Fia2ImQ3fdwhsp7SwAIL8o1nsxXdrJHdxSpiCiY5V1p4ek7aqc9fsndqdlokCwff/VffUly8jPRExYrbjwMNPMSk+qVSYVi6/ZSZmNZCq9y40rQE1OVrAS2R7cP5eHBjtqOHpTxsbcUJJdiOgYfAmEzzlAAZ7kvvU5r/UNHUpJdngD2q804RrqXzux0e1Ka9XRmNv/nJpWzwA+/neSMzTWmZ5j4VrVytEOohtzHUifYd98SiPKpfyrjeedMe3aqtpw3NXRBckMJbz6cCCzoocPp2XWrCJgckSjv0aDHe2L7SVAOxB3izkjkbcny7fGMXKH2nxV46ohj/NjfVRkPmooKJfNZSz+2kY4URWNexeFw5+1unj9f9UiPnfMwM7TYobr4fpXKKPuua3cqDqw7L1dg5ksr2WTh3PFvfDtRREcZHaLq+jNUB8PxNchKUYwtPwxkDcjtTW4x1ZPqxLy/6V/UgIqcgSx5VX0l95Ge0dcVISDOghwadA6Bj+P8CKfgx4nOO9HwwRg3Eq58pOWL92jRiFGbqfoDAf5FK0F/XRYp7A74MnMVVO5qDv7OjBKL0VFrbomvEKpAsdPRBLIz8ffp6o05uSe1PYBdBR/7EUpMNNwNWu6WLntM123H+D+zE3a/5n+USkNi6cCJkdq7WbtEfckBBK8S95Yj0mqFnXMBHebAaEWUllOFRX+j0kOT5JXly71b1IM0OuZB0+Czl4isQwGa5USIlbZhyrs//+gXdWVxTvuPCIyxEKEUzj5A03gNi81rGFnGe80vEXzImnDB56Nhcv0NkwgBM9tNClsiTrxND71XXYRkYPYp1E7yToKvDSxbwHYWHyauVwJ0c0s/pu8T/edwrnewGbXIUtIc+lCY0tU2BNtB3UUjshep8iM5XlhOgIW7K/923GlatkBBkIsyKMBHFgI7u/bqk2LHUd5pjvXgkkqa49u4TDIxK8WBDvbWjAewa6DwjwN2jhtgSbMrc17BOEtwKZfTpBHTgjjs11RdmLi+OJZ/hzZYZacWRqYqNWz9avfvjSFFlE3ytRagW7ysbQXTPBA2dlcOVb0dNQ2AC1eevhXG3UiBoVK5miOZnCMglolVviHZHiEiYcKzkuf23JGLYTPqVKyzMlcpi9qrMgycGc0lI1BGRc5OHtkvHL+cmoD3iWjtwxX0Wz+v66jc+W/xlz7xu1MwHFUFO8kel2OGqhdb7Uhmk4kp/DAaoEEoP4U8lbU1eNE4zoPLKh/nSoZjBsh7LngTEpCtqeTHGTQeHu4yV0+HEjpjiNV0cWnbmuNLexBAayx7WpqkTpbDdxPjJWFseEHntUgVjBQD8xCYiNTp5Fb0YAck4bJuimFoODr6K9QbQYMifVXQpJpkuVE01Xr7aso2aH6cMG/b4Y+pn6iten792RdkOa7Qed2DMnd8bMrPQUMrWvkllQbfODQExSzkWEtk/fr/0GdBHycLFuvFwCb3HBzEVdoKCntwEqfHV3NxqR9AFZRiugxlmX8Xw53LIKpGBgPk/6lxmNgcR+RKauqgL2L2oMbCNo0iOcHuEYb5f2Jcsi7NAr+ijfxWpsdIrGUgI0+n3SsFPmW6AgQW+F5nLpEErhqCJj1Q9IDFnfHGJf/TZTnFLULSqoylQbOeThzWtpPRaaCE2by0pamyHFF/1C6WAJxhXUniDL84T313WwV6I1Ned4cdAsRhcqupn7BkcBrdQPIWrS0xlDoOnRJR35/Nr3m+9RcobawLCFSY0mEblgOYAvbe7Ha8PRXuSohhQSdUvui+Z3JCG/myrnUxy1TXSpOKvu8Dd41NQ+FPmwCopRuJ+w4NuMTd++PTCnlsRQvU6Aj70M6GUQZx0ezglpHME3f4DOvogLCPcch2FjWHxsf+R21cxXLMoy1IfSmWtNvBb1g2j4XiXnbZXT7eF97z8wo6TWC8TeSvnM16XcAVh4Gc0yok1BUIC8BaZ62GYFME6ZCH550mVaYuhgK3nvkvAthWAjVHaLqe3ojKepfKqkXLuAHE4t3l38adcZVWMTP8jtpvEfetAPQLtxxgUj1tmLuldTgkoJaov8VW1vOT5zre5MpGX1NHi7qSS2xncHBdhOV0OhpDf8UGPeeDUmZAkitoA016fMHkAXiR7xOYHkZO6HbfaJtrFlMhu12B0CRBOUSezbrARz92io+QWuKFEaRt/P5rhVABo94yWM7HD51S2Rs8pzIXm5bPoDHaEnHcCH/QyUkBCGl0U1NDK1uF1/fOHy0ws5MJhR8BGQng8n9KuSWWGY5J0VU6qw/D+ge4pNuqstqB5UDeE3K1I5Ye2YTFqeDFcoGqRt2Qsb+H2xxTLrloTSpgdwJv076Jm4Y9EPCLz2t7fMHoJXyIuefBL3k7iooZJWKIc7gL5HqAq6ch5QQx/RMhHo3pN5FOOvmmsz6bCMe+dq3NMytceHPfCex1+3Q37Xpp8bEGh/C5kM4ekjmtNJW90kXdSZi8xwzNi32657NU5bd1kvmE6s7bbFHPIn022GarR+WldgO1udaXAl4qi4eIPTb3Qq9z3Ajoz6d0nFOIQaFcFyrZQWsBOfdujJZv2lerdxSrGRCZDmpMhwZHqmssrSrYzbkB18R4XcUHTa2tgGbHigvt5TGFV61vHbJOT7o4uxY2AMwRe+PVATeAfIFXpEHbR5kns+RFG2H55HeRiVQRRio3HhZpe9MLPosDb2Wz7UlStXI3VH/RenzeznAr56KBM3IFrD+l0yc7jnjuGeEwvfpBdJFLvQG7exQ0TZnTE5J9b9XktXq2Sh8K6uisAArAYQxbk7RerJgsR5SZFaLCAt8FnNviu4RUI36u4Ox/jhzmZ5YXCmk+i4gRkT8+S6kV8/NTiIrw946tt9GOWAgXoP35t1ZbMM0RYzzof4w2VvhqFHwuMlVH53TBk8YKHQE33j38wgZkWlO4gFvBfS58PjgQema/Qu0vl2v0xNBjQ+4ioSQl4ddzJ4V9LAimpMhNIr1ornX6gQzpwSBaZtXfNlF4QsPC3oooG6ZkxijDPVQphe4GwaKrMHRJfhJJ4Ld3c8lL7URSr9+go7Fdd8ZNDQn5FPM0p/Xi8HHAYUwR/yZlS2SNHYh1Jr2DFn6Ws4E4dlamZ1LOpcgJQ1lP1Mahmsy9lpBmL8KzcH3nUEHkU2iRyySGb+PHiiylyKdXikUn34HGWgb9+i0IxzVosXIvbvWEhh1eWRJv5bVvSIBdPQ8hx8VCyxp9EIzi0GefIMM0TlqSDFspAQY57JHxXYpSdstcoTCpjXNDL8Q8sZjJhhEd3aaadwccldHpvXZ2mya7GQNzVRB4xQQh+k5wkMCfaqVNO+36JZER4qMeu2nGsXj8PtN0h1lfB1RAlCRREXyaYv2Z5ySmLyjGB6Tqi9w+P/YHNm1VPUEiffZN0gL9BHFypRMewx6Sk3YHF7fiEJrAY0ozTRl8jwpnvs95+eTMWc/t4VhRrvPSwDabblRbNgdeOvB0ery2CPWIqaQnuG7agJjG0pwcRBSsWNrOQxzPAKO1ql7MTmE4Ovs+5GReL6GpfqP8/yWMwy24+RAkF7ZFhf3T1StXg+e0LvJ/WstIxqdWx/RdaHaDVvMhZe4HUd2o3wuhu2CUqx40Mdi4HL1i7qsfBPuRGw70iawQ6ahBrOd0F4DYblsavV5ZIhhfntLaMI+zhx4kOQwM4k+mUSayNyV3kn5ZDgHpcj1zb07vHEvhSvChGEtkwErgaxXcB+lmeajUqTZOenkigwNvGeWXdP4t+bWtqnWuRj0E2bGXxu0nmm4Vu6IhMU+NnV0K3MlkUd5pIxGNW6zrP5/cn/4os0fsGi+HXdZaCt2bLSFDOSMWsFQUVdtGv0CCiC6koyATN5ljqAZBH7b+YnGusStHT1oN952TT5PxpYVbaZ3iMT8Cke9SvZMvOYJwS+5wzXQwJJiQmyq0Q+KLNrb2PTz47tqRjTXpyePyfgWFzGS/xPYZkWo9NVnU9vI/+UB7F/JOUS84bICdgDSskgBgfITo5g7MMzl3ukT6wOaP7DTZ80TvTN85WSKXNl/4i4bhYsXOmDvpUZh1PIfcQf+GdLfvnr1L7L1tnNNnuAcGnf4UcUk8/xGlqM6VCJMbCLurPM2BfhkIYE64y1bDACwE1CU3F9EmIvPWo1y4CeI6uaddExD/8aBuDp2GkzG4GbUDUzIvyRxKlY66ngHDXKlFazbhbdqiv06ZMmIUU7INQj8AldHRs+JgXspiwCvOezKQtEujvBCcEQyI6Nnd4S1YSpzNhJOc0c7nXkJ+6/kmlowC+/QzaJ5eK5NLFKrJp+GjXVs6Aq5Ts0xkcEJ2Gtdi54Y+ObQxqAJMeX6szGHOogxS5tqtaqoOnJ2F4OKKTBwFlICRdm9hkE9a2sVZAZLWEcY84zU1uXtb4hzhuM3Fldonw/1Ie678OjHFFbVmsV/beK2zxNd3PFh0TQmZHhQIexg2AvYDehfL7WywNy/AZ1nF3TSWQxMxY3prKxIeGMtwnIiSAK0EJmzUAjTrwj0IKYdm5pyKoKqO76E+/ez3uVvRoBXu42UCtc9ThZbTlnaO4wTHOHG+JHLKbgzeMqxTHNaoKWTmklwlu0KvSpq8gWoCR7fCi/dmN/7GyLlrsIgRk2mht3zo6QO2N6ZHneyk/6cCk1qR3qjPiGbCCg6CnUHu8iOxAKzLtY5Ag8UAwrxw1D0MiTPBl0gnZFJPdHLJbB+00PrSBvHpjm0uhtYLIzm2+C9skI8irOyUro1Wlkd5H9b8Fxr7IBx+oftk4WOQswWLFiK1Sa1tEfpoDcclQCA== </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>How to resolve iOS 11 Safari getUserMedia “Invalid constraint” issue</title>
    <link href="https://ru23.com/note/e4a16398.html"/>
    <id>https://ru23.com/note/e4a16398.html</id>
    <published>2018-11-26T05:01:05.000Z</published>
    <updated>2018-11-28T05:33:05.990Z</updated>
    
    <content type="html"><![CDATA[<p>I’m attempting to run the following code in Safari in iOS 11. It should prompt the user to give access to their devices camera and then display it in my <video autoplay id="video"></video> element. However, when running in iOS 11, it results in an OverconstrainedError to be thrown:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">message</span>: <span class="string">"Invalid constraint"</span>, <span class="attr">constraint</span>: <span class="string">"width"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>The code runs fine in Chorme and successfully opens the camera.<br>I’ve attempted multiple valid configurations with no luck.</p><p><strong>Code</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line"><span class="keyword">if</span>(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">     navigator.mediaDevices.getUserMedia(&#123;<span class="attr">video</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">             video.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">             video.play();</span><br><span class="line">         &#125;)</span><br><span class="line">         .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(err);</span><br><span class="line">         &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>The invalid constraint error in safari is because the browser expects that you pass a correct width, one of:</p><ul><li>320</li><li>640</li><li><p>1280<br>the height is auto calculate in an aspect ratio of 4:3 for 320 or 640, and 16:9 for 1280, then if you pass a width of 320, you video stream is set in:</p></li><li><p>320x240<br>if you set a width of 640, you video stream is set in:</p></li><li><p>640x480<br>And if you set a width of 1280, then you video stream is set in:</p></li><li><p>1280x720<br>In any other case you got a error “InvalidConstrain” for width value.</p></li></ul><p>Also you can use a min, max, exact or ideal constrains for width, please check the MDN documentation</p><p>Here an example in this codepen<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123; <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">320</span><span class="comment">/*320-640-1280*/</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> start = <span class="function"><span class="params">()</span> =&gt;</span> navigator.mediaDevices.getUserMedia(config)</span><br><span class="line">  .then(<span class="function"><span class="params">stream</span> =&gt;</span> v.srcObject = stream)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> v.onloadedmetadata = resolve))</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> log(<span class="string">"Success: "</span> + v.videoWidth + <span class="string">"x"</span> + v.videoHeight))</span><br><span class="line">  .catch(log);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="params">msg</span> =&gt;</span> div.innerHTML += <span class="string">"&lt;p&gt;"</span> + msg + <span class="string">"&lt;/p&gt;"</span>;</span><br></pre></td></tr></table></figure></p><p>PD: In chrome you can set a width of height and the video stream is set in these sizes, Firefox do a fitness distance, and Safari expect a exact match.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m attempting to run the following code in Safari in iOS 11. It should prompt the user to give access to their devices camera and then d
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>算法题</title>
    <link href="https://ru23.com/note/f4c4f07f.html"/>
    <id>https://ru23.com/note/f4c4f07f.html</id>
    <published>2018-11-25T11:38:57.000Z</published>
    <updated>2018-11-28T02:59:22.863Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法<br>二分查找算法<br>走台阶问题，每次可以走1步或者2步，走到第n个台阶有多少种方式<br>斐波那契数列, 递归，尾部递归，循环实现方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;排序算法&lt;br&gt;二分查找算法&lt;br&gt;走台阶问题，每次可以走1步或者2步，走到第n个台阶有多少种方式&lt;br&gt;斐波那契数列, 递归，尾部递归，循环实现方式&lt;/p&gt;

      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载发生了什么</title>
    <link href="https://ru23.com/note/e277deca.html"/>
    <id>https://ru23.com/note/e277deca.html</id>
    <published>2018-11-23T15:14:05.000Z</published>
    <updated>2018-11-30T12:56:27.331Z</updated>
    
    <content type="html"><![CDATA[<p>眼过千遍，不如手敲一遍。<br>文章参考：<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a></p><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理HTTP请求</li><li>页面渲染</li><li>断开TCP连接</li></ol><p>仔细思考这个问题，发现确实很深，这个过程涉及到的东西很多。这个问题的回答真的能够很好的考验一个web工程师的水平<br>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，<br>而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、<br>到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS查询顺序如下，若其中一步成功则直接跳到建立链接部分：</p><ul><li>浏览器自身DNS</li><li>操作系统DNS</li><li>本地hosts文件</li><li>向域名服务器发送请求</li></ul><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP三次握手(three-way handshaking)</p><ul><li>发送方:SYN(synchronize)</li><li>接收方:SYN/ACK(acknowledgement),确认信息传达</li><li>发送方:ACK - 确认接收方在线可收消息，握手结束</li><li>Accept</li></ul><p><img src="/img/2018/11/three-way-handshaking.jpg" alt="TCP三次握手"></p><p>（1）第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。</p><p>（2）第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。</p><p>（3）第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。</p><p>TCP三次握手的的好处在于：发送方可以确认接收方仍然在线，不会因为白发送而浪费资源。</p><h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><p>为什么要把HTTPS协议放在这里讲呢？</p><ul><li>因为HTTP报文是包裹在TCP报文中发送的，服务端收到TCP报文时候会解包提取出HTTP报文。</li><li>但是这个过程中存在一定的风险。HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的危险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)</li></ul><p><img src="/img/2018/11/https.jpg" alt="HTTPS"></p><h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客TLS/SSL握手过程。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，<br><strong>是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡</strong>。</p><h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><p>构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。<br>HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。</p><p><strong>请求行：</strong><br>Method Request-URL HTTP-Version CRLF</p><p><strong>请求报头</strong><br>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p><h4 id="事件循环-Event-loop"><a href="#事件循环-Event-loop" class="headerlink" title="事件循环(Event loop)"></a>事件循环(Event loop)</h4><ol><li>js是单线程，js解析方法时，将同步任务排队到执行栈中，异步任务排队到事件队列中。</li><li>事件队列分为:<br>宏任务：setTimeout，setInterval，setImmediate，I/O，UI交互事件<br>微任务：process.nextTick，Promise.then</li><li>浏览器环境中执行方法时，先将执行栈中的任务清空，再将微任务推到执行栈中并清空，之后检查是否存在宏任务，若存在则取出一个宏任务，执行完成检查是否有微任务，以此循环…</li></ol><h3 id="4-服务器处理HTTP请求并返回HTTP报文"><a href="#4-服务器处理HTTP请求并返回HTTP报文" class="headerlink" title="4. 服务器处理HTTP请求并返回HTTP报文"></a>4. 服务器处理HTTP请求并返回HTTP报文</h3><p>HTTP响应报文也是由三部分组成: 状态码, 响应报头和响应报文。</p><h4 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h4><p>强缓存和协商缓存</p><h3 id="5-浏览器解析渲染页面"><a href="#5-浏览器解析渲染页面" class="headerlink" title="5.浏览器解析渲染页面"></a>5.浏览器解析渲染页面</h3><p>使用HTML创建文件对象类型（DOM）<br>使用CSS创建CSS对象类型（CSSOM）<br>基于DOM和CSSOM执行脚本（Scripts）<br>合并DOM和CSSOM形成渲染树（Render Tree)<br>使用渲染布局（Layout）所有元素渲染（Paint）所有元素</p><h3 id="6-断开TCP连接（4次挥手）"><a href="#6-断开TCP连接（4次挥手）" class="headerlink" title="6.断开TCP连接（4次挥手）"></a>6.断开TCP连接（4次挥手）</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;眼过千遍，不如手敲一遍。&lt;br&gt;文章参考：&lt;a href=&quot;https://segmentfault.com/a/1190000006879700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>addEventListener （type, fn , true/false）绑定事件第三个参数作用以及利用事件的冒泡，实现事件委托</title>
    <link href="https://ru23.com/note/f078bfb.html"/>
    <id>https://ru23.com/note/f078bfb.html</id>
    <published>2018-11-23T07:00:11.000Z</published>
    <updated>2018-12-03T02:25:44.329Z</updated>
    
    <content type="html"><![CDATA[<p>第一个参数type，事件的类型，如click，mouseover等；</p><p>fn，事件监听执行的function；</p><p>第三参数，决定事件执行的过程（大概这样解释。。），捕获或者冒泡，首先我们看一张图片：</p><p><img src="/img/2018/11/shijianliu.gif" alt="事件流原理"></p><p>由此可以知道<br>　　1、一个完整的JS事件流是从window开始，最后回到window的一个过程<br>　　2、事件流被分为三个阶段(1~5)捕获过程、(5~6)目标过程、(6~10)冒泡过程</p><p>e.target和e.currentTarget</p><p>　　target和currentTarget都是event上面的属性，target是真正发生事件的DOM元素，而currentTarget是当前事件发生在哪个DOM元素上。</p><p>　　可以结合控制台打印出来的信息理解下，目标阶段也就是 target == currentTarget的时候。我没有打印它们两个因为太长了，所以打印了它们的nodeName，但是由于window没有nodeName这个属性，所以是undefined。</p><h3 id="事件委托和事件代理的理解"><a href="#事件委托和事件代理的理解" class="headerlink" title="事件委托和事件代理的理解"></a>事件委托和事件代理的理解</h3><p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件，当我们需要对很多元素添加事件的时候，可以通过事件添加到他们的父节点二将时间委托给父节点来触发处理函数</p><p>减少与dom的交互次数，提高性能</p><h3 id="事件委托的原理？"><a href="#事件委托的原理？" class="headerlink" title="事件委托的原理？"></a>事件委托的原理？</h3><p>事件委托是利用事件的冒泡机制来实现的，何为事件冒泡呢？这里介绍下浏览器dom事件处理的过程，dom2.0模型将事件流程分为三个阶段：事件捕获阶段，事件目标阶段，事件冒泡阶段。</p><p>事件捕获：当某个元素触发某个事件，顶层对象document就会发出一个事件流，随着dom树的节点向目标元素节点流去，直到到达事件真正发生的目标元素，在这个过程中，事件相应的监听函数是不会被触发的<br>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数，如果没有绑定监听函数，那就不执行<br>事件冒泡：从目标元素开始，往顶层元素传播，途中如果有节点绑定了相应的事件处理函数，这些函数都会被一次触发，如果想阻止事件冒泡，可以使用event.stopPropgation()或者event.cancelBubble=true来阻止事件的冒泡传播</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一个参数type，事件的类型，如click，mouseover等；&lt;/p&gt;
&lt;p&gt;fn，事件监听执行的function；&lt;/p&gt;
&lt;p&gt;第三参数，决定事件执行的过程（大概这样解释。。），捕获或者冒泡，首先我们看一张图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/201
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="js" scheme="https://ru23.com/tags/js/"/>
    
      <category term="事件流" scheme="https://ru23.com/tags/%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>nginx 80 443 并存</title>
    <link href="https://ru23.com/note/1cdb2279.html"/>
    <id>https://ru23.com/note/1cdb2279.html</id>
    <published>2018-11-21T17:02:23.000Z</published>
    <updated>2018-11-28T02:59:22.832Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ECS主机 nginx默认目录/etc/nginx</p><p>如果一站点既要80 http访问，又要443https访问。</p><p>要让https和http并存，不能在配置文件中使用ssl on，配置listen 443 ssl;</p><p>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line">    ssl_certificate &quot;cert/1483067_www.ru23.com.pem&quot;;</span><br><span class="line">    ssl_certificate_key &quot;cert/1483067_www.ru23.com.key&quot;;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里云ECS主机 nginx默认目录/etc/nginx&lt;/p&gt;
&lt;p&gt;如果一站点既要80 http访问，又要443https访问。&lt;/p&gt;
&lt;p&gt;要让https和http并存，不能在配置文件中使用ssl on，配置listen 443 ssl;&lt;/p&gt;
&lt;p&gt;实例&lt;br&gt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>彻底理解浏览器的缓存机制</title>
    <link href="https://ru23.com/note/5bb02710.html"/>
    <id>https://ru23.com/note/5bb02710.html</id>
    <published>2018-11-20T15:16:55.000Z</published>
    <updated>2018-11-21T08:11:26.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#概述" title="概述" target="_blank" rel="noopener"></a>概述</h2><p>浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，<strong>HTTP报文</strong>分为两种：</p><ul><li><p><strong>HTTP请求(Request)报文</strong>，报文格式为：<strong>请求行 – HTTP头(通用信息头，请求头，实体头) – 请求报文主体(只有POST才有报文主体)</strong>，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Request.jpg" alt="Request"><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Request-header.jpg" alt="Request"></p></li><li><p><strong>HTTP响应(Response)报文</strong>，报文格式为：<strong>状态行 – HTTP头(通用信息头，响应头，实体头) – 响应报文主体</strong>，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Response-header.jpg" alt="Response"><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Response.jpg" alt="Response"></p></li></ul><p>注：<strong>通用信息头</strong>指的是请求和响应报文都支持的头域，分别为Cache-Control、Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via；<strong>实体头</strong>则是实体信息的实体头域，分别为Allow、Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、Etag、Expires、Last-Modified、extension-header。这里只是为了方便理解，将通用信息头，响应头/请求头，实体头都归为了HTTP头。</p><h2 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#缓存过程分析" title="缓存过程分析" target="_blank" rel="noopener"></a>缓存过程分析</h2><p>浏览器与服务器通信的方式为应答模式，即是：<strong>浏览器发起HTTP请求 – 服务器响应该请求</strong>。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache.jpg" alt="cache"></p><p>由上图我们可以知道：</p><ul><li><p>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</p></li><li><p>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</p></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了，本文也将围绕着这点进行详细分析。为了方便大家理解，这里我们根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong> 。</p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#强制缓存" title="强制缓存" target="_blank" rel="noopener"></a>强制缓存</h3><p><strong>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程</strong>，强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</p><ul><li><p>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致），如下图：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.0.jpg" alt="cache"></p></li><li><p>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存(暂不分析)，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.1.jpg" alt="cache"></p></li><li><p>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.2.jpg" alt="cache"></p></li></ul><blockquote><p>那么强制缓存的缓存规则是什么？</p></blockquote><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是<strong>Expires</strong>和<strong>Cache-Control</strong>，其中Cache-Control优先级比Expires高。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Expires" title="Expires" target="_blank" rel="noopener"></a>Expires</h4><p>Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。</p><blockquote><p>Expires是HTTP/1.0的字段，但是现在浏览器默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？</p></blockquote><p>到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Cache-Control" title="Cache-Control" target="_blank" rel="noopener"></a>Cache-Control</h4><p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p><ul><li><p><strong>public</strong>：所有内容都将被缓存（客户端和代理服务器都可缓存）</p></li><li><p><strong>private</strong>：所有内容只有客户端可以缓存，<strong>Cache-Control的默认取值</strong></p></li><li><p><strong>no-cache</strong>：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</p></li><li><p><strong>no-store</strong>：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</p></li><li><p><strong>max-age=xxx (xxx is numeric)</strong>：缓存内容将在xxx秒后失效</p></li></ul><p>接下来，我们直接看一个例子，如下：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/example1.0.jpg" alt="example"></p><p>由上面的例子我们可以知道：</p><ul><li><p>HTTP响应报文中expires的时间值，是一个绝对值</p></li><li><p>HTTP响应报文中Cache-Control为max-age=600，是相对值</p></li></ul><p>由于Cache-Control的优先级比expires，那么直接根据Cache-Control的值进行缓存，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。</p><p>注：在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control相比于expires是更好的选择，所以同时存在时，只有Cache-Control生效。</p><p>了解强制缓存的过程后，我们拓展性的思考一下：</p><blockquote><p>浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？</p></blockquote><p><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/disk.jpg" alt="disk"><br>这里我们以博客的请求为例，状态码为灰色的请求则代表使用了强制缓存，请求对应的Size值则代表该缓存存放的位置，分别为<strong>from memory cache</strong> 和 <strong>from disk cache</strong>。</p><blockquote><p>那么from memory cache 和 from disk cache又分别代表的是什么呢？什么时候会使用from disk cache，什么时候会使用from memory cache呢？</p></blockquote><p>from memory cache代表使用内存中的缓存，from disk cache则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为memory –&gt; disk。</p><p>虽然我已经直接把结论说出来了，但是相信有不少人对此不能理解，那么接下来我们一起详细分析一下缓存读取问题，这里仍让以我的博客为例进行分析：<br><strong>访问<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a> –> 200 –&gt; 关闭博客的标签页 –&gt; 重新打开<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a> –> 200(from disk cache) –&gt; 刷新 –&gt; 200(from memory cache)</strong></p><p>过程如下：</p><ul><li><p>访问<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/1.0.jpg" alt="200"></p></li><li><p>关闭博客的标签页</p></li><li><p>重新打开<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/2.0.jpg" alt="from disk cache"></p></li><li><p>刷新<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/3.0.jpg" alt="from disk memory"></p></li></ul><blockquote><p>看到这里可能有人小伙伴问了，最后一个步骤刷新的时候，不是同时存在着from disk cache和from memory cache吗？</p></blockquote><p>对于这个问题，我们需要了解内存缓存(from memory cache)和硬盘缓存(from disk cache)，如下:</p><ul><li><p><strong>内存缓存(from memory cache)</strong>：内存缓存具有两个特点，分别是<strong>快速读取</strong>和<strong>时效性</strong>：</p><ul><li><p><strong>快速读取</strong>：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</p></li><li><p><strong>时效性</strong>：一旦该进程关闭，则该进程的内存则会清空。</p></li></ul></li><li><p><strong>硬盘缓存(from disk cache)</strong>：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。</p></li></ul><p>在浏览器中，浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#协商缓存" title="协商缓存" target="_blank" rel="noopener"></a>协商缓存</h3><p><strong>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</strong>，主要有以下两种情况：</p><ul><li><p>协商缓存生效，返回304，如下<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/304.jpg" alt="304"></p></li><li><p>协商缓存失效，返回200和请求结果结果，如下<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/200.jpg" alt="200"></p></li></ul><p>同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<strong>Last-Modified / If-Modified-Since和Etag / If-None-Match</strong>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。</p><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Last-Modified-If-Modified-Since" title="Last-Modified / If-Modified-Since" target="_blank" rel="noopener"></a>Last-Modified / If-Modified-Since</h4><ul><li><p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/last-modify.jpg" alt="last-modify"></p></li><li><p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/since.jpg" alt="since"></p></li></ul><h4 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Etag-If-None-Match" title="Etag / If-None-Match" target="_blank" rel="noopener"></a>Etag / If-None-Match</h4><ul><li><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Etag.jpg" alt="Etag"></p></li><li><p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Etag-match.jpg" alt="Etag-match"></p></li></ul><p>注：Etag / If-None-Match优先级高于Last-Modified / If-Modified-Since，同时存在则只有Etag / If-None-Match生效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#总结" title="总结" target="_blank" rel="noopener"></a>总结</h2><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/all.jpg" alt="all"></p><p>原文出自：<a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#%E6%80%BB%E7%BB%93</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#概述&quot; title=&quot;概述&quot; targ
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年11月月刊</title>
    <link href="https://ru23.com/note/bc5cd3d4.html"/>
    <id>https://ru23.com/note/bc5cd3d4.html</id>
    <published>2018-11-17T15:52:52.000Z</published>
    <updated>2018-12-05T10:39:25.108Z</updated>
    
    <content type="html"><![CDATA[<p>算法：<a href="https://github.com/liyanlong/front-end-test" target="_blank" rel="noopener">https://github.com/liyanlong/front-end-test</a></p><p>HTTP 协议入门： <a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/08/http.html</a></p><p>AST（抽象语法树）：<a href="https://mp.weixin.qq.com/s/0-k1xZr8-nPCakN-jnfRnQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/0-k1xZr8-nPCakN-jnfRnQ</a></p><p>函数柯里化 ：<a href="https://www.jianshu.com/p/f88a5175e7a2" target="_blank" rel="noopener">https://www.jianshu.com/p/f88a5175e7a2</a> </p><p>浏览器缓存知识小节以及应用：<a href="https://www.cnblogs.com/lyzg/p/5125934.html" target="_blank" rel="noopener">https://www.cnblogs.com/lyzg/p/5125934.html</a> </p><p>图片详解TCP连接的三次握手，四次断开基本原理：<a href="https://blog.csdn.net/u013011841/article/details/38519971" target="_blank" rel="noopener">https://blog.csdn.net/u013011841/article/details/38519971</a></p><p>JS函数节流和函数防抖：<a href="https://juejin.im/post/5c00f7fe51882516be2ee2fc" target="_blank" rel="noopener">https://juejin.im/post/5c00f7fe51882516be2ee2fc</a></p><p>输入url发生了什么: <a href="https://mp.weixin.qq.com/s/XzKViOthLIQiEJ4lb-HRHw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XzKViOthLIQiEJ4lb-HRHw</a></p><p>剖析Vue原理&amp;实现双向绑定MVVM：<a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006599500</a></p><p>浏览器缓存机制：<a href="https://www.cnblogs.com/slly/p/6732749.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6732749.html</a></p><p>浏览器渲染原理及流程：<a href="https://www.cnblogs.com/slly/p/6640761.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6640761.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法：&lt;a href=&quot;https://github.com/liyanlong/front-end-test&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liyanlong/front-end-test&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="前端分享" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="前端月刊" scheme="https://ru23.com/tags/%E5%89%8D%E7%AB%AF%E6%9C%88%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>每周攻克一个技术点</title>
    <link href="https://ru23.com/note/d196d9f1.html"/>
    <id>https://ru23.com/note/d196d9f1.html</id>
    <published>2018-11-17T12:35:36.000Z</published>
    <updated>2018-11-21T08:11:26.435Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>save-dev 和--save的区别</title>
    <link href="https://ru23.com/note/3c8059e3.html"/>
    <id>https://ru23.com/note/3c8059e3.html</id>
    <published>2018-11-09T07:29:08.000Z</published>
    <updated>2018-11-09T07:29:49.512Z</updated>
    
    <content type="html"><![CDATA[<p>–save 会把依赖包名称添加到 package.json 文件 dependencies 键下，</p><p>devDependencies 下列出的模块，是我们<strong>开发</strong>时用的，比如 我们安装 js的压缩包gulp-uglify 时我们采用的是 “npm install –save-dev gulp-uglify ” 命令安装，因为我们在发布后用不到它，而只是在我们开发才用到它</p><p>–save-dev 则添加到 package.json 文件 devDependencies 键</p><p>dependencies 下的模块，则是我们<strong>发布后</strong>还需要依赖的模块，譬如像jQuery库或者Angular框架类似的，我们在开发完后后肯定还要依赖它们，否则就运行不了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;–save 会把依赖包名称添加到 package.json 文件 dependencies 键下，&lt;/p&gt;
&lt;p&gt;devDependencies 下列出的模块，是我们&lt;strong&gt;开发&lt;/strong&gt;时用的，比如 我们安装 js的压缩包gulp-uglify 时我们采用
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>vue组件之间传值</title>
    <link href="https://ru23.com/note/8b0c3b50.html"/>
    <id>https://ru23.com/note/8b0c3b50.html</id>
    <published>2018-11-09T07:25:13.000Z</published>
    <updated>2018-11-09T07:29:49.518Z</updated>
    
    <content type="html"><![CDATA[<p>vue2.0组件之间的传值</p><p>“down”—&gt;指的是下的意思，即父组件向子组件传值，用props；“up”—&gt;指的是上的意思，即子组件想父组件传值，用emit。</p><h3 id="1-子组件向父组件的传值："><a href="#1-子组件向父组件的传值：" class="headerlink" title="1.子组件向父组件的传值："></a>1.子组件向父组件的传值：</h3><p><em>Child.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;childToParent&quot;&gt;想父组件传值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      childToParent()&#123;</span><br><span class="line">        this.$emit(&quot;childToParentMsg&quot;, &quot;子组件向父组件传值&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><em>parent.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;Child v-on:childToParentMsg=&quot;showChildToParentMsg&quot; &gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &apos;./child/Child.vue&apos;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&quot;parent&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showChildToParentMsg:function(data)&#123;</span><br><span class="line">        alert(&quot;父组件显示信息：&quot;+data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;Child&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-父组件向子组件传值"><a href="#2-父组件向子组件传值" class="headerlink" title="2.父组件向子组件传值"></a>2.父组件向子组件传值</h3><p><em>parent.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;Child v-bind:parentToChild=&quot;parentMsg&quot;&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &apos;./child/Child.vue&apos;</span><br><span class="line">  export default&#123;</span><br><span class="line">     name:&quot;parent&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        parentMsg:&apos;父组件向子组件传值&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;Child&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><em>child.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;span&gt;子组件显示信息：&#123;&#123;parentToChild&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&quot;parentToChild&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-采用eventBus-js传值—兄弟组件间的传值"><a href="#3-采用eventBus-js传值—兄弟组件间的传值" class="headerlink" title="3.采用eventBus.js传值—兄弟组件间的传值"></a>3.采用eventBus.js传值—兄弟组件间的传值</h3><p><em>eventBus.js</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'Vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure></p><p><em>App.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;secondChild&gt;&lt;/secondChild&gt;</span><br><span class="line">    &lt;firstChild&gt;&lt;/firstChild&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import FirstChild from &apos;./components/FirstChild&apos;</span><br><span class="line">import SecondChild from &apos;./components/SecondChild&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    FirstChild,</span><br><span class="line">    SecondChild,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><em>FirstChild.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;firstChild&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入文字&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;showMessage&quot;&gt;向组件传值&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import bus from &apos;../assets/eventBus&apos;;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &apos;firstChild&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &apos;你好&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showMessage () &#123;</span><br><span class="line">       alert(this.message)</span><br><span class="line">        bus.$emit(&apos;userDefinedEvent&apos;, this.message);//传值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><em>SecondChild.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;SecondChild&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import bus from &apos;../assets/eventBus&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&apos;SecondChild&apos;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &apos;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            var self = this;</span><br><span class="line">            bus.$on(&apos;userDefinedEvent&apos;,function(message)&#123;</span><br><span class="line">                self.message = message;//接值</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue2.0组件之间的传值&lt;/p&gt;
&lt;p&gt;“down”—&amp;gt;指的是下的意思，即父组件向子组件传值，用props；“up”—&amp;gt;指的是上的意思，即子组件想父组件传值，用emit。&lt;/p&gt;
&lt;h3 id=&quot;1-子组件向父组件的传值：&quot;&gt;&lt;a href=&quot;#1-子组件向父
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>$nextTick的作用</title>
    <link href="https://ru23.com/note/891492f1.html"/>
    <id>https://ru23.com/note/891492f1.html</id>
    <published>2018-11-09T07:23:02.000Z</published>
    <updated>2018-11-09T07:29:49.509Z</updated>
    
    <content type="html"><![CDATA[<p>请看如下一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">'/api/article'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = res.data.data.list</span><br><span class="line">        <span class="comment">// ref  list 引用了ul元素，我想把第一个li颜色变为红色</span></span><br><span class="line">        <span class="keyword">this</span>.$refs.list.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>].style.color = <span class="string">'red'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在获取到数据后赋值给数据模型中list属性，然后想引用ul元素找到第一个li把它的颜色变为红色，但是事实上，这个要报错了，我们知道，在执行这句话时，ul下面并没有li，也就是说刚刚进行的赋值操作，当前并没有引起视图层的更新。因此，在这样的情况下，vue给我们提供了$nextTick方法，如果我们想对未来更新后的视图进行操作，我们只需要把要执行的函数传递给this.$nextTick方法，vue就会给我们做这个工作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> that.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">"/api/article"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.list = res.data.data.list;</span><br><span class="line">            <span class="comment">// ref  list 引用了ul元素，我想把第一个li颜色变为红色</span></span><br><span class="line">             <span class="keyword">this</span>.$refs.list.getElementsByTagName(<span class="string">"li"</span>)[<span class="number">0</span>].style.color =<span class="string">"red"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>  这就是一个this.$nextTick的实现，其中利用了优雅降序的巧妙手法，使代码尽可能优化。而且还提供了promise的写法，虽然我们不经常用，但是有总比没有好。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;请看如下一段代码：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
  </entry>
  
</feed>

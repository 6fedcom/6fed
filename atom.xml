<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端迷 (front-end fan)</title>
  
  <subtitle>前端开发爱好者frank的工作笔记,欢迎前端技术交流，188105274(wechat，email同Q)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ru23.com/"/>
  <updated>2018-11-01T09:40:04.696Z</updated>
  <id>https://ru23.com/</id>
  
  <author>
    <name>frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>细数国内外的前端大牛</title>
    <link href="https://ru23.com/note/d427e9e2.html"/>
    <id>https://ru23.com/note/d427e9e2.html</id>
    <published>2018-11-01T13:55:38.000Z</published>
    <updated>2018-11-01T09:40:04.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文将枚举一些前端界内比较熟知的前端技术大牛，分为个人简介、技术博客、擅长领域几个方向，希望能对初步进入前端的人一些指引和学习的方向。以下排名不分先后，个人推荐需要了解的大牛有朴灵，尤雨溪，大漠，张鑫旭，阮一峰，wintercn等。</p><hr><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><p>#####玉伯<br><strong>简介</strong><br>玉伯（王保平），淘宝前端类库 KISSY、前端模块化开发框架SeaJS、前端基础类库Arale的创始人。2003-2006 年，中科院物理所研究生，Fortran 与 C 程序员，喜爱实验模拟和数值计算。 2006-2008 年，在中科院软件所互联网实验室从事项目管理软件的研发，C# 与 Java 爱好者。 2008 年 4 月份加入淘宝，就职于 UED 部门。2009 年起，组建前端架构团队，在首页维护、全网性能优化、类库研发、知识沉淀、工具应用等方面取得了丰硕成果。<br><strong>相关链接</strong><br>github <a href="https://github.com/lifesinger" target="_blank" rel="noopener">https://github.com/lifesinger</a><br>知乎 <a href="https://www.zhihu.com/people/lifesinger" target="_blank" rel="noopener">https://www.zhihu.com/people/lifesinger</a><br>微博  <a href="http://weibo.com/lifesinger" target="_blank" rel="noopener">http://weibo.com/lifesinger</a><br>前端大牛是如何炼成的:<a href="https://www.csdn.net/article/2013-09-03/2816801-front-end-development-seajs-framework/3" target="_blank" rel="noopener">https://www.csdn.net/article/2013-09-03/2816801-front-end-development-seajs-framework/3</a></p><hr><p>#####阮一峰<br><strong>简介</strong><br>目前阿里p7，70后，英文名Frank。他原是上海财经大学世界经济博士研究生。主要研究宏观金融、货币政策与美国经济。于2008年6月获得博士学位。目前在上海一所当地大学（上海金融学院 国际经贸学院）任教。他本人也是一名ITa技术人员，主要关注网站制作，并且对自由软件有着坚定不移的信念。除了写博客以外，他还有三个网站：微趣、Italo Calvino in China和读书公园。<br>曾经写过es6入门，软件随想录等书籍。并在个人站点以及github账号中积极布道，为广大的程序员尤其前端提供了很好的入门以及进阶的教程。<br><strong>相关链接：</strong><br>阮一峰博客 :<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/</a><br>github地址:<a href="https://github.com/ruanyf（有很多教程可以参考）" target="_blank" rel="noopener">https://github.com/ruanyf（有很多教程可以参考）</a></p><hr><p>#####司徒正美<br><strong>简介</strong><br>钟钦成，网名司徒正美，著名的Java专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby、 Java。曾出版《Java框架设计》一书。<br><strong>相关链接</strong><br>github <a href="https://github.com/RubyLouvre" target="_blank" rel="noopener">https://github.com/RubyLouvre</a><br>知乎 <a href="https://www.zhihu.com/people/si-tu-zheng-mei" target="_blank" rel="noopener">https://www.zhihu.com/people/si-tu-zheng-mei</a><br>微博  <a href="http://weibo.com/jslouvre" target="_blank" rel="noopener">http://weibo.com/jslouvre</a></p><hr><p>#####朴灵<br><strong>简介</strong><br>《深入浅出node.js》作者,大牛,真名田永强，文艺型码农，node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，著有《深入浅出node.js》。他活跃于Cnode社区，是线下会议nodeParty的组织者，同时也是JSConf China（沪JS、京JS，以及杭JS）的组织者之一。朴灵热爱开源，是多个node.js模块的作者<br><strong>相关链接</strong><br>个人github：<a href="https://github.com/JacksonTian" target="_blank" rel="noopener">https://github.com/JacksonTian</a><br>从前端到全栈 :<a href="http://www.ituring.com.cn/article/197773" target="_blank" rel="noopener">http://www.ituring.com.cn/article/197773</a></p><hr><p>#####尤雨溪<br><strong>简介</strong><br>毕业于上海复旦附中，在美国完成大学学业，本科毕业于Colgate University，后在Parsons设计学院获得Design &amp; Technology艺术硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，在南京的JSConf上，Vue作者尤雨溪正式宣布加盟阿里巴巴Weex团队，尤雨溪称他将以技术顾问的身份加入 Weex 团队来做 Vue 和 Weex 的 JavaScript runtime 整合，目标是让大家能用 Vue 的语法跨三端。<br>Vue.js框架的作者，html5版Clear的打造人。他认为，未来App的趋势是轻量化和细化，能解决问题的应用就是好应用。而在移动互联网时代大的背景下，个人开发者的机遇在门槛低，成本低，跨设备和多平台四个方面。<br><strong>相关链接</strong><br>尤雨溪微博:<a href="https://weibo.com/arttechdesign?is_all=1" target="_blank" rel="noopener">https://weibo.com/arttechdesign?is_all=1</a><br>尤雨溪github主页:<a href="https://github.com/yyx990803" target="_blank" rel="noopener">https://github.com/yyx990803</a><br>尤雨溪知乎:<a href="https://www.zhihu.com/people/evanyou/posts" target="_blank" rel="noopener">https://www.zhihu.com/people/evanyou/posts</a></p><hr><p>#####周爱民<br><strong>简介</strong><br>JavaScript语言精髓与编程实践作者，任职于支付宝，<br><strong>相关链接</strong><br>个人博客：<a href="https://aimingoo.github.io/" target="_blank" rel="noopener">https://aimingoo.github.io/</a><br>csdn博客：<a href="http://blog.csdn.net/aimingoo" target="_blank" rel="noopener">http://blog.csdn.net/aimingoo</a><br>真正的架构师是没有title的：<a href="https://segmentfault.com/a/1190000002405506" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002405506</a></p><hr><p>#####徐涛<br><strong>简介</strong><br>汤姆大叔，原名徐涛，资深Web开发工程师，精通JavaScript、CSS、html5等Web开发技术，以及Bootstrap等各种主流Web开发框架。擅长Web系统的架构、设计与开发，参与过全球最大婚恋网站Match、全球最大在线旅游网站Expedia、波音公司、GE医疗和万达集团等多个国际知名企业的Web项目的架构与设计。他还是一位资深的微软技术专家，曾获得MCP、MCTS、MCDBA等近十项认证。翻译了《Java Script编程精解》、《Javascript启示录》、《编写可测试的JavaScript代码》、《Backbone.js应用程序开发》、《JavaScript忍者秘籍》、《JavaScript设计模式》等多本JavaScript方面的著作。<br><strong>相关链接</strong><br>个人博客：<a href="https://www.cnblogs.com/TomXu/" target="_blank" rel="noopener">https://www.cnblogs.com/TomXu/</a></p><hr><p>#####廖雪峰<br><strong>简介</strong><br>技术作家，十年软件开发经验，业余产品经理，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，著有号称史上最浅显易懂的git教程，口碑不错的《JS教程》，多个业余开源项目托管在gitHub。<br><strong>相关链接</strong><br>github <a href="https://github.com/michaelliao" target="_blank" rel="noopener">https://github.com/michaelliao</a><br>知乎 <a href="https://www.zhihu.com/people/liaoxuefeng/activities" target="_blank" rel="noopener">https://www.zhihu.com/people/liaoxuefeng/activities</a><br>微博  <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="noopener">http://weibo.com/liaoxuefeng</a></p><hr><p>#####　勾三股四<br><strong>简介</strong><br>勾三股四，本名赵锦江，阿里巴巴高级前端工程师，前北京傲游前端开发部经理。<br><strong>相关链接</strong><br>github <a href="http://github.com/jinjiang/" target="_blank" rel="noopener">http://github.com/jinjiang/</a><br>知乎 <a href="https://www.zhihu.com/people/jinjiang" target="_blank" rel="noopener">https://www.zhihu.com/people/jinjiang</a><br>微博 <a href="http://weibo.com/mx006" target="_blank" rel="noopener">http://weibo.com/mx006</a></p><hr><p>#####wintercn<br><strong>简介</strong><br>程劭非，阿里巴巴高级技术专家，著名JavaScript专家。曾参与Bambook开发，更早为微软工作，开发Windows CE平台的IE浏览器。<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/wintercn" target="_blank" rel="noopener">https://github.com/wintercn</a><br>个人博客：<a href="http://winter-cn.cnblogs.com/" target="_blank" rel="noopener">http://winter-cn.cnblogs.com/</a><br>微博：@寒冬winter</p><hr><p>#####吴亮(月影)<br><strong>简介</strong><br>吴亮（网名月影）,毕业于浙江大学，先后在微软亚洲研究院做过访问学生，在金蝶软件有限公司担任过核心开发工程师、设计师和项目经理，在百度电子商务事业部担任过web开发项目经理。现任奇虎360高级技术经理，360前端团队奇舞团负责人。多年来致力于Javasript技术和web标准的推广，活跃于国内各技术社区，现为w3ctech顾问。<br><strong>相关链接</strong><br>微博 ：<a href="http://weibo.com/silverna" target="_blank" rel="noopener">http://weibo.com/silverna</a><br>知乎 <a href="https://www.zhihu.com/people/yue-ying-2-61" target="_blank" rel="noopener">https://www.zhihu.com/people/yue-ying-2-61</a><br>博客 <a href="https://www.h5jun.com/" target="_blank" rel="noopener">https://www.h5jun.com/</a></p><hr><p>#####张云龙<br><strong>简介</strong><br>张云龙(前端农民工),现为全民TV技术总监，前UC浏览器导航团队前端技术负责人，前FIS团队技术负责人。<br><strong>相关链接</strong><br>微博 ：<a href="http://weibo.com/fouber" target="_blank" rel="noopener">http://weibo.com/fouber</a><br>知乎 <a href="https://www.zhihu.com/people/fouber" target="_blank" rel="noopener">https://www.zhihu.com/people/fouber</a><br>github <a href="https://github.com/fouber" target="_blank" rel="noopener">https://github.com/fouber</a></p><hr><p>#####张鑫旭<br><strong>简介</strong><br>09年华中科技大学毕业，现上海，就职于阅文集团，专注web前端偏前领域，钓鱼爱好者，著有《CSS世界》。其中css世界在京东内热销并得到了一系列的好评。任职于腾讯 上海 ISUX。<br><strong>相关链接</strong><br>张鑫旭的网站:<a href="https://www.zhangxinxu.com/" target="_blank" rel="noopener">https://www.zhangxinxu.com/</a></p><hr><p>#####大漠<br><strong>简介</strong><br>淘宝网 · 前端码农，常用昵称“大漠”，W3CPlus创始人，目前就职于淘宝。对html5、css3和CSS处理器等前端脚本语言有非常深入的认识和丰富的实践经验，尤其专注对css3和动画的研究，是国内最早研究和使用css3和CSS处理器技术的一批人。现在主要在探讨学习JavaScript、React和Vue相关技术知识。CSS、CSS处理器和Web动画中国布道者。2014年出版《图解css3：核心技术与案例实战》。<br><strong>相关链接</strong><br>知乎主页：<a href="https://www.zhihu.com/people/w3cplus/activities" target="_blank" rel="noopener">https://www.zhihu.com/people/w3cplus/activities</a><br>w3cplus网站博客地址：<a href="http://www.w3cplus.com/" target="_blank" rel="noopener">www.w3cplus.com/</a></p><hr><p>#####颜海镜<br><strong>简介</strong><br>华北电力大学，软件工程，曾经在百度外卖，美团工作<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/yanhaijing/" target="_blank" rel="noopener">https://github.com/yanhaijing/</a><br>知乎：<a href="https://www.zhihu.com/people/yanhaijing/activities" target="_blank" rel="noopener">https://www.zhihu.com/people/yanhaijing/activities</a><br>微博 <a href="http://weibo.com/yanhaijing1234" target="_blank" rel="noopener">http://weibo.com/yanhaijing1234</a></p><hr><p>#####杜瑶<br><strong>简介</strong><br>去哪儿网(Qunar)，资深前端工程师，前端开发总监，CSS参考手册作者。<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/doyoe/" target="_blank" rel="noopener">https://github.com/doyoe/</a><br>知乎：<a href="https://www.zhihu.com/people/doyoe/activities" target="_blank" rel="noopener">https://www.zhihu.com/people/doyoe/activities</a><br>微博 <a href="https://weibo.com/doyoe?is_all=1&amp;noscale_head=1#_0" target="_blank" rel="noopener">https://weibo.com/doyoe?is_all=1&amp;noscale_head=1#_0</a></p><hr><p>#####芋头<br><strong>简介</strong><br>就职于大搜车，前端乱炖站长，自命全栈工程师，擅长前端、nodeJS、java、ios。关注产品和营销。<br><strong>相关链接</strong><br>芋头-前端乱炖：<a href="http://html-js.com/card/29" target="_blank" rel="noopener">http://html-js.com/card/29</a><br>github主页：<a href="https://github.com/xinyu198736" target="_blank" rel="noopener">https://github.com/xinyu198736</a></p><hr><p>#####张克军<br><strong>简介</strong><br>张克军，豆瓣前端负责人，知名web技术布道者。<br><strong>相关链接</strong><br>微博 <a href="https://weibo.com/kejunz" target="_blank" rel="noopener">https://weibo.com/kejunz</a><br>github主页：<a href="https://github.com/kejun" target="_blank" rel="noopener">https://github.com/kejun</a></p><hr><p>#####情封<br><strong>简介</strong><br>前端De早读课站长，@福建前端联盟发起人之一，4399UED/高级主管<br><strong>相关链接</strong><br>微博 <a href="http://weibo.com/f2er" target="_blank" rel="noopener">http://weibo.com/f2er</a><br>github主页：<a href="https://github.com/f2er" target="_blank" rel="noopener">https://github.com/f2er</a><br>知乎 <a href="https://www.zhihu.com/people/f2er/columns" target="_blank" rel="noopener">https://www.zhihu.com/people/f2er/columns</a></p><hr><p>#####zcbenzi<br><strong>简介</strong><br>赵成，atom编辑器和 node-Webkit 的主力开发者，另外参与了electron.对其源码都有贡献。<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/zcbenz" target="_blank" rel="noopener">https://github.com/zcbenz</a><br>笨小猫猫：<a href="http://cheng.guru/" target="_blank" rel="noopener">http://cheng.guru/</a></p><hr><p>#####rogerwang<br><strong>简介</strong><br>王文睿（Rogerwang），node-Webkit的项目发起人。目前任职于Intel公司开源技术中心（OTC），从事Web和浏览器技术开发工作。现在主要工作是开发和维护node-Webkit项目。此前从事过MeeGo、Tizen和JNI xml性能库的开发和数据中心解决方案服务。毕业于中科大少年班，在计算机系获得博士学位，研究方向为高性能计算。<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/rogerwang" target="_blank" rel="noopener">https://github.com/rogerwang</a><br>Twitter主页：<a href="http://twitter.com/wwr" target="_blank" rel="noopener">http://twitter.com/wwr</a></p><hr><p>#####　fengmk2<br><strong>简介</strong><br>袁锋，淘宝网数据产品部资深Web开发工程师，Cnode.org社区核心成员，淘宝花名：苏千。参与egg,koa,cnpm等。<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/fengmk2" target="_blank" rel="noopener">https://github.com/fengmk2</a><br>个人主页：<a href="http://fengmk2.github.com" target="_blank" rel="noopener">http://fengmk2.github.com</a><br>微博：@Python发烧友</p><hr><p>#####　BYVoid<br><strong>简介</strong><br>BYVoid（郭家宝），清华大学计算机系2010级本科生，自由意志主义者。《node.js开发指南》作者。<br><strong>相关链接</strong><br>github主页：<a href="https://github.com/BYVoid" target="_blank" rel="noopener">https://github.com/BYVoid</a><br>个人博客：<a href="http://www.byvoid.com" target="_blank" rel="noopener">http://www.byvoid.com</a><br>微博：@BYVoid<br>豆瓣：<a href="http://www.douban.com/people/byvoid/" target="_blank" rel="noopener">http://www.douban.com/people/byvoid/</a><br>知乎:<a href="https://www.zhihu.com/people/byvoid/activities" target="_blank" rel="noopener">https://www.zhihu.com/people/byvoid/activities</a></p><hr><p>#####李晶<br><strong>简介</strong><br>2008 年东北大学硕士毕业，一直做前端开发，目前就职于阿里旅行·去啊前端团队。淘宝F2E，“犀牛书(第六版)”译者，“JS Web富应用开发”译者。翻译了这些书：js权威指南，js富应用开发，js设计模式。<br><strong>相关链接</strong><br>github主页:<a href="https://github.com/jayli" target="_blank" rel="noopener">https://github.com/jayli</a></p><hr><p>#####杨周璇<br><strong>简介</strong><br>浙江大学，经济学院电子商务专业，基础技术组 资深前端工程师，nodejs技术专家。<br><strong>相关链接</strong><br>微博：fool2fish</p><hr><p>#####Cat Chen<br><strong>简介</strong><br>陈广琛，就职于facebook,前端大牛<br><strong>相关链接</strong><br>博客园博客:<a href="http://cathsfz.cnblogs.com/" target="_blank" rel="noopener">http://cathsfz.cnblogs.com/</a><br>github主页:<a href="https://github.com/catchen" target="_blank" rel="noopener">https://github.com/catchen</a></p><hr><h2 id="国外的技术大神"><a href="#国外的技术大神" class="headerlink" title="国外的技术大神"></a>国外的技术大神</h2><p>顺便延伸一下国际的前端大神，仅供参考学习。</p><p>#####Chris Coyier<br><strong>简介</strong><br>Codepen创始人，css-tricks站长<br><strong>相关链接</strong><br>Twitter、 <a href="https://twitter.com/chriscoyier" target="_blank" rel="noopener">https://twitter.com/chriscoyier</a><br>gitHub、 <a href="https://github.com/chriscoyier" target="_blank" rel="noopener">https://github.com/chriscoyier</a><br><a href="https://css-tricks.com/" target="_blank" rel="noopener">https://css-tricks.com/</a></p><hr><p>#####Mark Otto<br><strong>简介</strong><br>github设计主管，Bootstrap作者。<br><strong>相关链接</strong><br>blog 、 <a href="http://markdotto.com/" target="_blank" rel="noopener">http://markdotto.com/</a><br>Twitter、 <a href="https://twitter.com/mdo" target="_blank" rel="noopener">https://twitter.com/mdo</a><br>gitHub、 <a href="https://github.com/mdo" target="_blank" rel="noopener">https://github.com/mdo</a></p><hr><p>#####Hugo Giraudel<br><strong>简介</strong><br>知名的SASS专家，2015 net awards(net杂志的年度颁奖盛典)的年度开发者。法国人，现居德国柏林。<br><strong>相关链接</strong><br>Twitter、 <a href="https://twitter.com/HugoGiraudel" target="_blank" rel="noopener">https://twitter.com/HugoGiraudel</a><br>gitHub、 <a href="https://github.com/HugoGiraudel" target="_blank" rel="noopener">https://github.com/HugoGiraudel</a><br>sitepoint <a href="https://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="noopener">https://www.sitepoint.com/author/hgiraudel/</a></p><hr><p>#####Lea Verou<br><strong>简介</strong><br>网页设计师、前端开发者、技术极客、演讲家、作家，麻省理工学院计算机与人工智能实验室助理研究员，《CSS Secrets》作者，prefixfree.js作者，在世界各地进行过60多次演讲，简历。希腊人，现居美国马萨诸塞州剑桥市（大波士顿地区）。<br><strong>相关链接</strong><br>Dribbble、 <a href="https://dribbble.com/LeaVerou" target="_blank" rel="noopener">https://dribbble.com/LeaVerou</a><br>Twitter、 <a href="https://twitter.com/leaverou" target="_blank" rel="noopener">https://twitter.com/leaverou</a><br>gitHub、<a href="https://github.com/LeaVerou" target="_blank" rel="noopener">https://github.com/LeaVerou</a><br>facebook: <a href="http://www.facebook.com/leaverou" target="_blank" rel="noopener">http://www.facebook.com/leaverou</a></p><hr><p>#####Paul Irish<br><strong>简介</strong><br>谷歌Chrome团队前端工程师，主要关注开发者工具，是Modernizr、Yeoman、css3 Please、html5 Boilerplate等工具的开发者，合作开发了诸多项目，详情了解他的About。<br><strong>相关链接</strong><br>Twitter、 <a href="https://twitter.com/paul_irish" target="_blank" rel="noopener">https://twitter.com/paul_irish</a><br>gitHub、 <a href="https://github.com/paulirish/" target="_blank" rel="noopener">https://github.com/paulirish/</a></p><hr><p>#####John Resig<br><strong>简介</strong><br>jquery、Processing.js、Sizzle.js等项目作者，现为可汗学院计算机学院负责人。JS忍者秘籍(Secrets of the JavaScript Ninja)、精通JavaScript(Pro JavaScript Techniques)作者。<br><strong>相关链接</strong><br>Twitter、 <a href="https://twitter.com/jeresig" target="_blank" rel="noopener">https://twitter.com/jeresig</a><br>gitHub、 <a href="https://github.com/jeresig" target="_blank" rel="noopener">https://github.com/jeresig</a></p><hr><p>#####Kyle Simpson<br><strong>简介</strong><br>从事跟JS有关的一切事儿，写书、教学、演讲、开发等等，《You Don’t Know JS 》系列丛书作者，你不知道的JavaScript（上卷）、html5 Cookbook作者。<br><strong>相关链接</strong><br>facebook、 <a href="https://facebook.com/kyle-simpson" target="_blank" rel="noopener">https://facebook.com/kyle-simpson</a><br>gitHub、 <a href="https://github.com/getify" target="_blank" rel="noopener">https://github.com/getify</a></p><hr><p>#####Nicolas Gallagher<br><strong>简介</strong><br>Twitter公司前端工程师，normalize.css项目创始人，bower、rework、postcss、npm dom等项目核心参与者。<br><strong>相关链接</strong><br>gitHub、 <a href="http://github.com/necolas" target="_blank" rel="noopener">http://github.com/necolas</a></p><hr><p>#####Sindre Sorhus<br><strong>简介</strong><br>AVA、chalk、yeoman等项目开创者，创建多个流行github项目awesome、awesome-nodejs等。<br><strong>相关链接</strong><br>Twitter、<a href="https://twitter.com/sindresorhus" target="_blank" rel="noopener">https://twitter.com/sindresorhus</a><br>gitHub、 <a href="https://github.com/sindresorhus" target="_blank" rel="noopener">https://github.com/sindresorhus</a></p><hr><p>#####TJ Holowaychuk<br><strong>简介</strong><br>TJ Holowaychuk ，程序员兼艺术家，Koa、Co、Express、jade、mocha、node-canvas、commander.js 等知名开源项目的创建和贡献者。<br><strong>相关链接</strong><br>Twitter、 <a href="http://twitter.com/tjholowaychuk" target="_blank" rel="noopener">http://twitter.com/tjholowaychuk</a><br>gitHub、 <a href="http://github.com/tj" target="_blank" rel="noopener">http://github.com/tj</a><br>blog <a href="http://tjholowaychuk.com/blog/" target="_blank" rel="noopener">http://tjholowaychuk.com/blog/</a></p><hr><p>#####Douglas Crockford<br><strong>简介</strong><br>Douglas Crockford是JavaScript开发社区最知名的权威，是JSON、JSLint、JSMin和ADSafe之父，是《JavaScript: The Good Parts》的作者。他同时也服务于ECMA的JavaScript2.0技术委员会（TC39）。<br><strong>相关链接</strong><br>gitHub、 <a href="https://github.com/douglascrockford" target="_blank" rel="noopener">https://github.com/douglascrockford</a></p><hr><p>#####　Mike Bostock<br><strong>简介</strong><br>Mike Bostock，纽约时报图形编辑，知名可视化库 D3.js的主要作者。<br><strong>相关链接</strong><br>Twitter、 <a href="https://twitter.com/mbostock" target="_blank" rel="noopener">https://twitter.com/mbostock</a><br>gitHub、 <a href="https://github.com/mbostock" target="_blank" rel="noopener">https://github.com/mbostock</a></p><hr><p>作者：RobinsonZhang<br>链接：<a href="https://juejin.im/post/5a9224c6f265da4e710f7786" target="_blank" rel="noopener">https://juejin.im/post/5a9224c6f265da4e710f7786</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文将枚举一些前端界内比较熟知的前端技术大牛，分为个人简介、技术博客、擅长领域几个方向，希望能对初步进入前端的人一些指引和学习的方向。以下排
      
    
    </summary>
    
      <category term="前端分享" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="优质文章分享" scheme="https://ru23.com/tags/%E4%BC%98%E8%B4%A8%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>get请求中特殊字符&amp;的处理</title>
    <link href="https://ru23.com/note/540b8f23.html"/>
    <id>https://ru23.com/note/540b8f23.html</id>
    <published>2018-11-01T03:39:23.000Z</published>
    <updated>2018-11-01T08:10:12.994Z</updated>
    
    <content type="html"><![CDATA[<p>当我们的请求的url为:<br><a href="http://localhost:8080/interface?parameter=kalman03&amp;kalman&amp;1" target="_blank" rel="noopener">http://localhost:8080/interface?parameter=kalman03&amp;kalman&amp;1</a><br>或许你预期在服务器端获得的parameter的结果为kalman03#kalman#1,错！！！实际上得到parameter的值为kalman03。</p><p>这究竟是为什么呢？</p><p>#####原因：<br>parameter的值含有特殊字符&amp;，浏览器自动截断&amp;字符和其后面的值，这样得到的值就为kalman03。</p><p><strong>拓展</strong><br>当参数值中含有特殊字符 <code>?!=()#%&amp;</code> 的时候，获得的值同样也会出现与预期结果不一致的情况。</p><p>#####解决方案：<br>方法1：通过post方式传递数据；<br>方法2：对参数进行一次编码parameter=escape(parameter)；</p><p>JavaScript escape() 函数的功能是把其中某些字符替换成了十六进制的转义序列。该方法不会对ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： - _ . ! ~ * ‘ ( ) 。其他所有的字符都会被转义序列替换。具体参考：<a href="http://www.w3school.com.cn/js/jsref_escape.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/js/jsref_escape.asp</a>.<br>这样来就不会出现自动截断或者其他意想不到的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们的请求的url为:&lt;br&gt;&lt;a href=&quot;http://localhost:8080/interface?parameter=kalman03&amp;amp;kalman&amp;amp;1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://local
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>如何利用上下班地铁闲置时间提升自己的前端技术(更新时间：20181030)</title>
    <link href="https://ru23.com/note/60aa5031.html"/>
    <id>https://ru23.com/note/60aa5031.html</id>
    <published>2018-10-30T03:25:50.000Z</published>
    <updated>2018-11-01T08:08:35.759Z</updated>
    
    <content type="html"><![CDATA[<p>你可以关注一下这些前端公众号，充分利用自己的碎片化时间在看公众号推荐的文章获取前端知识</p><h3 id="前端迷"><a href="#前端迷" class="headerlink" title="前端迷"></a>前端迷</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47767553-1d435500-dd0f-11e8-99ea-63cc43444e5c.jpg" alt="前端迷" title="">                </div>                <div class="image-caption">前端迷</div>            </figure><p>简介：前端迷是一个公益性的前端技术分享平台，可以为广大前端开发者们带来最新的技术资讯，欢迎大家订阅。</p><hr><h3 id="前端指南"><a href="#前端指南" class="headerlink" title="前端指南"></a>前端指南</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47712763-8f665c00-dc73-11e8-8ddb-d9d5674a0f02.jpg" alt="前端指南" title="">                </div>                <div class="image-caption">前端指南</div>            </figure><p>简介：每天早上6点更新，一个懂你的前端公众号</p><hr><h3 id="前端桃园"><a href="#前端桃园" class="headerlink" title="前端桃园"></a>前端桃园</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47712764-8ffef280-dc73-11e8-8922-c5f60406df68.jpg" alt="前端桃园" title="">                </div>                <div class="image-caption">前端桃园</div>            </figure><p>简介：一个有温度的前端号，不止前端，互联网前沿知识，个人随想，认知提升，学习方法，成为你想成为的那个样子</p><hr><h3 id="高级前端进阶"><a href="#高级前端进阶" class="headerlink" title="高级前端进阶"></a>高级前端进阶</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47713226-b5403080-dc74-11e8-8dff-8fead9b911a6.jpg" alt="高级前端进阶" title="">                </div>                <div class="image-caption">高级前端进阶</div>            </figure><p>简介：我是木易杨，现在是网易高级前端工程师，目前维护了一个高级前端进阶群，欢迎加入。接下来让我带你走进高级前端的世界，在进阶的路上，共勉！</p><h3 id="前端达人"><a href="#前端达人" class="headerlink" title="前端达人"></a>前端达人</h3><p><img src="" alt="前端达人"></p><h2 id="简介：专注分享当下最实用的前端技术。关注前端达人，与达人一起学习进步！"><a href="#简介：专注分享当下最实用的前端技术。关注前端达人，与达人一起学习进步！" class="headerlink" title="简介：专注分享当下最实用的前端技术。关注前端达人，与达人一起学习进步！"></a>简介：专注分享当下最实用的前端技术。关注前端达人，与达人一起学习进步！</h2><h4 id="推荐前端公众号"><a href="#推荐前端公众号" class="headerlink" title="推荐前端公众号"></a>推荐前端公众号</h4><p>要求：<br>1.粉丝1000+的，周推文两篇以上<br>2.技术分享公众号（前端开发）<br>联系wechat：<strong>lijian1076629390</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你可以关注一下这些前端公众号，充分利用自己的碎片化时间在看公众号推荐的文章获取前端知识&lt;/p&gt;
&lt;h3 id=&quot;前端迷&quot;&gt;&lt;a href=&quot;#前端迷&quot; class=&quot;headerlink&quot; title=&quot;前端迷&quot;&gt;&lt;/a&gt;前端迷&lt;/h3&gt;&lt;figure class=&quot;ima
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>关于webpack，CommonsChunkPlugin无效，重复引用的问题</title>
    <link href="https://ru23.com/note/9aead141.html"/>
    <id>https://ru23.com/note/9aead141.html</id>
    <published>2018-10-29T07:49:29.000Z</published>
    <updated>2018-11-01T08:08:35.707Z</updated>
    
    <content type="html"><![CDATA[<p><strong>坑1</strong><br>CommonChunkPlugin需要加上minChunks属性，minChunks是指一个文件至少被require几次才会被放到CommonChunk里，如果minChunks等于2，说明一个文件至少被require两次才能放在CommonChunk里。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">"common"</span>,</span><br><span class="line">        minChunks: <span class="number">2</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p><p><strong>坑2</strong><br>UglifyJsPlugin现在不支持es6，必须要用babel转换成es5。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;坑1&lt;/strong&gt;&lt;br&gt;CommonChunkPlugin需要加上minChunks属性，minChunks是指一个文件至少被require几次才会被放到CommonChunk里，如果minChunks等于2，说明一个文件至少被require两次才能放
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="webpack" scheme="https://ru23.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期和react生命周期对比</title>
    <link href="https://ru23.com/note/73225ea8.html"/>
    <id>https://ru23.com/note/73225ea8.html</id>
    <published>2018-10-27T09:29:11.000Z</published>
    <updated>2018-11-01T09:37:47.001Z</updated>
    
    <content type="html"><![CDATA[<p>react和vue的业务逻辑是差不多，vue在react上封装了更简洁的方法，使用起来更加的便捷，如：提供了便捷的指令（v-for,v-if,v-model），还提供了更多的属性（computed,watch），我还是比较喜欢用react的，更接近js原生，更容易于理解它。</p><h1 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h1><h3 id="一-如下图所示-很清晰-初始化、编译、更新、销毁"><a href="#一-如下图所示-很清晰-初始化、编译、更新、销毁" class="headerlink" title="一 如下图所示(很清晰)初始化、编译、更新、销毁"></a>一 如下图所示(很清晰)初始化、编译、更新、销毁</h3><p><img src="/img/2018/10/vue-life-cycle.png" alt="vue生命周期"></p><h3 id="二-vue生命周期的栗子"><a href="#二-vue生命周期的栗子" class="headerlink" title="二 vue生命周期的栗子"></a>二 vue生命周期的栗子</h3><p> 注意触发vue的created事件以后,this便指向vue实例,这点很重要<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">".test"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">a: <span class="string">"我是内容,在控制台输入myVue.a=123456,可以改变我的值"</span></span><br><span class="line">&#125;,</span><br><span class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。</span></span><br><span class="line"><span class="comment">//但是还没有开始 dom 编译，$el 还不存在,但是实例存在,即this.a存在,可打印出来 。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"建立"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">beforeCompile: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"未开始编译"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">compiled: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在编译结束后调用。此时所有的指令已生效，因而数据的变化将触发 dom 更新。但是不担保 $el 已插入文档。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"编译完成"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">ready: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在编译结束和 $el 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.$appendTo() 等方法或指令更新）才触发 ready 钩子。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"一切准备好了"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//myVue.$appendTo(".test2")暂时触发不了,不知道怎么解决</span></span><br><span class="line"><span class="comment">//在 vm.$el 插入 dom 时调用。必须是由指令或实例方法（如 $appendTo()）插入，直接操作 vm.$el 不会 触发这个钩子。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"插入dom成功"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">detached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//触发事件 myVue.$destroy(true),其中参数true控制是否删除dom节点或者myVue.$remove()</span></span><br><span class="line"><span class="comment">//在 vm.$el 从 dom 中删除时调用。必须是由指令或实例方法删除，直接操作 vm.$el 不会 触发这个钩子。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"删除dom成功"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//触发方式,在console里面打myVue.$destroy();</span></span><br><span class="line"><span class="comment">//在开始销毁实例时调用。此时实例仍然有功能。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"销毁前"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//触发方式,在console里面打myVue.$destroy();其中myVue.$destroy(true)是删除dom节点,会触发detached函数,但是实例仍然存在</span></span><br><span class="line"><span class="comment">//在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，注意是解绑不是销毁,所有的子实例也已经被销毁。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"已销毁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="react生命周期"><a href="#react生命周期" class="headerlink" title="react生命周期"></a>react生命周期</h1><h3 id="React-生命周期分为三种状态-1-初始化-2-更新-3-销毁"><a href="#React-生命周期分为三种状态-1-初始化-2-更新-3-销毁" class="headerlink" title="React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁"></a>React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/10/react-life-cycle.jpg" alt="React生命周期" title="">                </div>                <div class="image-caption">React生命周期</div>            </figure><p>•初始化</p><p>1、<code>getDefaultProps()</code><br>设置默认的props，也可以用ufaultProps设置组件的默认属性.</p><p>2、<code>getInitialState()</code><br>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props</p><p>3、<code>componentWillMount()</code><br>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p><p>4、 <code>render()</code><br>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p><p>5、<code>componentDidMount()</code><br>组件渲染之后调用，只调用一次。</p><p>•更新</p><p>6、<code>componentWillReceiveProps(nextProps)</code><br>组件初始化时不调用，组件接受新的props时调用。</p><p>7、<code>shouldComponentUpdate(nextProps, nextState)</code><br>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</p><p>8、<code>componentWillUpdata(nextProps, nextState)</code><br>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p><p>9、<code>render()</code><br>组件渲染</p><p>10、<code>componentDidUpdate()</code><br>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p><p>•卸载</p><p>11、<code>componentWillUnmount()</code></p><p>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react和vue的业务逻辑是差不多，vue在react上封装了更简洁的方法，使用起来更加的便捷，如：提供了便捷的指令（v-for,v-if,v-model），还提供了更多的属性（computed,watch），我还是比较喜欢用react的，更接近js原生，更容易于理解它。
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
      <category term="react" scheme="https://ru23.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>js深度拷贝解决双向绑定问题(包含es6方法)</title>
    <link href="https://ru23.com/note/284d188d.html"/>
    <id>https://ru23.com/note/284d188d.html</id>
    <published>2018-10-26T07:44:21.000Z</published>
    <updated>2018-11-01T08:08:35.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当我们利用v-bind：来绑定属性向子组件传递对象的时候，有时候我们需要子组件改变的时候不改变父组件的值，一般可以利用JSON.stringify(JSON.parse(jsonstr))将传递来的对象赋值到子组件自己的data，这样做的原理是对传过来的值重新赋予一个空间，从而解决双向绑定。，但是es6有一个深度赋值的方法也可以解决这个问题, let obj= Object.assign({}, obj)也可以解决。</p></blockquote><p>比如一个数组（array）<strong>浅度拷贝是当数组a变量成数组b的时候，b改变里面的数组数值的时候，a也随着改变。</strong><br>浅度拷贝保存了一个指向该对象的指针，所有的操作都是对该引用的操作，所以对对象的修改会影响其他的复制对象。<br><strong>深度拷贝是当当数组a变量成数组b的时候，b改变里面的数组数值的时候，a里面的数组数组不随着改变。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];      </span><br><span class="line"><span class="keyword">var</span> Arr = <span class="built_in">JSON</span>.stringify(arr); <span class="comment">//先转化为string字符串的类型</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">var</span> Brr = <span class="built_in">JSON</span>.parse(Arr); <span class="comment">//在解析字符串的类型</span></span><br><span class="line">Brr[<span class="number">1</span>] = <span class="string">'h'</span>;             <span class="comment">//这样修改Brr中的数组的时候就不会影响到arr里面数组的值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr:'</span> + arr); <span class="comment">//结果是arr:a,h,c,d,e</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Arr:"</span> + Brr); <span class="comment">//结果是Arr:a,h,c,d,e</span></span><br></pre></td></tr></table></figure><p>JSON是一种表示结构化数据的格式，只支持简单值、对象和数组三种类型，不支持变量、函数或对象实例。所以我们工作中可以使用它解决常见问题，但也要注意其短板：函数会丢失，原型链会丢失，以及上面说到的所有缺陷。</p><p>那么为什么浅度拷贝会改变a的数组值而深度拷贝则不会呢？</p><p>因为浅度拷贝指向的是同一个内存，而深度拷贝是增加了一个新的内存，所以不会影响到原来a的内存， 所 以就不会改变原来的值<br><code>eg.</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];      </span><br><span class="line"><span class="keyword">var</span> Arr = arr;    </span><br><span class="line">Arr[<span class="number">1</span>] = <span class="string">'h'</span>;     </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr:'</span> + arr);  <span class="comment">//arr的下标1的‘b’也变成了‘h’ 结果是：arr:a,h,c,d,e</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Arr:"</span> + Arr); <span class="comment">//结果是：Arr:a,h,c,d,e</span></span><br></pre></td></tr></table></figure></p><h2 id="数组的深拷贝"><a href="#数组的深拷贝" class="headerlink" title="数组的深拷贝"></a>数组的深拷贝</h2><p>对于数组的深拷贝常规的有三种方法：</p><p><strong>方法一：遍历复制</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>], arrCopy = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arr) arrCopy[item] = arr[item];</span><br><span class="line">arrCopy[<span class="number">1</span>] = <span class="string">"c"</span>;</span><br><span class="line">arr   <span class="comment">// =&gt; ["a", "b"]</span></span><br><span class="line">arrCopy   <span class="comment">// =&gt; ["a", "c"]</span></span><br></pre></td></tr></table></figure></p><p>考虑伪多维数组可以写成函数形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrDeepCopy</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) sourceCopy[item] = <span class="keyword">typeof</span> source[item] === <span class="string">'object'</span> ? arrDeepCopy(source[item]) : source[item];</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法简单粗暴，但是利用JS本身的函数我们可以更加便捷地实现这个操作。</p><p><strong>方法二：slice()</strong></p><p>可以参考 W3School 对 slice() 方法的描述：slice() 方法可从已有的数组中返回选定的元素。</p><p>调用格式为：</p><p><code>arrayObject.slice(start,end)</code><br>方法返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。该方法并不会修改数组，而是返回一个子数组。</p><p>在这里我们的思路是直接从数组开头截到尾：</p><p>arrCopy = arr.slice(0);<br>arrCopy[1] = “c”;<br>arr   // =&gt; [“a”, “b”]<br>arrCopy   // =&gt; [“a”, “c”]<br>可以看出成功创建了一份原数组的拷贝。</p><p><strong>方法三：concat()</strong></p><p>可以参考 W3School 对 <code>concat()</code> 方法的描述：<code>concat()</code> 方法用于连接两个或多个数组。</p><p>调用格式为：<br><code>arrayObject.concat(arrayX,arrayX,......,arrayX)</code><br>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p>使用这种方法的思路是我们用原数组去拼接一个空内容，放回的便是这个数组的拷贝：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arrCopy = arr.concat();</span><br><span class="line">arrCopy[<span class="number">1</span>] = <span class="string">"c"</span>;</span><br><span class="line">arr   <span class="comment">// =&gt; ["a", "b"] </span></span><br><span class="line">arrCopy   <span class="comment">// =&gt; ["a", "c"]</span></span><br></pre></td></tr></table></figure></p><h2 id="对象的深拷贝"><a href="#对象的深拷贝" class="headerlink" title="对象的深拷贝"></a>对象的深拷贝</h2><p>对于数组的深拷贝我们有了概念，那么一般对象呢？</p><p>我们给出一个对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>同样做测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objCopy = obj;</span><br><span class="line">objCopy.b = <span class="number">3</span>;</span><br><span class="line">obj   <span class="comment">// =&gt; &#123; "a": 1, "b": 3 &#125;</span></span><br><span class="line">objCopy   <span class="comment">// =&gt; &#123; "a": 1, "b": 3 &#125;</span></span><br></pre></td></tr></table></figure></p><p>同样，简单的赋值运算只是创建了一份浅拷贝。</p><p>而对于对象的深拷贝，没有内置方法可以使用，我们可以自己命名一个函数进行这一操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objDeepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) sourceCopy[item] = source[item];</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是对于复杂结构的对象我们发现这个函数并不适用，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"a"</span>: &#123; <span class="string">"a1"</span>: [<span class="string">"a11"</span>, <span class="string">"a12"</span>], <span class="string">"a2"</span>: <span class="number">1</span> &#125;, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>所以需要进行一点修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objDeepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) sourceCopy[item] = <span class="keyword">typeof</span> source[item] === <span class="string">'object'</span> ? objDeepCopy(source[item]) : source[item];</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objCopy = objDeepCopy(obj);</span><br><span class="line">objCopy.a.a1[<span class="number">1</span>] = <span class="string">"a13"</span>;</span><br><span class="line">obj   <span class="comment">// =&gt; &#123; "a": &#123; "a1": ["a11", "a12"], "a2": 1 &#125;, "b": 2 &#125;</span></span><br><span class="line">objCopy   <span class="comment">// =&gt; &#123; "a": &#123; "a1": ["a11", "a13"], "a2": 1 &#125;, "b": 2 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、对象数组的深拷贝</strong></p><p> 如果再考虑更奇葩更复杂的情况，例如我们定义：</p><p>var obj = [{ “a”: { “a1”: [“a11”, “a12”], “a2”: 1 }, “b”: 2 }, [“c”, { “d”: 4, “e”: 5 }]];<br>这是一个由对象、数组杂合成的奇葩数组，虽然我们平时写程序基本不可能这么折腾自己，但是可以作为一种特殊情况来考虑，这样我们就可以结合之前说的方法去拓展拷贝函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objDeepCopy = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = source <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) &#123;</span><br><span class="line">        sourceCopy[item] = <span class="keyword">typeof</span> source[item] === <span class="string">'object'</span> ? objDeepCopy(source[item]) : source[item];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objCopy = objDeepCopy(obj);</span><br><span class="line">objCopy[<span class="number">0</span>].a.a1[<span class="number">1</span>] = <span class="string">"a13"</span>;</span><br><span class="line">objCopy[<span class="number">1</span>][<span class="number">1</span>].e = <span class="string">"6"</span>;</span><br><span class="line">obj   <span class="comment">// =&gt; [&#123; "a": &#123; "a1": ["a11", "a12"], "a2": 1 &#125;, "b": 2 &#125;, ["c", &#123; "d": 4, "e": 5 &#125;]]</span></span><br><span class="line">objCopy   <span class="comment">// =&gt; [&#123; "a": &#123; "a1": ["a11", "a13"], "a2": 1 &#125;, "b": 2 &#125;, ["c", &#123; "d": 4, "e": 6 &#125;]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;当我们利用v-bind：来绑定属性向子组件传递对象的时候，有时候我们需要子组件改变的时候不改变父组件的值，一般可以利用JSON.stringify(JSON.parse(jsonstr))将传递来的对象赋值到子组件自己的data，这样做的原理是对传
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="javascript" scheme="https://ru23.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ajax和fetch、axios的优缺点以及比较</title>
    <link href="https://ru23.com/note/7fae67c6.html"/>
    <id>https://ru23.com/note/7fae67c6.html</id>
    <published>2018-10-26T01:18:54.000Z</published>
    <updated>2018-11-01T09:36:41.279Z</updated>
    
    <content type="html"><![CDATA[<p>前端是个发展迅速的领域，前端请求自然也发展迅速，从原生的XHR到jquery ajax，再到现在的axios和fetch。</p><h2 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery ajax"></a>jquery ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: data,</span><br><span class="line">    dataType: dataType,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>它是对原生XHR的封装，还支持JSONP，非常方便；真的是用过的都说好。但是随着react，vue等前端框架的兴起，jquery早已不复当年之勇。很多情况下我们只需要使用ajax，但是却需要引入整个jquery，这非常的不合理，于是便有了fetch的解决方案。</p><p><strong>优缺点</strong></p><ul><li>本身是针对MVC的编程,不符合现在前端mvvm的浪潮</li><li>基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案</li><li>JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）</li></ul><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p><code>fetch</code>号称是ajax的替代品，它的api是基于Promise设计的，旧版本的浏览器不支持<code>Promise</code>，需要使用<code>polyfill es6-promise</code></p><p>举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生XHR</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, url);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText) <span class="comment">// 从服务器获取数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line">fetch(url).then(response = &gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">response.json()</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(data = &gt; <span class="built_in">console</span>.log(data)).</span><br><span class="line"><span class="keyword">catch</span> (err = &gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">看起来好像是方便点，then链就像之前熟悉的callback。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在MDN上，讲到它跟jquery ajax的区别，这也是fetch很奇怪的地方：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当接收到一个代表错误的 HTTP 状态码时，从 fetch()返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ）， 仅当网络故障时或请求被阻止时，才会标记为 reject。 默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">突然感觉这还不如jquery ajax好用呢？别急，再搭配上async/await将会让我们的异步代码更加优雅：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看起来是不是像同步代码一样？简直完美！好吧，其实并不完美，async/await是ES7的api，目前还在试验阶段，还需要我们使用babel进行转译成ES5代码。</p><p>还要提一下的是，fetch是比较底层的api，很多情况下都需要我们再次封装。 比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery ajax</span></span><br><span class="line">$.post(url, &#123;<span class="attr">name</span>: <span class="string">'test'</span>&#125;)</span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: <span class="built_in">Object</span>.keys(&#123;<span class="attr">name</span>: <span class="string">'test'</span>&#125;).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[key]);</span><br><span class="line">    &#125;).join(<span class="string">'&amp;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">由于fetch是比较底层的api，所以需要我们手动将参数拼接成'name=test'的格式，而jquery ajax已经封装好了。所以fetch并不是开箱即用的。</span></span><br><span class="line"><span class="string">另外，fetch还不支持超时控制。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**优缺点：**</span></span><br><span class="line"><span class="string">- 符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里</span></span><br><span class="line"><span class="string">- 更好更方便的写法</span></span><br><span class="line"><span class="string">- 更加底层，提供的api丰富（request, response）</span></span><br><span class="line"><span class="string">- 脱离了XHR，是ES规范里新的实现方式</span></span><br><span class="line"><span class="string">- 1）fetchtch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</span></span><br><span class="line"><span class="string">- 2）fetch默认不会带cookie，需要添加配置项</span></span><br><span class="line"><span class="string">- 3）fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了量的浪费</span></span><br><span class="line"><span class="string">- 4）fetch没有办法原生监测请求的进度，而XHR可以</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## axios</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">axios是尤雨溪大神推荐使用的，它也是对原生XHR的封装。它有以下几大特性：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以在node.js中使用</span></span><br><span class="line"><span class="string">提供了并发请求的接口</span></span><br><span class="line"><span class="string">支持Promise api</span></span><br><span class="line"><span class="string">简单使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(err)&#125;)</span><br></pre></td></tr></table></figure></p><p>写法有很多种，自行查看文档</p><p>并发请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Both requests are now complete</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p><p>这是官方的并发案例，好像是挺厉害的样子。不过感觉它的all方法应该是基于Promise.all()的</p><p>axios体积比较小，也没有上面fetch的各种问题，我认为是当前最好的请求方式 </p><p><strong>优缺点：</strong></p><p>从 node.js 创建 http 请求<br>支持 Promise api<br>客户端支持防止CSRF<br>提供了一些并发请求的接口（重要，方便了很多的操作）</p><p>最后，这都是些基础用法，还没有深入了解，还是要在实战中踩过坑才能运用的更加自如。</p><h1 id="为什么要用axios"><a href="#为什么要用axios" class="headerlink" title="为什么要用axios?"></a>为什么要用axios?</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><p>从浏览器中创建 XMLHttpRequest<br>从 node.js 发出 http 请求<br>支持 Promise api<br>拦截请求和响应<br>转换请求和响应数据<br>取消请求<br>自动转换JSON数据<br>客户端支持防止CSRF/XSRF</p><p>以上内容整理于互联网<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47509372-8dce1a00-d8a8-11e8-959d-faf613af8dcc.jpg" alt="0" title="">                </div>                <div class="image-caption">0</div>            </figure></p><hr><blockquote><p>作者：林寻丶<br>来源：掘金<br>原文：<a href="https://juejin.im/post/5acde23c5188255cb32e7e76?utm_medium=fe&amp;utm_source=weixinqun" target="_blank" rel="noopener">https://juejin.im/post/5acde23c5188255cb32e7e76?utm_medium=fe&amp;utm_source=weixinqun</a></p></blockquote><hr><blockquote><p>作者：WebCandy<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/twodogya/article/details/80223508" target="_blank" rel="noopener">https://blog.csdn.net/twodogya/article/details/80223508</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端是个发展迅速的领域，前端请求自然也发展迅速，从原生的XHR到jquery ajax，再到现在的axios和fetch。&lt;/p&gt;
&lt;h2 id=&quot;jquery-ajax&quot;&gt;&lt;a href=&quot;#jquery-ajax&quot; class=&quot;headerlink&quot; title=&quot;j
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="axios" scheme="https://ru23.com/tags/axios/"/>
    
      <category term="ajax" scheme="https://ru23.com/tags/ajax/"/>
    
      <category term="fetch" scheme="https://ru23.com/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>关于数组中forEach() 、map()、filter()、reduce()、some()、every()的总结</title>
    <link href="https://ru23.com/note/afd16d4c.html"/>
    <id>https://ru23.com/note/afd16d4c.html</id>
    <published>2018-10-22T14:43:01.000Z</published>
    <updated>2018-11-01T08:08:35.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach()"></a>1、forEach()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.forEach((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">//结果为1,2,3,4 </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//forEach遍历数组，无返回值，不改变原数组，仅仅只是遍历、常用于注册组件、指令等等。</span></span><br></pre></td></tr></table></figure><h2 id="2、map"><a href="#2、map" class="headerlink" title="2、map()"></a>2、map()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.map((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item * <span class="number">10</span></span><br><span class="line"><span class="comment">//新数组为10,20,30,40 </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">////map遍历数组，返回一个新数组，不改变原数组的值。</span></span><br></pre></td></tr></table></figure><h2 id="3、filter"><a href="#3、filter" class="headerlink" title="3、filter()"></a>3、filter()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.filter((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line"><span class="comment">//新数组为[3,4] </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//filter过滤掉数组中不满足条件的值，返回一个新数组，不改变原数组的值。</span></span><br></pre></td></tr></table></figure><h2 id="4、reduce"><a href="#4、reduce" class="headerlink" title="4、reduce()"></a>4、reduce()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4];</span><br><span class="line">arr.reduce((result, item, index, arr) = &gt; &#123;</span><br><span class="line">console.log(result)</span><br><span class="line">// 1 3 6 result为上次一计算的结果</span><br><span class="line">console.log(item)</span><br><span class="line">// // 2 3 4 </span><br><span class="line">console.log(index)</span><br><span class="line">// // 1 2 3</span><br><span class="line">return result + item</span><br><span class="line">//最终结果为10 </span><br><span class="line">&#125;)</span><br><span class="line">//reduce 让数组的前后两项进行某种计算。</span><br><span class="line">//然后返回其值，并继续计算。</span><br><span class="line">//不改变原数组，返回计算的最终结果，从数组的第二项开始遍历。</span><br></pre></td></tr></table></figure><h2 id="5、some"><a href="#5、some" class="headerlink" title="5、some()"></a>5、some()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.some((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line"><span class="comment">//结果为true </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//遍历数组每一项，有一项返回true,则停止遍历，</span></span><br><span class="line"><span class="comment">//结果返回true。不改变原数组</span></span><br></pre></td></tr></table></figure><h2 id="6、every"><a href="#6、every" class="headerlink" title="6、every()"></a>6、every()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.every((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line"><span class="comment">//结果为false </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//遍历数组每一项，每一项返回true,则最终结果为true。</span></span><br><span class="line"><span class="comment">//当任何一项返回false时，停止遍历，返回false。不改变原数组</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、forEach&quot;&gt;&lt;a href=&quot;#1、forEach&quot; class=&quot;headerlink&quot; title=&quot;1、forEach()&quot;&gt;&lt;/a&gt;1、forEach()&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="javascript" scheme="https://ru23.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题携带cookie加入withCredentials报错原因以及解决方案</title>
    <link href="https://ru23.com/note/b2790fdc.html"/>
    <id>https://ru23.com/note/b2790fdc.html</id>
    <published>2018-10-22T10:26:41.000Z</published>
    <updated>2018-11-01T08:08:35.760Z</updated>
    
    <content type="html"><![CDATA[<p>1.跨域允许<br>解决方法：服务器发送允许客户端发送源的报文头<br>header(‘Access-Control-Allow-Origin:’.$_SERVER[“HTTP_ORIGIN”]);<br>2.客户端无法携带跨域cookie<br>这个时候就可以在extjs中加入withCredentials<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://120.111.111.123/setcookie.php'</span>,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    params: &#123; </span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'hello world'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    withCredentials: <span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">transport</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">    failure: <span class="function"><span class="keyword">function</span>(<span class="params">transport</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"Error: "</span> - transport.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>3.因为加了withCredentials报文头，可是客户端不知道服务器允不允许报的错（耿直的客户端）<br>这个时候就在服务器发送Access-Control-Allow-Credentials<br>header(‘Access-Control-Allow-Credentials:true’);<br>4.由于客户端不知道服务端是否允许POST请求而报的错<br>这个时候要在服务器端加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);</span><br></pre></td></tr></table></figure></p><p>以上汇总起来就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Origin:&apos;.$_SERVER[&apos;HTTP_ORIGIN&apos;]);</span><br><span class="line">header(&apos;Access-Control-Allow-Credentials:true&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Methods:GET, POST, PUT, DELETE, OPTIONS&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with,content-type&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:Origin, No-Cache, X-Requested-With, If-Modified-Since,</span><br></pre></td></tr></table></figure><p>1.跨域允许<br>不允许报错的跨域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. </span><br><span class="line">Origin &apos;null&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></p><p>报这个错就说明我们跨域了，不在允许的访问源，于是乎我在服务的setcookie.php加入<code>header(&#39;Access-Control-Allow-Origin:*&#39;)</code>;允许所有源<br>然后又报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://120.111.111.123/setcookie.php. Request header field X-Requested-With is not allowed by Access-Control-Allow-Headers in preflight response.</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">在跨域的时候，js不会直接发post请求，而是先发送一个option请求，看看服务器允许什么访问头（比如是不是允许post请求），验证成功后才会发送真正的请求</span><br></pre></td></tr></table></figure></p><p>#用谷歌的开发者工具抓的option报文<br>OPTIONS /setcookie.php HTTP/1.1<br>Host: 120.111.111.123<br>Connection: keep-alive<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Access-Control-Request-Method: POST<br>Origin: null<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36<br>Access-Control-Request-Headers: x-requested-with<br>Accept: <em>/</em><br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: zh-CN,zh;q=0.8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>#path /setcookie.php<br>session_start();<br>header(‘Access-Control-Allow-Origin:*’);<br>header(‘Access-Control-Allow-Methods:OPTIONS, GET, POST’); // 允许option，get，post请求<br>header(‘Access-Control-Allow-Headers:x-requested-with’); // 允许x-requested-with请求头<br>header(‘Access-Control-Max-Age:86400’); // 允许访问的有效期<br>// 功能…<br>// …<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">继续测试我们的新功能，成功的解决了跨域问题</span><br><span class="line">但是，cookie没有“设置成功”。而之所以没有“设置成功”，是因为cookie存在本地，但是每个cookie都有一个domain，当你本地的cookie中存在你当前访问的域时，才会被带过去，而我的index.html文件是本地访问的，即http://localhost/index.html，而cookie的域是要跨域的域名的，所以不行了。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;POST&quot;,</span><br><span class="line">    url: &quot;跨域的url&quot;,</span><br><span class="line">    xhrFields: &#123;</span><br><span class="line">         withCredentials: true </span><br><span class="line">    &#125;, // 发送凭据</span><br><span class="line">    contentType: &quot;application/json; charset=utf-8&quot;,</span><br><span class="line">    data: JSON.stringify(data),</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    success: function (message) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    error: function (message) &#123;</span><br><span class="line">        console.log(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>继续访问，报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: A wildcard &apos;*&apos; cannot be used in the &apos;Access-Control-Allow-Origin&apos; header when the credentials flag is true. </span><br><span class="line">Origin &apos;null&apos; is therefore not allowed access. </span><br><span class="line">The credentials mode of an XMLHttpRequest is controlled by the withCredentials attribute.</span><br></pre></td></tr></table></figure></p><p>现在这个错误产生的原因就是<br>1.因为加入了withCredentials之后，Access-Control-Allow-Origin就不能用“*”了，既然不允许访问这个源，那我就让你发个报文头让你允许访问呗！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#path setcookie.php</span><br><span class="line">session_start();</span><br><span class="line">// 是否存在请求源</span><br><span class="line">if(isset($_SERVER[&quot;HTTP_ORIGIN&quot;])) &#123;</span><br><span class="line">    header(&apos;Access-Control-Allow-Origin:&apos;.$_SERVER[&quot;HTTP_ORIGIN&quot;]);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);</span><br><span class="line"></span><br><span class="line">// 功能...</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>好了，上传完代码，继续测试。发送请求之后，又报错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: Credentials flag is &apos;true&apos;, but the &apos;Access-Control-Allow-Credentials&apos; header is &apos;&apos;. </span><br><span class="line">It must be &apos;true&apos; to allow credentials. Origin &apos;null&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></p><p>大概的意思就是说我给你发了<code>withCredentials</code>报文头，但是你服务器没有跟我说允许我带这个报文头，那么解决方法就是加上允许发这个报文头的报文头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">// 是否存在请求源</span><br><span class="line">if(isset($_SERVER[&quot;HTTP_ORIGIN&quot;])) &#123;</span><br><span class="line">    header(&apos;Access-Control-Allow-Origin:&apos;.$_SERVER[&quot;HTTP_ORIGIN&quot;]);  </span><br><span class="line">&#125;</span><br><span class="line">header(&apos;Access-Control-Allow-Origin:null&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);</span><br><span class="line"></span><br><span class="line">header(&apos;Access-Control-Allow-Credentials:true&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 功能...</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>终于成功了！</p><blockquote><p>摘自<br>链接：<a href="https://www.jianshu.com/p/552daaf2869c" target="_blank" rel="noopener">https://www.jianshu.com/p/552daaf2869c</a><br>來源：简书</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.跨域允许&lt;br&gt;解决方法：服务器发送允许客户端发送源的报文头&lt;br&gt;header(‘Access-Control-Allow-Origin:’.$_SERVER[“HTTP_ORIGIN”]);&lt;br&gt;2.客户端无法携带跨域cookie&lt;br&gt;这个时候就可以在extjs
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="跨域" scheme="https://ru23.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="ajax" scheme="https://ru23.com/tags/ajax/"/>
    
      <category term="cookie" scheme="https://ru23.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>输入框input类型为number时，去掉上下箭头样式</title>
    <link href="https://ru23.com/note/1c69a5f4.html"/>
    <id>https://ru23.com/note/1c69a5f4.html</id>
    <published>2018-10-22T08:57:28.000Z</published>
    <updated>2018-11-01T08:08:35.794Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-outer-spin-button</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-inner-spin-button</span> &#123;</span></span><br><span class="line"><span class="undefined">        -webkit-appearance: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[type="number"]</span>&#123;</span></span><br><span class="line"><span class="undefined">        -moz-appearance: textfield;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="html5" scheme="https://ru23.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之hybrid</title>
    <link href="https://ru23.com/note/b3429210.html"/>
    <id>https://ru23.com/note/b3429210.html</id>
    <published>2018-10-20T17:13:10.000Z</published>
    <updated>2018-11-01T08:08:35.501Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-c6dfe0f6f12fe034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="一、hybrid-是什么，为何会用-hybrid"><a href="#一、hybrid-是什么，为何会用-hybrid" class="headerlink" title="一、hybrid 是什么，为何会用 hybrid"></a>一、hybrid 是什么，为何会用 hybrid</h2><h3 id="1-1-hybrid-文字解释"><a href="#1-1-hybrid-文字解释" class="headerlink" title="1.1 hybrid 文字解释"></a>1.1 hybrid 文字解释</h3><ul><li><code>hybrid</code> 即“混合”，即前端和客户端的混合开发</li><li>需前端开发人员和客户端开发人员配合完成</li><li>某些环节也可能涉及到 <code>server</code> 端</li><li>PS：不要以为自己的前端就可以不理会客户端的知识</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-8bb6aab836ef1b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-2-hybrid-存在价值"><a href="#1-2-hybrid-存在价值" class="headerlink" title="1.2 hybrid 存在价值"></a>1.2 hybrid 存在价值</h3><ul><li>可以快速迭代更新【关键】（无需 app 审核，思考为何？）</li><li>体验流畅（和 NA 的体验基本类似）</li><li>减少开发和沟通成本，双端公用一套代码</li></ul><h3 id="1-3-webview"><a href="#1-3-webview" class="headerlink" title="1.3 webview"></a>1.3 webview</h3><ul><li>是 <code>app</code> 中的一个组件（ <code>app</code> 可以有 <code>webview</code> ，也可以没有）</li><li>于加载 <code>h5</code> 页面，即一个小型的浏览器内核</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-683f8336237ea709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2c35b8e256628d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-4-file-协议"><a href="#1-4-file-协议" class="headerlink" title="1.4 file 协议"></a>1.4 file 协议</h3><ul><li>其实在一开始接触 <code>html</code>开发，就已经使用了 <code>file</code> 协议</li><li>只不过你当时没有“协议”“标准”等这些概念</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-658f64270968f795.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-5-http-s-协议"><a href="#1-5-http-s-协议" class="headerlink" title="1.5 http(s) 协议"></a>1.5 http(s) 协议</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-120c70939dda4f33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-6-两者区别"><a href="#1-6-两者区别" class="headerlink" title="1.6 两者区别"></a>1.6 两者区别</h3><ul><li><code>file</code> 协议：本地文件，快</li><li><code>http(s)</code> 协议：网络加载，慢</li></ul><h3 id="1-7-具体实现"><a href="#1-7-具体实现" class="headerlink" title="1.7 具体实现"></a>1.7 具体实现</h3><ul><li>不是所有场景都适合使用 <code>hybrid</code></li><li>使用 <code>NA</code> ：体验要求极致，变化不频繁（无头条的首页）</li><li>使用 <code>hybrid</code> ：体验要求高，变化频繁（如头条的新闻详情页）</li><li>使用 <code>h5</code> ：体验无要求，不常用（如举报、反馈等页面）</li></ul><blockquote><p>实现</p></blockquote><ul><li>前端做好静态页面（<code>html js css</code>），将文件交给客户端</li><li>客户端拿到前端静态页面，以文件形式存储在 <code>app</code> 中</li><li>客户端在一个 <code>webview</code> 中</li><li>使用 <code>file</code> 协议加载静态页面</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-78c3827d77e01846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、hybrid-更新上线流程"><a href="#二、hybrid-更新上线流程" class="headerlink" title="二、hybrid 更新上线流程"></a>二、hybrid 更新上线流程</h2><h3 id="2-1-具体流程图"><a href="#2-1-具体流程图" class="headerlink" title="2.1 具体流程图"></a>2.1 具体流程图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-968e9acbd54baf44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>思考（目的，可行途径）</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-da3cb73a39523a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>要替换每个客户端的静态文件</li><li>只能客户端来做（客户端是我们开发的）</li><li>客户端去 server 下载最新的静态文件</li><li>我们维护 server 的静态文件</li></ul><h3 id="2-2-完整流程"><a href="#2-2-完整流程" class="headerlink" title="2.2 完整流程"></a>2.2 完整流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-3ed2e0dcff457b30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>分版本，有版本号，如 <code>201803211015</code></li><li>将静态文件压缩成 <code>zip</code>包，上传到服务端</li><li>客户端每次启动，都去服务端检查版本号</li><li>如果服务端版本号大于客户端版本号，就去下载最新的 <code>zip</code> 包</li><li>下载完之后解压包，然后将现有文件覆盖</li></ul><p><strong>要点总结</strong></p><ul><li>要点1：服务端的版本和<code>zip</code>包维护</li><li>要点2：更新<code>zip</code> 包之前，先对比版本号</li><li>要点3：<code>zip</code> 下载解压和覆盖</li></ul><h2 id="三、hybrid-和-h5-的区别"><a href="#三、hybrid-和-h5-的区别" class="headerlink" title="三、hybrid 和 h5 的区别"></a>三、hybrid 和 h5 的区别</h2><h3 id="3-1-优点"><a href="#3-1-优点" class="headerlink" title="3.1 优点"></a>3.1 优点</h3><ul><li>体验更好，跟 <code>NA</code>体验基本一致</li><li>可快速迭代，无需 <code>app</code> 审核【关键】</li></ul><h3 id="3-2-缺点"><a href="#3-2-缺点" class="headerlink" title="3.2 缺点"></a>3.2 缺点</h3><ul><li>开发成本高。联调、测试、查 <code>bug</code> 都比较麻烦</li><li>运维成本高。参考此前讲过的更新上线的流程</li></ul><h3 id="3-3-适用的场景"><a href="#3-3-适用的场景" class="headerlink" title="3.3 适用的场景"></a>3.3 适用的场景</h3><ul><li><code>hybrid</code> ： 产品的稳定功能，体验要求高，迭代频繁</li><li><code>h5</code> ： 单词的运营活动（如 <code>xx</code> 红包）或不常用功能</li></ul><h2 id="四、前端和客户端通讯"><a href="#四、前端和客户端通讯" class="headerlink" title="四、前端和客户端通讯"></a>四、前端和客户端通讯</h2><h3 id="4-1-JS-和客户端通讯的基本形式"><a href="#4-1-JS-和客户端通讯的基本形式" class="headerlink" title="4.1 JS 和客户端通讯的基本形式"></a>4.1 JS 和客户端通讯的基本形式</h3><ul><li><code>JS</code> 访问客户端能力，传递参数和回调函数</li><li>客户端通过回调函数返回内容</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-68700d9920ef0351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-schema-协议简介和使用"><a href="#4-2-schema-协议简介和使用" class="headerlink" title="4.2 schema 协议简介和使用"></a>4.2 schema 协议简介和使用</h3><ul><li>之前介绍了 <code>http(s)</code> 和 <code>file</code> 协议</li><li><code>schema</code> 协议 —— 前端和客户端通讯的约定</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-728d555cfb705e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-87869b716de1fee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a0215dd1a9fcfa34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-3-schema-使用的封装"><a href="#4-3-schema-使用的封装" class="headerlink" title="4.3 schema 使用的封装"></a>4.3 schema 使用的封装</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-870b827be457e049.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-725ad0ec319d8d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-66d0b2f3f4af2495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-4-内置上线"><a href="#4-4-内置上线" class="headerlink" title="4.4 内置上线"></a>4.4 内置上线</h3><ul><li>将以上封装的代码打包，叫做 <code>invoke.js</code>，内置到客户端</li><li>客户端每次启动 <code>webview</code>，都默认执行 <code>invoke.js</code></li><li>本地加载，免去网络加载的时间，更快</li><li>本地加载，没有网络请求，黑客看不到 <code>schema</code> 协议，更安全</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="面试" scheme="https://ru23.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="hybrid" scheme="https://ru23.com/tags/hybrid/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之组件化</title>
    <link href="https://ru23.com/note/4cf9f504.html"/>
    <id>https://ru23.com/note/4cf9f504.html</id>
    <published>2018-10-20T16:20:32.000Z</published>
    <updated>2018-11-01T09:37:46.936Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-8aa7fa463781cafe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="一、说一下对组件化的理解"><a href="#一、说一下对组件化的理解" class="headerlink" title="一、说一下对组件化的理解"></a>一、说一下对组件化的理解</h2><h3 id="1-1-组件的封装"><a href="#1-1-组件的封装" class="headerlink" title="1.1 组件的封装"></a>1.1 组件的封装</h3><ul><li>视图</li><li>数据</li><li>变化逻辑</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-8f48ca224806e741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-2-组件的复用"><a href="#1-2-组件的复用" class="headerlink" title="1.2 组件的复用"></a>1.2 组件的复用</h3><ul><li><code>props</code> 传递</li><li>复用</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2a5e3b0b883ad5f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-3e549b6e59c0ea28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、JSX-本质是什么"><a href="#二、JSX-本质是什么" class="headerlink" title="二、JSX 本质是什么"></a>二、JSX 本质是什么</h2><h3 id="2-1-JSX-语法"><a href="#2-1-JSX-语法" class="headerlink" title="2.1 JSX 语法"></a>2.1 JSX 语法</h3><ul><li><code>html</code> 形式</li><li>引入 <code>JS</code> 变量和表达式</li><li>循环</li><li><code>style</code> 和 <code>className</code></li><li>事件</li></ul><blockquote><ul><li>JSX 语法根本无法被浏览器所解析</li><li>那么它如何在浏览器运行？</li></ul></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-f1c8a9cbb26570e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-2-JSX-解析"><a href="#2-2-JSX-解析" class="headerlink" title="2.2 JSX 解析"></a>2.2 JSX 解析</h3><ul><li><code>JSX</code> 其实是语法糖</li><li>开发环境会将 <code>JSX</code> 编译成 <code>JS</code> 代码</li><li><code>JSX</code> 的写法大大降低了学习成本和编码工作量</li><li>同时，<code>JSX</code> 也会增加 <code>debug</code>成本</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5f19249d793a7cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-11923d891215fd76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d033075c77441cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-3-JSX-独立的标准"><a href="#2-3-JSX-独立的标准" class="headerlink" title="2.3 JSX 独立的标准"></a>2.3 JSX 独立的标准</h3><ul><li><code>JSX</code> 是 <code>React</code> 引入的，但不是 <code>React</code> 独有的</li><li><code>React</code>已经将它作为一个独立标准开放，其他项目也可用</li><li><code>React.createElement</code> 是可以自定义修改的</li><li>说明：本身功能已经完备；和其他标准监控和扩展性没问题</li></ul><h2 id="三、JSX-和-vdom-的关系"><a href="#三、JSX-和-vdom-的关系" class="headerlink" title="三、JSX 和 vdom 的关系"></a>三、JSX 和 vdom 的关系</h2><h3 id="3-1-为何需要-vdom"><a href="#3-1-为何需要-vdom" class="headerlink" title="3.1 为何需要 vdom"></a>3.1 为何需要 vdom</h3><ul><li><code>vdom</code> 是 <code>React</code>初次推广开来的，结合 <code>JSX</code></li><li><code>JSX</code> 就是模板，最终要渲染成 <code>html</code></li><li>初次渲染 + 修改 <code>state</code> 后的 <code>re-render</code></li><li>正好符合 <code>vdom</code> 的应用场景</li></ul><h3 id="3-2-React-createElement-和-h"><a href="#3-2-React-createElement-和-h" class="headerlink" title="3.2 React.createElement 和 h"></a>3.2 React.createElement 和 h</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d345399b0ceb7e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="3-3-何时-patch"><a href="#3-3-何时-patch" class="headerlink" title="3.3 何时 patch"></a>3.3 何时 patch</h3><ul><li>初次渲染 - <code>Reactdom.render(&lt;App/&gt;, container)</code></li><li>会触发 <code>patch(container, vnode)</code></li><li><code>re-render</code> - <code>setState</code></li><li>会触发 <code>patch(vnode, newVnode)</code></li></ul><h3 id="3-4-自定义组件的解析"><a href="#3-4-自定义组件的解析" class="headerlink" title="3.4 自定义组件的解析"></a>3.4 自定义组件的解析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-69788662ca8059d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><code>‘div’</code> - 直接渲染 <code>&lt;div&gt;</code> 即可，<code>vdom</code> 可以做到</li><li><code>Input</code> 和 <code>List</code> ，是自定义组件（<code>class</code>），<code>vdom</code> 默认不认识</li><li>因此 <code>Input</code> 和 <code>List</code> 定义的时候必须声明 <code>render</code> 函数</li><li>根据 <code>props</code> 初始化实例，然后执行实例的 <code>render</code> 函数</li><li><code>render</code> 函数返回的还是 <code>vnode</code>对象</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-11a4ca366d944a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="四、说一下-React-setState-的过程"><a href="#四、说一下-React-setState-的过程" class="headerlink" title="四、说一下 React setState 的过程"></a>四、说一下 React setState 的过程</h2><h3 id="4-1-setState-的异步"><a href="#4-1-setState-的异步" class="headerlink" title="4.1 setState 的异步"></a>4.1 setState 的异步</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-dc8703edc57b0b20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>setState 为何需要异步？</strong></p><ul><li>可能会一次执行多次 <code>setState</code></li><li>你无法规定、限制用户如何使用 <code>setState</code></li><li>没必要每次 <code>setState</code> 都重新渲染，考虑性能</li><li>即便是每次重新渲染，用户也看不到中间的效果</li><li>只看到最后的结果即可</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-dbca3e81f5b1a4a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-vue-修改属性也是异步"><a href="#4-2-vue-修改属性也是异步" class="headerlink" title="4.2 vue 修改属性也是异步"></a>4.2 vue 修改属性也是异步</h3><ul><li>效果、原因和 <code>setState</code> 一样</li></ul><h3 id="4-3-setState-的过程"><a href="#4-3-setState-的过程" class="headerlink" title="4.3 setState 的过程"></a>4.3 setState 的过程</h3><ul><li>每个组件实例，都有<code>renderComponent</code> 方法</li><li>执行 <code>renderComponent</code>  会重新执行实例的 <code>render</code></li><li><code>render</code> 函数返回 <code>newVnode</code> ，然后拿到 <code>preVnode</code></li><li>执行 <code>patch(preVnode, newVnode)</code></li></ul><h2 id="五、React-vs-vue"><a href="#五、React-vs-vue" class="headerlink" title="五、React vs vue"></a>五、React vs vue</h2><h3 id="5-1-两者的本质区别"><a href="#5-1-两者的本质区别" class="headerlink" title="5.1 两者的本质区别"></a>5.1 两者的本质区别</h3><ul><li>vue - 本质是 mvvm 框架，由 MVC 发展而来</li><li>react - 本质是前端组件化框架，由后端组件化发展而来</li><li>但这并不妨碍他们两者都能实现相同的功能</li></ul><h3 id="5-2-看模板和组件化的区别"><a href="#5-2-看模板和组件化的区别" class="headerlink" title="5.2 看模板和组件化的区别"></a>5.2 看模板和组件化的区别</h3><ul><li><code>vue</code>- 使用模板（最初由 <code>angular</code> 提出）</li><li><code>React</code>- 使用 <code>JSX</code></li><li>模板语法上，我更加倾向于 <code>JSX</code></li><li>模板分离上，我更加倾向于 <code>vue</code></li></ul><p><strong>模板的区别</strong></p><blockquote><p>模板应该和 JS 逻辑分离</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5e3dfde0d813ee64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d551ac0050d8ecf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a9fd44b70c5529d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>组件化区别</strong></p><ul><li><code>React</code> 本身就是组件化，没有组件化就不是 <code>React</code></li><li><code>vue</code> 也支持组件化，不过是在 <code>mvvm</code> 上的扩展</li><li>对于组件化，我更加倾向于 <code>React</code> ，做的彻底而清晰</li></ul><h3 id="5-3-两者共同点"><a href="#5-3-两者共同点" class="headerlink" title="5.3 两者共同点"></a>5.3 两者共同点</h3><ul><li>都支持组件化</li><li>都是数据驱动试图</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="面试" scheme="https://ru23.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="组件化" scheme="https://ru23.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之mvvm浅析</title>
    <link href="https://ru23.com/note/872b0859.html"/>
    <id>https://ru23.com/note/872b0859.html</id>
    <published>2018-10-20T16:10:02.000Z</published>
    <updated>2018-11-01T09:39:16.441Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-e0e229cfc78ee5d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="一、说一下使用-jquery-和使用框架的区别"><a href="#一、说一下使用-jquery-和使用框架的区别" class="headerlink" title="一、说一下使用 jquery 和使用框架的区别"></a>一、说一下使用 jquery 和使用框架的区别</h2><h3 id="1-1-jquery-实现-todo-list"><a href="#1-1-jquery-实现-todo-list" class="headerlink" title="1.1  jquery 实现 todo-list"></a>1.1  jquery 实现 todo-list</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a6e157c329007a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-2-vue-实现-todo-list"><a href="#1-2-vue-实现-todo-list" class="headerlink" title="1.2 vue 实现 todo-list"></a>1.2 vue 实现 todo-list</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-49817bcd534d8b6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-3-jquery-和框架的区别"><a href="#1-3-jquery-和框架的区别" class="headerlink" title="1.3 jquery 和框架的区别"></a>1.3 jquery 和框架的区别</h3><ul><li>数据和视图的分离，解耦（开放封闭原则）</li><li>以数据驱动视图，只关心数据变化，dom 操作被封装</li></ul><h2 id="二、说一下对-mvvm-的理解"><a href="#二、说一下对-mvvm-的理解" class="headerlink" title="二、说一下对 mvvm 的理解"></a>二、说一下对 mvvm 的理解</h2><h3 id="2-1-MVC"><a href="#2-1-MVC" class="headerlink" title="2.1 MVC"></a>2.1 MVC</h3><ul><li><code>M - Model</code> 数据</li><li><code>V - View</code> 视图、界面</li><li><code>C - Controller</code> 控制器、逻辑处理</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-9eeb873dbeab8fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ae4d1af8796ca210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-2-mvvm"><a href="#2-2-mvvm" class="headerlink" title="2.2 mvvm"></a>2.2 mvvm</h3><ul><li><code>Model</code> - 模型、数据</li><li><code>View</code> - 视图、模板（视图和模型是分离的）</li><li><code>ViewModel</code> - 连接 <code>Model</code> 和 <code>View</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d2c6b8c8bd1d954a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-3-关于-ViewModel"><a href="#2-3-关于-ViewModel" class="headerlink" title="2.3 关于 ViewModel"></a>2.3 关于 ViewModel</h3><ul><li><code>mvvm</code> 不算是一种创新</li><li>但其中的 <code>ViewModel</code> 确实一种创新</li><li>真正结合前端场景应用的创建</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-4c4f92a1598b8111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-41caaec1c3c29299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-4-mvvm-框架的三大要素"><a href="#2-4-mvvm-框架的三大要素" class="headerlink" title="2.4 mvvm 框架的三大要素"></a>2.4 mvvm 框架的三大要素</h3><ul><li>响应式：<code>vue</code>如何监听到 <code>data</code> 的每个属性变化？</li><li>模板引擎：<code>vue</code> 的模板如何被解析，指令如何处理？</li><li>渲染：<code>vue</code> 的模板如何被渲染成 <code>html</code> ？以及渲染过程</li></ul><h2 id="三、vue-中如何实现响应式"><a href="#三、vue-中如何实现响应式" class="headerlink" title="三、vue 中如何实现响应式"></a>三、vue 中如何实现响应式</h2><h3 id="3-1-什么是响应式"><a href="#3-1-什么是响应式" class="headerlink" title="3.1 什么是响应式"></a>3.1 什么是响应式</h3><ul><li>修改 data 属性之后，vue 立刻监听到</li><li>data 属性被代理到 vm 上</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-b037083258565102.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="3-2-Object-defineProperty"><a href="#3-2-Object-defineProperty" class="headerlink" title="3.2 Object.defineProperty"></a>3.2 Object.defineProperty</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5a22356afe0fc249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="3-3-模拟实现"><a href="#3-3-模拟实现" class="headerlink" title="3.3 模拟实现"></a>3.3 模拟实现</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-9cd08cb0657479a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2cd1392e845ce6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="四、vue-中如何解析模板"><a href="#四、vue-中如何解析模板" class="headerlink" title="四、vue 中如何解析模板"></a>四、vue 中如何解析模板</h2><h3 id="4-1-模板是什么"><a href="#4-1-模板是什么" class="headerlink" title="4.1 模板是什么"></a>4.1 模板是什么</h3><ul><li>本质：字符串</li><li>有逻辑，如 <code>v-if</code> <code>v-for</code> 等</li><li>与 <code>html</code> 格式很像，但有很大区别</li><li>最终还要转换为 <code>html</code> 来显示</li></ul><p><strong>模板最终必须转换成 JS 代码，因为</strong></p><ul><li>有逻辑（<code>v-if</code> <code>v-for</code>），必须用 <code>JS</code>才能实现</li><li>转换为 <code>html</code> 渲染页面，必须用 <code>JS</code> 才能实现</li><li>因此，模板最重要转换成一个 <code>JS</code> 函数（<code>render</code> 函数）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-eb81593136db9979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-render-函数"><a href="#4-2-render-函数" class="headerlink" title="4.2 render 函数"></a>4.2 render 函数</h3><ul><li>模板中所有信息都包含在了 <code>render</code> 函数中</li><li><code>this</code> 即<code>vm</code></li><li><code>price</code> 即 <code>this.price</code> 即 <code>vm.price</code>，即 <code>data</code> 中的 <code>price</code></li><li><code>_c</code> 即 <code>this._c</code> 即 <code>vm._c</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-b73efe6842725d85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-3b0a4523b3a21f06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-48f05d2febca5466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-3-render-函数与-vdom"><a href="#4-3-render-函数与-vdom" class="headerlink" title="4.3 render 函数与 vdom"></a>4.3 render 函数与 vdom</h3><ul><li><code>vm._c</code> 其实就相当于 <code>snabbdom</code>中的 <code>h</code> 函数</li><li><code>render</code> 函数执行之后，返回的是 <code>vnode</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a393a094aba2dbaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-9cd1e28e1b4be677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><code>updateComponent</code>中实现了 <code>vdom</code> 的 <code>patch</code></li><li>页面首次渲染执行 <code>updateComponent</code></li><li><code>data</code> 中每次修改属性，执行<code>updateComponent</code></li></ul><h2 id="五、vue-的整个实现流程"><a href="#五、vue-的整个实现流程" class="headerlink" title="五、vue 的整个实现流程"></a>五、vue 的整个实现流程</h2><ul><li>第一步：解析模板成 render 函数</li><li>第二步：响应式开始监听</li><li>第三步：首次渲染，显示页面，且绑定依赖</li><li>第四步：<code>data</code> 属性变化，触发 <code>rerender</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-161bb616d8d82ac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="5-1-第一步：解析模板成-render-函数"><a href="#5-1-第一步：解析模板成-render-函数" class="headerlink" title="5.1 第一步：解析模板成 render 函数"></a>5.1 第一步：解析模板成 render 函数</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-324e1d882233345a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2ae04b9b261c06f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-991804d9e7cbc521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-0ea6f157db6ded1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>模板中的所有信息都被 <code>render</code>函数包含</li><li>模板中用到的 <code>data</code> 中的属性，都变成了 <code>JS</code> 变量</li><li>模板中的<code>v-model</code>  <code>v-for</code>  <code>v-on</code> 都变成了 <code>JS</code> 逻辑</li><li><code>render</code> 函数返回 <code>vnode</code></li></ul><h3 id="5-2-第二步：响应式开始监听"><a href="#5-2-第二步：响应式开始监听" class="headerlink" title="5.2 第二步：响应式开始监听"></a>5.2 第二步：响应式开始监听</h3><ul><li><code>Object.defineProperty</code></li><li>将 <code>data</code> 的属性代理到 <code>vm</code>上</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-721a5fade82e7677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="5-3-第三步：首次渲染，显示页面，且绑定依赖"><a href="#5-3-第三步：首次渲染，显示页面，且绑定依赖" class="headerlink" title="5.3 第三步：首次渲染，显示页面，且绑定依赖"></a>5.3 第三步：首次渲染，显示页面，且绑定依赖</h3><ul><li>初次渲染，执行 <code>updateComponent</code>，执行 <code>vm._render()</code></li><li>执行 <code>render</code> 函数，会访问到 <code>vm.list vm.title</code></li><li>会被响应式的 <code>get</code> 方法监听到</li><li>执行 <code>updateComponent</code> ，会走到 <code>vdom</code> 的 <code>patch</code> 方法</li><li><code>patch</code> 将 <code>vnode</code>渲染成 <code>dom</code> ，初次渲染完成</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5aafaf7b6286bfb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-b9817fca90782813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>为何要监听 get ，直接监听 set 不行吗？</strong></p><ul><li><code>data</code> 中有很多属性，有些被用到，有些可能不被用到</li><li>被用到的会走到 <code>get</code> ，不被用到的不会走到 <code>get</code></li><li>未走到 <code>get</code> 中的属性，<code>set</code>的时候我们也无需关心</li><li>避免不必要的重复渲染</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-81f02a1c168d1d25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="5-4-第四步：data-属性变化"><a href="#5-4-第四步：data-属性变化" class="headerlink" title="5.4 第四步：data 属性变化"></a>5.4 第四步：data 属性变化</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-114a451f4dfe201a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-e6e45a3f2b8c986c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>修改属性，被响应式的 <code>set</code> 监听到</li><li><code>set</code>中执行 <code>updateComponent</code></li><li>updateComponent 重新执行 <code>vm._render()</code></li><li>生成的 <code>vnode</code> 和 <code>prevVnode</code> ，通过 <code>patch</code>进行对比</li><li>渲染到 <code>html</code> 中</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-f4b05281f852dbe8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="面试" scheme="https://ru23.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="mvvm" scheme="https://ru23.com/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>虚拟dom（二）</title>
    <link href="https://ru23.com/note/a6c4da3d.html"/>
    <id>https://ru23.com/note/a6c4da3d.html</id>
    <published>2018-10-20T15:10:14.000Z</published>
    <updated>2018-11-01T09:40:04.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么需要虚拟dom"><a href="#一、为什么需要虚拟dom" class="headerlink" title="一、为什么需要虚拟dom"></a>一、为什么需要虚拟dom</h2><blockquote><p>先介绍浏览器加载一个<code>HTML</code>文件需要做哪些事，帮助我们理解为什么我们需要虚拟<code>dom</code>。<code>webkit</code>引擎的处理流程</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-7c24fdb60936bd96.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>所有浏览器的引擎工作流程都差不多，如上图大致分5步：创建<code>dom tree</code> –&gt; 创建<code>Style Rules</code> -&gt; 构建<code>Render tree</code> -&gt; 布局<code>Layout</code> –&gt; 绘制<code>Painting</code></p></blockquote><ul><li>第一步，用<code>HTML</code>分析器，分析<code>HTML</code>元素，构建一颗<code>dom</code>树。</li><li>第二步：用<code>CSS</code>分析器，分析<code>CSS</code>文件和元素上的<code>inline</code>样式，生成页面的样式表。</li><li>第三步：将上面的<code>dom</code>树和样式表，关联起来，构建一颗<code>Render</code>树。这一过程又称为<code>Attachment</code>。每个<code>dom</code>节点都有<code>attach</code>方法，接受样式信息，返回一个<code>render</code>对象（又名<code>renderer</code>）。这些<code>render</code>对象最终会被构建成一颗<code>Render</code>树。</li><li>第四步：有了<code>Render</code>树后，浏览器开始布局，会为每个<code>Render</code>树上的节点确定一个在显示屏上出现的精确坐标值。</li><li>第五步：<code>Render</code>数有了，节点显示的位置坐标也有了，最后就是调用每个节点的<code>paint</code>方法，让它们显示出来。</li></ul><blockquote><p>当你用传统的源生<code>api</code>或<code>jquery</code>去操作<code>dom</code>时，浏览器会从构建<code>dom</code>树开始从头到尾执行一遍流程。比如当你在一次操作时，需要更新<code>10</code>个<code>dom</code>节点，理想状态是一次性构建完<code>dom</code>树，再执行后续操作。但浏览器没这么智能，收到第一个更新<code>dom</code>请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程。显然例如计算<code>dom</code>节点的坐标值等都是白白浪费性能，可能这次计算完，紧接着的下一个<code>dom</code>更新请求，这个节点的坐标值就变了，前面的一次计算是无用功。</p></blockquote><ul><li>即使计算机硬件一直在更新迭代，操作<code>dom</code>的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验。真实的<code>dom</code>节点，哪怕一个最简单的div也包含着很多属性，可以打印出来直观感受一下</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-409c2c86d78baa71.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>虚拟<code>dom</code>就是为了解决这个浏览器性能问题而被设计出来的。例如前面的例子，假如一次操作中有<code>10</code>次更新<code>dom</code>的动作，虚拟<code>dom</code>不会立即操作<code>dom</code>，而是将这<code>10</code>次更新的<code>diff</code>内容保存到本地的一个<code>js</code>对象中，最终将这个js对象一次性<code>attach</code>到<code>dom</code>树上，通知浏览器去执行绘制工作，这样可以避免大量的无谓的计算量</p></blockquote><h2 id="二、实现虚拟dom"><a href="#二、实现虚拟dom" class="headerlink" title="二、实现虚拟dom"></a>二、实现虚拟dom</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"real-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Real dom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>cannot update<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用<code>js</code>对象来模拟<code>dom</code>节点如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = Element(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'virtual-container'</span> &#125;, [</span><br><span class="line">    Element(<span class="string">'p'</span>, &#123;&#125;, [<span class="string">'Virtual dom'</span>]),</span><br><span class="line">    Element(<span class="string">'div'</span>, &#123;&#125;, [<span class="string">'before update'</span>]),</span><br><span class="line">    Element(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 1'</span>]),</span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 2'</span>]),</span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 3'</span>]),</span><br><span class="line">    ]),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = tree.render();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'virtualDom'</span>).appendChild(root);</span><br></pre></td></tr></table></figure><blockquote><p>用<code>js</code>对象模拟<code>dom</code>节点的好处是，页面的更新可以先全部反映在<code>js</code>对象上，操作内存中的<code>js</code>对象的速度显然要快多了。等更新完后，再将最终的<code>js</code>对象映射成真实的<code>dom</code>，交由浏览器去绘制</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">tagName, props, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Element(tagName, props, children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.tagName = tagName;</span><br><span class="line">    <span class="keyword">this</span>.props = props || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.children = children || [];</span><br><span class="line">    <span class="keyword">this</span>.key = props ? props.key : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            count += child.count;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一个参数是节点名（如<code>div</code>），第二个参数是节点的属性（如<code>class</code>），第三个参数是子节点（如<code>ul</code>的<code>li</code>）。除了这三个参数会被保存在对象上外，还保存了<code>key</code>和<code>count</code></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-b834a19182079afd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>有了<code>js</code>对象后，最终还需要将其映射成真实的<code>dom</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Element.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName);</span><br><span class="line">    <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">in</span> props) &#123;</span><br><span class="line">        setAttr(el, propName, props[propName]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> childEl = (child <span class="keyword">instanceof</span> Element) ? child.render() : <span class="built_in">document</span>.createTextnode(child);</span><br><span class="line">        el.appendChild(childEl);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>根据<code>dom</code>名调用源生的<code>createElement</code>创建真实<code>dom</code>，将<code>dom</code>的属性全都加到这个<code>dom</code>元素上，如果有子元素继续递归调用创建子元素，并<code>appendChild</code>挂到该<code>dom</code>元素上。这样就完成了从创建虚拟<code>dom</code>到将其映射成真实<code>dom</code>的全部工作</p></blockquote><h2 id="三、Diff算法"><a href="#三、Diff算法" class="headerlink" title="三、Diff算法"></a>三、Diff算法</h2><blockquote><p>我们已经完成了创建虚拟<code>dom</code>并将其映射成真实<code>dom</code>的工作，这样所有的更新都可以先反映到虚拟<code>dom</code>上，如何反映呢？需要明确一下<code>Diff</code>算法</p></blockquote><ul><li>两棵树如果完全比较时间复杂度是<code>O(n^3)</code></li><li><code>React</code>的<code>Diff</code>算法的时间复杂度是<code>O(n)</code>。要实现这么低的时间复杂度，意味着只能平层地比较两棵树的节点，放弃了深度遍历</li><li>这样做，似乎牺牲了一定的精确性来换取速度，但考虑到现实中前端页面通常也不会跨层级移动<code>dom</code>元素，所以这样做是最优的。</li></ul><p>我们新创建一棵树，用于和之前的树进行比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newTree = Element(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'virtual-container'</span> &#125;, [</span><br><span class="line">    Element(<span class="string">'h3'</span>, &#123;&#125;, [<span class="string">'Virtual dom'</span>]),                     <span class="comment">// REPLACE</span></span><br><span class="line">    Element(<span class="string">'div'</span>, &#123;&#125;, [<span class="string">'after update'</span>]),                   <span class="comment">// TEXT</span></span><br><span class="line">    Element(<span class="string">'ul'</span>, &#123; <span class="attr">class</span>: <span class="string">'marginLeft10'</span> &#125;, [              <span class="comment">// PROPS</span></span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 1'</span>]),</span><br><span class="line">        <span class="comment">// Element('li', &#123; class: 'item' &#125;, ['Item 2']),    // REORDER remove</span></span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 3'</span>]),</span><br><span class="line">    ]),</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>只考虑平层地<code>Diff</code>的话，就简单多了，只需要考虑以下4种情况</p><blockquote><p>第一种是最简单的，节点类型变了，例如下图中的<code>P</code>变成了<code>h3</code>。我们将这个过程称之为<code>REPLACE</code>。直接将旧节点卸载（<code>componentWillUnmount</code>）并装载新节点（<code>componentWillMount</code>）就行了</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-fd068c191a95ea82.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>旧节点包括下面的子节点都将被卸载，如果新节点和旧节点仅仅是类型不同，但下面的所有子节点都一样时，这样做显得效率不高。但为了避免<code>O(n^3)</code>的时间复杂度，这样做是值得的。这也提醒了<code>React</code>开发者，应该避免无谓的节点类型的变化，例如运行时将<code>div</code>变成<code>p</code>就没什么太大意义</p><blockquote><p>第二种也比较简单，节点类型一样，仅仅属性或属性值变了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderA: &lt;ul&gt;</span><br><span class="line">renderB: &lt;ul class: &apos;marginLeft10&apos;&gt;</span><br><span class="line">=&gt; [addAttribute class &quot;marginLeft10&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>我们将这个过程称之为<code>PROPS</code>。此时不会触发节点的卸载（<code>componentWillUnmount</code>）和装载（<code>componentWillMount</code>）动作。而是执行节点更新（<code>shouldComponentUpdate</code>到<code>componentDidUpdate</code>的一系列方法）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffProps</span>(<span class="params">oldnode, newnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldProps = oldnode.props;</span><br><span class="line">    <span class="keyword">const</span> newProps = newnode.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> key;</span><br><span class="line">    <span class="keyword">const</span> propsPatches = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> isSame = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find out different props</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newProps[key] !== oldProps[key]) &#123;</span><br><span class="line">            isSame = <span class="literal">false</span>;</span><br><span class="line">            propsPatches[key] = newProps[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find out new props</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldProps.hasOwnProperty(key)) &#123;</span><br><span class="line">            isSame = <span class="literal">false</span>;</span><br><span class="line">            propsPatches[key] = newProps[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isSame ? <span class="literal">null</span> : propsPatches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种是文本变了，文本对也是一个<code>Text node</code>，也比较简单，直接修改文字内容就行了，我们将这个过程称之为<code>TEXT</code></li><li>第四种是移动，增加，删除子节点，我们将这个过程称之为<code>REORDER</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-b592d77d1cc244e1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>在中间插入一个节点，程序员写代码很简单：$(B).after(F)。但如何高效地插入呢？简单粗暴的做法是：卸载C，装载F，卸载D，装载C，卸载E，装载D，装载E。如下图</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-b13f0c68b7cc7c43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>我们写<code>JSX</code>代码时，如果没有给数组或枚举类型定义一个<code>key</code>，就会看到下面这样的<code>warning</code>。<code>React</code>提醒我们，没有<code>key</code>的话，涉及到移动，增加，删除子节点的操作时，就会用上面那种简单粗暴的做法来更新。虽然程序运行不会有错，但效率太低，因此<code>React</code>会给我们一个<code>warning</code></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-e5ca945bf041e1f4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>如果我们在<code>JSX</code>里为数组或枚举型元素增加上<code>key</code>后，<code>React</code>就能根据<code>key</code>，直接找到具体的位置进行操作，效率比较高。如下图</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-17cf74f6fdd45468.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>常见的最小编辑距离问题，可以用<code>Levenshtein Distance</code>算法来实现，时间复杂度是<code>O(M*N)</code>，但通常我们只要一些简单的移动就能满足需要，降低点精确性，将时间复杂度降低到<code>O(max(M, N)</code>即可</p></blockquote><p>最终<code>Diff</code>出来的结果如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>: [ &#123;<span class="attr">type</span>: REPLACE, <span class="attr">node</span>: Element&#125; ],</span><br><span class="line">    <span class="number">4</span>: [ &#123;<span class="attr">type</span>: TEXT, <span class="attr">content</span>: <span class="string">"after update"</span>&#125; ],</span><br><span class="line">    <span class="number">5</span>: [ &#123;<span class="attr">type</span>: PROPS, <span class="attr">props</span>: &#123;<span class="attr">class</span>: <span class="string">"marginLeft10"</span>&#125;&#125;, &#123;<span class="attr">type</span>: REORDER, <span class="attr">moves</span>: [&#123;<span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">0</span>&#125;]&#125; ],</span><br><span class="line">    <span class="number">6</span>: [ &#123;<span class="attr">type</span>: REORDER, <span class="attr">moves</span>: [&#123;<span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">0</span>&#125;]&#125; ],</span><br><span class="line">    <span class="number">8</span>: [ &#123;<span class="attr">type</span>: REORDER, <span class="attr">moves</span>: [&#123;<span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">0</span>&#125;]&#125; ],</span><br><span class="line">    <span class="number">9</span>: [ &#123;<span class="attr">type</span>: TEXT, <span class="attr">content</span>: <span class="string">"Item 3"</span>&#125; ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、映射成真实dom"><a href="#四、映射成真实dom" class="headerlink" title="四、映射成真实dom"></a>四、映射成真实dom</h2><blockquote><p>虚拟<code>dom</code>有了，<code>Diff</code>也有了，现在就可以将<code>Diff</code>应用到真实<code>dom</code>上了</p></blockquote><p>深度遍历dom将Diff的内容更新进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfsWalk</span>(<span class="params">node, walker, patches</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currentPatches = patches[walker.index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> len = node.childnodes ? node.childnodes.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        walker.index++;</span><br><span class="line">        dfsWalk(node.childnodes[i], walker, patches);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentPatches) &#123;</span><br><span class="line">        applyPatches(node, currentPatches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>具体更新的代码如下，其实就是根据<code>Diff</code>信息调用源生<code>api</code>操作<code>dom</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyPatches</span>(<span class="params">node, currentPatches</span>) </span>&#123;</span><br><span class="line">    currentPatches.forEach(<span class="function">(<span class="params">currentPatch</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (currentPatch.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> REPLACE: &#123;</span><br><span class="line">                <span class="keyword">const</span> newnode = (<span class="keyword">typeof</span> currentPatch.node === <span class="string">'string'</span>)</span><br><span class="line">                    ? <span class="built_in">document</span>.createTextnode(currentPatch.node)</span><br><span class="line">                    : currentPatch.node.render();</span><br><span class="line">                node.parentnode.replaceChild(newnode, node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> REORDER:</span><br><span class="line">                reorderChildren(node, currentPatch.moves);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PROPS:</span><br><span class="line">                setProps(node, currentPatch.props);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TEXT:</span><br><span class="line">                <span class="keyword">if</span> (node.textContent) &#123;</span><br><span class="line">                    node.textContent = currentPatch.content;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// ie</span></span><br><span class="line">                    node.nodeValue = currentPatch.content;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown patch type <span class="subst">$&#123;currentPatch.type&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虚拟<code>dom</code>的目的是将所有操作累加起来，统计计算出所有的变化后，统一更新一次<code>dom</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、为什么需要虚拟dom&quot;&gt;&lt;a href=&quot;#一、为什么需要虚拟dom&quot; class=&quot;headerlink&quot; title=&quot;一、为什么需要虚拟dom&quot;&gt;&lt;/a&gt;一、为什么需要虚拟dom&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先介绍浏览器加载一个&lt;code&gt;H
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="javascript" scheme="https://ru23.com/tags/javascript/"/>
    
      <category term="dom" scheme="https://ru23.com/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>虚拟dom（一）</title>
    <link href="https://ru23.com/note/96d236e5.html"/>
    <id>https://ru23.com/note/96d236e5.html</id>
    <published>2018-10-20T14:12:12.000Z</published>
    <updated>2018-11-01T10:34:13.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是-vdom"><a href="#一、什么是-vdom" class="headerlink" title="一、什么是 vdom"></a>一、什么是 vdom</h2><ul><li>用 <code>JS</code> 模拟 <code>dom</code> 结构</li><li><code>dom</code> 变化的对比，放在 <code>JS</code> 层来做</li><li>提高重绘性能</li></ul><h2 id="二、设计一个需求场景"><a href="#二、设计一个需求场景" class="headerlink" title="二、设计一个需求场景"></a>二、设计一个需求场景</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ecb5ff293ddc8aed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>用jquery实现</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-68270e52c16db126.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-f6538e3e5d70378a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-4245c22334b69ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>遇到的问题</strong></p><ul><li>dom 操作是“昂贵”的，js 运行效率高</li><li>尽量减少 dom 操作，而不是“推倒重来”</li><li>项目越复杂，影响就越严重</li><li>vdom 即可解决这个问题</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-e6482808654c0d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="三、vdom-的如何应用，核心-api-是什么"><a href="#三、vdom-的如何应用，核心-api-是什么" class="headerlink" title="三、vdom 的如何应用，核心 api 是什么"></a>三、vdom 的如何应用，核心 api 是什么</h2><p><strong>什么是 vdom</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-cd7999ff2c9f675c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>介绍 snabbdom</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6315c360edc1b4af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-06a5989e70e0a367.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>介绍 snabbdom - h 函数</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-6f5499e3221909fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>介绍 snabbdom - patch 函数</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ddd86c5acbcc2c1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>重做jquery的demo</strong></p><ul><li>使用 <code>data</code>生成 <code>vnode</code></li><li>第一次渲染，将 <code>vnode</code> 渲染到 <code>#container</code>中</li><li>并将 <code>vnode</code> 缓存下来</li><li>修改 <code>data</code> 之后，用新 <code>data</code> 生成 <code>newVnode</code></li><li>将 <code>vnode</code> 和 <code>newVnode</code> 对比</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-66ffa5d864b85710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>核心 api</strong></p><ul><li><code>h(‘&lt;标签名&gt;’, {…属性…}, […子元素…])</code></li><li><code>h(‘&lt;标签名&gt;’, {…属性…}, ‘….’)</code></li><li><code>patch(container, vnode)</code></li><li><code>patch(vnode, newVnode)</code></li></ul><h2 id="四、介绍一下-diff-算法"><a href="#四、介绍一下-diff-算法" class="headerlink" title="四、介绍一下 diff 算法"></a>四、介绍一下 diff 算法</h2><h3 id="4-1-vdom-为何使用-diff-算法"><a href="#4-1-vdom-为何使用-diff-算法" class="headerlink" title="4.1 vdom 为何使用 diff 算法"></a>4.1 vdom 为何使用 diff 算法</h3><ul><li>dom 操作是“昂贵”的，因此尽量减少 dom 操作</li><li>找出本次 dom 必须更新的节点来更新，其他的不更新</li><li>这个“找出”的过程，就需要 diff 算法</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-20f2d2d895fd2e52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>patch(container, vnode)</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2f58b6165b164eb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-58e4ff61b032df41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>演示过程</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-998b7db0afe63fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ee8fc075196cdbcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-0480ea04b8e028a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d4dd9e91b9397a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-diff-实现过程"><a href="#4-2-diff-实现过程" class="headerlink" title="4.2 diff 实现过程"></a>4.2 diff 实现过程</h3><ul><li><code>patch(container, vnode)</code> 和 <code>patch(vnode, newVnode)</code></li><li><code>createElment</code></li><li><code>updateChildren</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是-vdom&quot;&gt;&lt;a href=&quot;#一、什么是-vdom&quot; class=&quot;headerlink&quot; title=&quot;一、什么是 vdom&quot;&gt;&lt;/a&gt;一、什么是 vdom&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;JS&lt;/code&gt; 模拟 &lt;code&gt;dom&lt;/
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="javascript" scheme="https://ru23.com/tags/javascript/"/>
    
      <category term="dom" scheme="https://ru23.com/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>jquery的deferred对象详解</title>
    <link href="https://ru23.com/note/d841583b.html"/>
    <id>https://ru23.com/note/d841583b.html</id>
    <published>2018-10-20T13:50:43.000Z</published>
    <updated>2018-11-01T09:39:16.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载于互联网</p></blockquote><h2 id="一、什么是deferred对象？"><a href="#一、什么是deferred对象？" class="headerlink" title="一、什么是deferred对象？"></a>一、什么是deferred对象？</h2><ul><li><p>开发网站的过程中，我们经常遇到某些耗时很长的javascript操作。其中，既有异步的操作（比如ajax读取服务器数据），也有同步的操作（比如遍历一个大型数组），它们都不是立即能得到结果的。</p></li><li><p>通常的做法是，为它们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。</p></li><li><p>但是，在回调函数方面，<code>jquery</code>的功能非常弱。为了改变这一点，jquery开发团队就设计了<code>deferred</code>对象。</p></li><li><p>简单说，<code>deferred</code>对象就是<code>jquery</code>的回调函数解决方案。在英语中，<code>defer</code>的意思是”延迟”，所以<code>deferred</code>对象的含义就是”延迟”到未来某个点再执行。</p></li><li><p>它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。它的主要功能，可以归结为四点</p></li></ul><h2 id="二、ajax操作的链式写法"><a href="#二、ajax操作的链式写法" class="headerlink" title="二、ajax操作的链式写法"></a>二、ajax操作的链式写法</h2><blockquote><p>首先，回顾一下jquery的ajax操作的传统写法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"></span><br><span class="line">　　　　url: <span class="string">"test.html"</span>,</span><br><span class="line"></span><br><span class="line">　　　　success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(<span class="string">"哈哈，成功了！"</span>);</span><br><span class="line">　　　　&#125;,</span><br><span class="line"></span><br><span class="line">　　　　error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(<span class="string">"出错啦！"</span>);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>在上面的代码中，<code>$.ajax()</code>接受一个对象参数，这个对象包含两个方法：<code>success</code>方法指定操作成功后的回调函数，<code>error</code>方法指定操作失败后的回调函数。</p></li><li><p><code>$.ajax()</code>操作完成后，如果使用的是低于<code>1.5.0</code>版本的<code>jquery</code>，返回的是<code>XHR</code>对象，你没法进行链式操作；如果高于<code>1.5.0</code>版本，返回的是<code>deferre</code>d对象，可以进行链式操作。</p></li><li><p>现在，新的写法是这样的：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">"test.html"</span>)</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，done()相当于success方法，fail()相当于error方法。采用链式写法以后，代码的可读性大大提高</p></blockquote><h2 id="三、指定同一操作的多个回调函数"><a href="#三、指定同一操作的多个回调函数" class="headerlink" title="三、指定同一操作的多个回调函数"></a>三、指定同一操作的多个回调函数</h2><ul><li><p><code>deferred</code>对象的一大好处，就是它允许你自由添加多个回调函数。</p></li><li><p>还是以上面的代码为例，如果ajax操作成功后，除了原来的回调函数，我还想再运行一个回调函数，怎么办？</p></li><li><p>很简单，直接把它加在后面就行了。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　$.ajax(<span class="string">"test.html"</span>)</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>);&#125; )</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125; )</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"第二个回调函数！"</span>);&#125; );</span><br></pre></td></tr></table></figure><ul><li>回调函数可以添加任意多个，它们按照添加顺序执行</li></ul><h2 id="四、为多个操作指定回调函数"><a href="#四、为多个操作指定回调函数" class="headerlink" title="四、为多个操作指定回调函数"></a>四、为多个操作指定回调函数</h2><ul><li><p><code>deferred</code>对象的另一大好处，就是它允许你为多个事件指定一个回调函数，这是传统写法做不到的。</p></li><li><p>请看下面的代码，它用到了一个新的方法<code>$.when()</code>：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when($.ajax(<span class="string">"test1.html"</span>), $.ajax(<span class="string">"test2.html"</span>))</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这段代码的意思是，先执行两个操作$.ajax(“test1.html”)和$.ajax(“test2.html”)，如果都成功了，就运行done()指定的回调函数；如果有一个失败或都失败了，就执行fail()指定的回调函数</p></blockquote><h2 id="五、普通操作的回调函数接口（上）"><a href="#五、普通操作的回调函数接口（上）" class="headerlink" title="五、普通操作的回调函数接口（上）"></a>五、普通操作的回调函数接口（上）</h2><ul><li><p><code>deferred</code>对象的最大优点，就是它把这一套回调函数接口，从ajax操作扩展到了所有操作。也就是说，任何一个操作—-不管是ajax操作还是本地操作，也不管是异步操作还是同步操作—-都可以使用<code>deferred</code>对象的各种方法，指定回调函数。</p></li><li><p>我们来看一个具体的例子。假定有一个很耗时的操作<code>wait</code>：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>我们为它指定回调函数，应该怎么做呢？</p></li><li><p>很自然的，你会想到，可以使用$.when()：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when(wait())</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><ul><li>但是，这样写的话，done()方法会立即执行，起不到回调函数的作用。原因在于$.when()的参数只能是deferred对象，所以必须对wait()进行改写：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">　<span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个deferred对象</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.resolve(); <span class="comment">// 改变deferred对象的执行状态</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> dtd;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure><ul><li>现在，<code>wait()</code>函数返回的是<code>deferred</code>对象，这就可以加上链式操作了。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when(wait(dtd))</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><ul><li><code>wait()</code>函数运行完，就会自动运行<code>done()</code>方法指定的回调函数。</li></ul><h2 id="六、deferred-resolve-方法和deferred-reject-方法"><a href="#六、deferred-resolve-方法和deferred-reject-方法" class="headerlink" title="六、deferred.resolve()方法和deferred.reject()方法"></a>六、deferred.resolve()方法和deferred.reject()方法</h2><blockquote><p>jquery规定，deferred对象有三种执行状态—-未完成，已完成和已失败。如果执行状态是”已完成”（resolved）,deferred对象立刻调用done()方法指定的回调函数；如果执行状态是”已失败”，调用fail()方法指定的回调函数；如果执行状态是”未完成”，则继续等待，或者调用progress()方法指定的回调函数（jquery1.7版本添加）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个Deferred对象</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.reject(); <span class="comment">// 改变Deferred对象的执行状态</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> dtd;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　$.when(wait(dtd))</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><h2 id="七、小结：deferred对象的方法"><a href="#七、小结：deferred对象的方法" class="headerlink" title="七、小结：deferred对象的方法"></a>七、小结：deferred对象的方法</h2><ul><li><p>（1） <code>$.Deferred()</code> 生成一个<code>deferred</code>对象。</p></li><li><p>（2） <code>deferred.done()</code> 指定操作成功时的回调函数</p></li><li><p>（3） <code>deferred.fail()</code> 指定操作失败时的回调函数</p></li><li><p>（4） <code>deferred.promise()</code> </p><blockquote><p>没有参数时，返回一个新的<code>deferred</code>对象，该对象的运行状态无法被改变；接受参数时，作用为在参数对象上部署<code>deferred</code>接口。</p></blockquote></li><li><p>（5） <code>deferred.resolve()</code> </p></li></ul><blockquote><p>手动改变<code>deferred</code>对象的运行状态为”已完成”，从而立即触发done()方法。</p></blockquote><ul><li>（6）<code>deferred.reject()</code> </li></ul><blockquote><p>这个方法与<code>deferred.resolve()</code>正好相反，调用后将<code>deferred</code>对象的运行状态变为”已失败”，从而立即触发<code>fail()</code>方法。</p></blockquote><ul><li>（7） <code>$.when()</code> 为多个操作指定回调函数。</li></ul><blockquote><p>除了这些方法以外，<code>deferred</code>对象还有二个重要方法，上面的教程中没有涉及到。</p></blockquote><ul><li>（8）<code>deferred.then()</code></li></ul><p><strong>有时为了省事，可以把done()和fail()合在一起写，这就是then()方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　$.when($.ajax( &quot;/main.php&quot; ))</span><br><span class="line"></span><br><span class="line">　　.then(successFunc, failureFunc );</span><br></pre></td></tr></table></figure><blockquote><p>如果<code>then()</code>有两个参数，那么第一个参数是<code>done()</code>方法的回调函数，第二个参数是<code>fail()</code>方法的回调方法。如果<code>then()</code>只有一个参数，那么等同于<code>done()</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、什么是deferred对象？&quot;&gt;&lt;a href=&quot;#一、什么是deferred对象？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是deferred对象？&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="jquery" scheme="https://ru23.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>韦博嗨英语微信端（H5开发）小结</title>
    <link href="https://ru23.com/note/7bec924e.html"/>
    <id>https://ru23.com/note/7bec924e.html</id>
    <published>2018-10-19T08:50:43.000Z</published>
    <updated>2018-11-01T08:59:29.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、deepLink跳转"><a href="#一、deepLink跳转" class="headerlink" title="一、deepLink跳转"></a>一、deepLink跳转</h2><h3 id="1-1-快应用中呼起deepLink"><a href="#1-1-快应用中呼起deepLink" class="headerlink" title="1.1 快应用中呼起deepLink"></a>1.1 快应用中呼起deepLink</h3><p><strong>第一步：检测是安装了app</strong></p><blockquote><p>前提条件：需要知道app的包名</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断用户是否安装了app</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkInstalledApp = <span class="function">(<span class="params">pkg_name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'@system.package'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    pkg.hasInstalled(&#123;</span><br><span class="line">      package: pkg_name,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        resolve(data.result) <span class="comment">//返回true、false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span> (<span class="params">data, code</span>) </span>&#123;</span><br><span class="line">        reject(code)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：调起deepLink</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pkg = <span class="string">'com.newsqq.fda'</span> <span class="comment">// 传入包名</span></span><br><span class="line"><span class="keyword">let</span> deep_link = <span class="string">''</span> <span class="comment">// 跳转到app的地址</span></span><br><span class="line"><span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">checkInstalledApp(pkg).then(<span class="function"><span class="params">hasInstalledApp</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 用户已经安装了app, deep_link直接跳转</span></span><br><span class="line">    <span class="keyword">if</span>(hasInstalledApp &amp;&amp; deep_link)&#123;</span><br><span class="line">      params = &#123;<span class="attr">uri</span>:deep_link&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 否则跳转到H5地址</span></span><br><span class="line">      params = &#123;</span><br><span class="line">        uri:<span class="string">'Webview'</span>,<span class="comment">//对应于manifest中的配置</span></span><br><span class="line">        params:&#123;</span><br><span class="line">          url,</span><br><span class="line">          title:goods_name</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.$app.$def.router.push(params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-H5页面呼起快应用"><a href="#1-2-H5页面呼起快应用" class="headerlink" title="1.2 H5页面呼起快应用"></a>1.2 <code>H5</code>页面呼起快应用</h3><blockquote><p>引入快应用<a href="https://doc.quickapp.cn/tutorial/platform/url-jump-configuration.html" target="_blank" rel="noopener">官方提供的代码</a>,这里做了一下处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> quickapp = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line">        <span class="built_in">window</span>.appRouter = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, a, o</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a = a || &#123;&#125;,</span><br><span class="line">            o &amp;&amp; (a.__PROMPT__ = <span class="number">1</span>, a.__NAME__ = o),</span><br><span class="line">            n(e, t, a)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">window</span>.installShortcut = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n(<span class="string">"command"</span>, <span class="string">""</span>, &#123;</span><br><span class="line">                type: <span class="string">"shortcut"</span>,</span><br><span class="line">                package: e,</span><br><span class="line">                name: t</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">window</span>.channelReady = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> n = &#123;</span><br><span class="line">                available: <span class="keyword">new</span> <span class="built_in">Function</span>,</span><br><span class="line">                availableTimeout: <span class="number">2e3</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"function"</span> == <span class="keyword">typeof</span> e ? n.available = e: <span class="string">"object"</span> == <span class="keyword">typeof</span> e &amp;&amp;</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">                n = n || &#123;&#125;;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> n) e[t] = n[t]</span><br><span class="line">            &#125; (n, e),</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> n = <span class="string">"http://thefatherofsalmon.com/images"</span>,</span><br><span class="line">                t = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                <span class="keyword">if</span> (t.style.width = <span class="string">"1px"</span>, t.style.height = <span class="string">"1px"</span>, t.style.display = <span class="string">"none"</span>, n += <span class="string">"/"</span> + <span class="number">1e20</span> * <span class="built_in">Math</span>.random(), t.src = n, <span class="built_in">document</span>.body.appendChild(t), t.complete) e.available.call(<span class="literal">null</span>, !<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    t.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        clearTimeout(a),</span><br><span class="line">                        e.available.call(<span class="literal">null</span>, !<span class="number">0</span>)</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">var</span> a = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        e.available.call(<span class="literal">null</span>, !<span class="number">1</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    e.availableTimeout)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; (n)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">e, n, t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="string">"http://thefatherofsalmon.com/"</span>,</span><br><span class="line">            o = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (e &amp;&amp; (a = a + <span class="string">"?i="</span> + e), n &amp;&amp; (a = a + <span class="string">"&amp;p="</span> + n),</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!e) <span class="keyword">return</span> ! <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">var</span> n = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (n <span class="keyword">in</span> e) <span class="keyword">return</span> ! <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ! <span class="number">0</span></span><br><span class="line">            &#125; (t)) &#123;</span><br><span class="line">                <span class="keyword">var</span> i = <span class="built_in">window</span>.location.search;</span><br><span class="line">                i.indexOf(<span class="string">"?"</span>) &gt; <span class="number">-1</span> &amp;&amp; (o = i.substr(<span class="number">1</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                o = <span class="built_in">Object</span>.keys(t).map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> e + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(t[e])</span><br><span class="line">                &#125;).join(<span class="string">"&amp;"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">""</span> !== o &amp;&amp; (a = a + <span class="string">"&amp;a="</span> + <span class="built_in">encodeURIComponent</span>(o));</span><br><span class="line">            <span class="keyword">var</span> l = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">            l.src = a,</span><br><span class="line">            l.style.width = <span class="string">"1px"</span>,</span><br><span class="line">            l.style.height = <span class="string">"1px"</span>,</span><br><span class="line">            l.style.display = <span class="string">"none"</span>,</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(l)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      appRouter:<span class="built_in">window</span>.appRouter,</span><br><span class="line">      installShortcut:<span class="built_in">window</span>.installShortcut,</span><br><span class="line">      channelReady:<span class="built_in">window</span>.channelReady</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>或者在网页中嵌入以下 <code>js</code>，支持<code>HTTP</code>与<code>HTTPS</code>访问。上面的代码和这个一样的，只是做了一下模块化处理</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//statres.quickapp.cn/quickapp/js/routerinline.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>调起应用</strong></p><blockquote><p><code>appRouter(packageName, path, params, confirm)</code>，<a href="https://doc.quickapp.cn/tutorial/platform/url-jump-configuration.html" target="_blank" rel="noopener">更多详情</a></p></blockquote><p><strong>第一步：检测手机型号</strong></p><blockquote><p>只有在对应的应用商店上架才可以打开</p></blockquote><ul><li>主要用到了这个库 <a href="https://github.com/hgoebl/mobile-detect.js" target="_blank" rel="noopener">https://github.com/hgoebl/mobile-detect.js</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测手机型号</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkPhone = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MobileDetect = <span class="built_in">require</span>(<span class="string">'mobile-detect'</span>)</span><br><span class="line">  <span class="keyword">let</span> device_type = navigator.userAgent;<span class="comment">//获取userAgent信息</span></span><br><span class="line">  <span class="keyword">let</span> md = <span class="keyword">new</span> MobileDetect(device_type);<span class="comment">//初始化mobile-detect</span></span><br><span class="line">  <span class="keyword">let</span> os = md.os();<span class="comment">//获取系统</span></span><br><span class="line">  <span class="keyword">let</span> model = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断数组中是否包含某字符串</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">needle</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>[i].indexOf(needle) &gt; <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (os == <span class="string">"iOS"</span>) &#123;<span class="comment">//ios系统的处理</span></span><br><span class="line">      os = md.os() + md.version(<span class="string">"iPhone"</span>);</span><br><span class="line">      model = md.mobile();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (os == <span class="string">"AndroidOS"</span>) &#123;<span class="comment">//Android系统的处理</span></span><br><span class="line">      os = md.os() + md.version(<span class="string">"Android"</span>);</span><br><span class="line">      <span class="keyword">var</span> sss = device_type.split(<span class="string">";"</span>);</span><br><span class="line">      <span class="keyword">var</span> i = sss.contains(<span class="string">"前端自动化/"</span>);</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          model = sss[i].substring(<span class="number">0</span>, sss[i].indexOf(<span class="string">"前端自动化/"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">let</span> phoneModel = model.toLocaleLowerCase()</span><br><span class="line">      <span class="comment">//判断是否是oppo</span></span><br><span class="line">      <span class="keyword">if</span>(phoneModel.indexOf(<span class="string">'oppo'</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：调起快应用</strong></p><blockquote><p>以呼起<code>OPPO</code>手机下已经上架的快应用为例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// H5页面中呼起快应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// page你所在的页面标志，goods_id是传递的参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> openQuickapp = <span class="function">(<span class="params">&#123;page,goods_id&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appRouter = <span class="function">(<span class="params">path,params=&#123;&#125;</span>)=&gt;</span>quickapp.appRouter(<span class="string">'com.yesdat.poem'</span>,<span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>,params)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检测OPPO手机下呼起唐诗三百首快应用首页</span></span><br><span class="line">  <span class="keyword">if</span>(!checkPhone())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(page == <span class="string">'home'</span>)&#123;</span><br><span class="line">    appRouter(<span class="string">'Home'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(page == <span class="string">'detail'</span>)&#123;</span><br><span class="line">    appRouter(<span class="string">'Detail'</span>,&#123;goods_id&#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(page == <span class="string">'search'</span>)&#123;</span><br><span class="line">    appRouter(<span class="string">'Search'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-H5页面呼起deepLink"><a href="#1-3-H5页面呼起deepLink" class="headerlink" title="1.3 H5页面呼起deepLink"></a>1.3 H5页面呼起deepLink</h3><blockquote><p>H5 页检测手机是否安装 app 相关流程</p></blockquote><p><strong>uri获取</strong></p><blockquote><p>这里的<code>uri</code>,指得就是通过 <code>Url scheme</code> 来实现的<code>H5</code>与安卓、苹果应用之间的跳转链接。</p></blockquote><p>我们需要找到客户端的同事，来获取如下格式的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx://&apos;跳转页面&apos;/&apos;携带参数&apos;</span><br></pre></td></tr></table></figure><blockquote><p>简单解释下<code>url scheme</code>。</p></blockquote><ul><li><code>url</code> 就是我们平常理解的链接。</li><li><code>scheme</code> 是指<code>url</code>链接中的最初位置，就是上边链接中 <code>‘xx’</code>的位置。</li><li>详细介绍可以看这里：<a href="https://sspai.com/post/31500" target="_blank" rel="noopener">使用url scheme详解</a></li></ul><blockquote><p>用这个链接我们可以跳转到 应用中的某个页面,并可以携带一定的参数</p></blockquote><p><strong>具体实现</strong></p><p><strong>第一步：通过iframe打开App</strong></p><blockquote><p><code>Android</code>平台则各个<code>app</code>厂商差异很大，比如<code>Chrome</code>从25及以后就不再支持通过<code>js</code>触发（非用户点击），所以这里使用<code>iframe src</code>地址等来触发<code>scheme</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在iframe 中打开APP</span></span><br><span class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">ifr.src = openUrl;</span><br><span class="line">ifr.style.display = <span class="string">'none'</span>;</span><br></pre></td></tr></table></figure><p><strong>第二步： 判断是否安装某应用</strong></p><blockquote><p>原理：若通过<code>url scheme</code> 打开<code>app</code>成功，那么当前<code>h5</code>会进入后台，通过计时器会有明显延迟。利用时间来判断。</p></blockquote><ul><li>由于安卓手机,页面进入后台，定时器<code>setTimeout</code>仍会不断运行，所以这里使用<code>setInterval</code>,较小间隔时间重复多次。来根据累计时间判断。</li><li>根据返回<code>true</code> <code>false</code>来判断是否安装。</li><li><code>document.hidden</code>对大于<code>4.4</code> <code>webview</code>支持很好，为页面可见性<code>api</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测app是否安装 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hasInstalledApp = <span class="function">(<span class="params">deepLink</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> timeout, t = <span class="number">1000</span>, hasApp = <span class="literal">true</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasApp) &#123;</span><br><span class="line">          resolve(<span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(ifr);</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> t1 = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">      ifr.setAttribute(<span class="string">'src'</span>, deepLink);</span><br><span class="line">      ifr.setAttribute(<span class="string">'style'</span>, <span class="string">'display:none'</span>);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line"></span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> t2 = <span class="built_in">Date</span>.now();</span><br><span class="line">         <span class="keyword">if</span> (!t1 || t2 - t1 &lt; t + <span class="number">100</span>) &#123;</span><br><span class="line">           hasApp = <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, t);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deep_link与h5链接跳转区分</span></span><br><span class="line"><span class="keyword">if</span>(deepLink)&#123;</span><br><span class="line">Toast.loading(<span class="string">'正在跳转中...'</span>,<span class="number">0</span>)</span><br><span class="line">hasInstalledApp(deepLink).then(<span class="function"><span class="params">hasInstall</span>=&gt;</span>&#123;</span><br><span class="line">Toast.hide()</span><br><span class="line"> <span class="keyword">if</span>(!hasInstall)&#123;<span class="comment">//未安装 直接跳H5</span></span><br><span class="line">   <span class="built_in">window</span>.location.href = h5Url</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.location.href = h5Url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、剪贴板分享"><a href="#二、剪贴板分享" class="headerlink" title="二、剪贴板分享"></a>二、剪贴板分享</h2><blockquote><p>主要是使用到<code>clipboard</code>简化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ClipboardJS <span class="keyword">from</span> <span class="string">'clipboard'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    showShare = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//实例化 ClipboardJS对象;</span></span><br><span class="line">        <span class="keyword">const</span> copyBtn = <span class="keyword">new</span> ClipboardJS(<span class="string">'.copyBtn'</span>);</span><br><span class="line">        </span><br><span class="line">        copyBtn.on(<span class="string">"success"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 复制成功</span></span><br><span class="line">        Toast.info(<span class="string">'复制成功，可分享到微信、浏览器打开'</span>,<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        copyBtn.on(<span class="string">"error"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//复制失败；</span></span><br><span class="line">            Toast.fail(<span class="string">`复制失败<span class="subst">$&#123;e.action&#125;</span>`</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制功能：需要复制的文本内容传递data-clipboard-text，定义类copyBtn用于实例化 </span></span><br><span class="line">&lt;Flex.Item</span><br><span class="line">data-clipboard-text=&#123;<span class="built_in">window</span>.location.href&#125;</span><br><span class="line">className=<span class="string">"copyBtn"</span></span><br><span class="line">onClick=&#123;()=&gt;showShare()&#125;&gt;</span><br><span class="line">&lt;IconWrapper&gt;<span class="xml"><span class="tag">&lt;<span class="name">IoMdShare</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">IconWrapper</span>&gt;</span></span>复制</span><br><span class="line">&lt;<span class="regexp">/Flex.Item&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多使用方式详情：<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">https://github.com/zenorocha/clipboard.js</a></p></blockquote><h2 id="三、加载更多"><a href="#三、加载更多" class="headerlink" title="三、加载更多"></a>三、加载更多</h2><blockquote><p><code>h5</code>页面需要分页加载优化，<code>react</code>中为例</p></blockquote><p><strong>第一步：封装一个loadMore组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoadMoreWrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  border-top: 1px dashed #ddd;</span></span><br><span class="line"><span class="string">  .load-more&#123;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    padding: 10px 0;</span></span><br><span class="line"><span class="string">    background-color: #fff;</span></span><br><span class="line"><span class="string">    color: #999;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadMore</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">    &#125;</span><br><span class="line">    _loadMoreHandle()&#123;</span><br><span class="line">        <span class="comment">// 执行传递过来的loadMoreData</span></span><br><span class="line">        <span class="keyword">this</span>.props.loadMoreFn()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;hasMore&#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;LoadMoreWrapper&gt;</span><br><span class="line">              &lt;div className=<span class="string">"load-more"</span> ref=<span class="string">'wrapper'</span>&gt;</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">this</span>.props.isLoadingMore &amp;&amp; hasMore</span><br><span class="line">                     ? <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;<span class="name">Spin</span> <span class="attr">tip</span>=<span class="string">"Loading..."</span>/&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     : (hasMore?<span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;this._loadMoreHandle.bind(this)&#125;</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">span</span>&gt;</span>:<span class="tag">&lt;<span class="name">span</span>&gt;</span>没有更多了<span class="tag">&lt;/<span class="name">span</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">                 &#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/LoadMoreWrapper&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    componentDidMount()&#123;</span></span><br><span class="line"><span class="regexp">        const wrapper = this.refs.wrapper;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        let timeoutId;</span></span><br><span class="line"><span class="regexp">        window.addEventListener('scroll',()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">            if (this.props.isLoadingMore) return;</span></span><br><span class="line"><span class="regexp">            if(timeoutId) clearTimeout(timeoutId);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            timeoutId = setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 获取加载更多这个节点距离顶部的距离</span></span><br><span class="line"><span class="regexp">                const top = wrapper.getBoundingClientRect().top;</span></span><br><span class="line"><span class="regexp">                const windowHeight = window.screen.height;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                if (top &amp;&amp; top &lt; windowHeight) &#123;</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/ 当wrapper已经在页面可视范围之内触发</span></span><br><span class="line"><span class="regexp">                    this.props.loadMoreFn();</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;,50)</span></span><br><span class="line"><span class="regexp">        &#125;,false)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">LoadMore.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  isLoadingMore:PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  hasMore:PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  loadMoreFn:PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default LoadMore</span></span><br></pre></td></tr></table></figure><p><strong>第二步：处理分页</strong></p><blockquote><p>需要后台支持分页</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">state = &#123;</span><br><span class="line">goodsList:[], <span class="comment">// 存储列表信息</span></span><br><span class="line">hasMore:<span class="literal">true</span>, <span class="comment">// 记录当前状态下还有没有更多的数据可供加载</span></span><br><span class="line">isLoadingMore:<span class="literal">false</span>, <span class="comment">//记录当前状态下，是加载中，还是点击可加载更多</span></span><br><span class="line">page:<span class="number">1</span>, <span class="comment">//页码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"><span class="comment">// 获取首屏数据</span></span><br><span class="line"><span class="keyword">this</span>.props.fetchTopGoods(&#123;<span class="attr">page</span>:<span class="keyword">this</span>.state.page&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载更多</span></span><br><span class="line"> _loadMoreData()&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;topGoods&#125; = <span class="keyword">this</span>.props</span><br><span class="line"><span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">_this.setState(&#123;</span><br><span class="line">isLoadingMore:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(_this.state.hasMore)&#123;</span><br><span class="line">_this.setState(&#123;<span class="attr">page</span>:++_this.state.page&#125;)<span class="comment">// 页码累加</span></span><br><span class="line"></span><br><span class="line">_this.props.fetchGoods(&#123;<span class="attr">page</span>:_this.state.page&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = res.goods.list</span><br><span class="line"><span class="keyword">let</span> dataList = _this.state.goodsList</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dataList.length)&#123;</span><br><span class="line">dataList = topGoods.data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data &amp;&amp; data.length &lt; PAGE_SIZE) &#123;</span><br><span class="line">_this.setState(&#123;</span><br><span class="line">hasMore:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">_this.setState(&#123;</span><br><span class="line">goodsList:dataList.concat(data),</span><br><span class="line">hasMore:<span class="literal">true</span>,</span><br><span class="line">isLoadingMore:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">isLoadingMore:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LoadMore</span> <span class="attr">isLoadingMore</span>=<span class="string">&#123;this.state.isLoadingMore&#125;</span> <span class="attr">hasMore</span>=<span class="string">&#123;this.state.hasMore&#125;</span> <span class="attr">loadMoreFn</span>=<span class="string">&#123;this._loadMoreData.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、搜索历史"><a href="#四、搜索历史" class="headerlink" title="四、搜索历史"></a>四、搜索历史</h2><p><strong>封装cache</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">'good-storage'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SEARCH_KEY = <span class="string">'__search__'</span></span><br><span class="line"><span class="keyword">const</span> SEARCH_MAX_LEN = <span class="number">15</span> <span class="comment">// 最大保存15条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索条目更新到数组中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertArray</span>(<span class="params">arr, val, compare, maxLen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare)</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  arr.unshift(val)</span><br><span class="line">  <span class="keyword">if</span> (maxLen &amp;&amp; arr.length &gt; maxLen) &#123;</span><br><span class="line">    arr.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数组中移除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteFromArray</span>(<span class="params">arr, compare</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare)</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法：保存搜索关键词 query传入的关键词</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveSearch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> searches = storage.get(SEARCH_KEY, [])</span><br><span class="line">  insertArray(searches, query, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item === query</span><br><span class="line">  &#125;, SEARCH_MAX_LEN)</span><br><span class="line">  storage.set(SEARCH_KEY, searches)</span><br><span class="line">  <span class="keyword">return</span> searches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法: 逐条删除搜索记录 query传入的历史记录</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteSearch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> searches = storage.get(SEARCH_KEY, [])</span><br><span class="line">  deleteFromArray(searches, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item === query</span><br><span class="line">  &#125;)</span><br><span class="line">  storage.set(SEARCH_KEY, searches)</span><br><span class="line">  <span class="keyword">return</span> searches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法: 清空所有历史</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clearSearch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  storage.remove(SEARCH_KEY)</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露方法: 加载所有历史记录</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadSearch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> storage.get(SEARCH_KEY, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-34867938a0263a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="search-history" title="">                </div>                <div class="image-caption">search-history</div>            </figure><h2 id="五、骨架屏的应用"><a href="#五、骨架屏的应用" class="headerlink" title="五、骨架屏的应用"></a>五、骨架屏的应用</h2><blockquote><p>封装一个骨架屏组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    .skeleton &#123;</span></span><br><span class="line"><span class="string">      display: flex;</span></span><br><span class="line"><span class="string">      padding: 10px;</span></span><br><span class="line"><span class="string">      width: 380px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton .skeleton-head,</span></span><br><span class="line"><span class="string">    .skeleton .skeleton-title,</span></span><br><span class="line"><span class="string">    .skeleton .skeleton-content &#123;</span></span><br><span class="line"><span class="string">        background: rgba(220, 228, 232, 0.41);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .skeleton .skeleton-head&#123;</span></span><br><span class="line"><span class="string">      padding:20px;</span></span><br><span class="line"><span class="string">      margin-right:10px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton-body &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton-title &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        height: 15px;</span></span><br><span class="line"><span class="string">        transform-origin: left;</span></span><br><span class="line"><span class="string">        animation: skeleton-stretch .5s linear infinite alternate;</span></span><br><span class="line"><span class="string">        border-radius: 5px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton-content &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        height: 15px;</span></span><br><span class="line"><span class="string">        margin-top: 10px;</span></span><br><span class="line"><span class="string">        transform-origin: left;</span></span><br><span class="line"><span class="string">        animation: skeleton-stretch .5s -.3s linear infinite alternate;</span></span><br><span class="line"><span class="string">        border-radius: 5px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @keyframes skeleton-stretch &#123;</span></span><br><span class="line"><span class="string">        from &#123;</span></span><br><span class="line"><span class="string">            transform: scalex(1);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        to &#123;</span></span><br><span class="line"><span class="string">            transform: scalex(.3);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Skeleton</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">const</span> arr = []</span><br><span class="line">        <span class="keyword">if</span>(count)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            arr.push(&#123;&#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Wrapper&gt;</span><br><span class="line">              &#123;arr.map(<span class="function"><span class="params">v</span>=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"skeleton"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"skeleton-head"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;div className="skeleton-body"&gt;</span><br><span class="line">                   &lt;div className="skeleton-title"&gt;&lt;/div&gt;</span><br><span class="line">                   &lt;div className="skeleton-content"&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)&#125;</span><br><span class="line">            &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Skeleton.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  count:PropTypes.number.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// count 显示的条数</span><br><span class="line">&lt;Skeleton count=&#123;10&#125;/&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-497efe18e83ceac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Skeleton" title="">                </div>                <div class="image-caption">Skeleton</div>            </figure><ul><li><code>H5</code>端在线体验 <a href="http://goods.yesdat.com" target="_blank" rel="noopener">http://goods.yesdat.com</a></li><li>快应用端在<code>OPPO</code>应用商店搜“好物”（标有快应用的那个）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、deepLink跳转&quot;&gt;&lt;a href=&quot;#一、deepLink跳转&quot; class=&quot;headerlink&quot; title=&quot;一、deepLink跳转&quot;&gt;&lt;/a&gt;一、deepLink跳转&lt;/h2&gt;&lt;h3 id=&quot;1-1-快应用中呼起deepLink&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="javascript" scheme="https://ru23.com/tags/javascript/"/>
    
      <category term="微信开发" scheme="https://ru23.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>vuex学习笔记</title>
    <link href="https://ru23.com/note/caef00ab.html"/>
    <id>https://ru23.com/note/caef00ab.html</id>
    <published>2018-10-17T09:25:59.000Z</published>
    <updated>2018-11-01T09:39:01.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>组件是Vue最强大的功能之一，而组件实例的作用域是相互独立的，意味着不同组件之间的数据是无法相互使用。组件间如何传递数据就显得至关重要，这篇文章主要是介绍vuex。尽量以通俗易懂的实例讲述这其中的差别，希望对小伙伴有些许帮助。</p></blockquote><h3 id="一、vuex-是什么？"><a href="#一、vuex-是什么？" class="headerlink" title="一、vuex 是什么？"></a>一、vuex 是什么？</h3><p>vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="二、什么是“状态管理模式”？"><a href="#二、什么是“状态管理模式”？" class="headerlink" title="二、什么是“状态管理模式”？"></a>二、什么是“状态管理模式”？</h3><p>一个简单的 Vue 计数应用开始：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// view</span></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// actions</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment () &#123;</span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这个状态自管理应用包含以下几个部分：</p><p><code>state</code>，驱动应用的数据源；<br><code>view</code>，以声明方式将 <code>state</code> 映射到视图；<br><code>actions</code>，响应在 <code>view</code> 上的用户输入导致的状态变化。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47031776-3a224900-d1a3-11e8-8d97-a75b1f522555.png" alt="111" title="">                </div>                <div class="image-caption">111</div>            </figure><br><code>state</code> 的数据会在 <code>view</code> 上显示出来，用户会根据 <code>view</code> 上的内容进行操作，从而触发 <code>actions</code>，接着再去影响 <code>state</code>（vue 是单向数据流的方式驱动的）。</p><p>当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏。下面的图，是把组件的共享状态抽取出来，以一个全局单例模式管理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47031803-4908fb80-d1a3-11e8-9237-a76a2eb199b4.png" alt="222" title="">                </div>                <div class="image-caption">222</div>            </figure><h3 id="三、核心概念"><a href="#三、核心概念" class="headerlink" title="三、核心概念"></a>三、核心概念</h3><h6 id="1-state"><a href="#1-state" class="headerlink" title="1. state"></a>1. state</h6><p><code>state</code>：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;&#123; $store.state.count &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> console.log(this.$store.state.count)</span></span><br></pre></td></tr></table></figure></p><h6 id="2-getters"><a href="#2-getters" class="headerlink" title="2. getters"></a>2. getters</h6><p><code>getters</code>：vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。（getters从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。getters就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。）</p><p>定义getter：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  done(state) &#123;    </span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-mutations"><a href="#3-mutations" class="headerlink" title="3. mutations"></a>3. mutations</h6><p><code>mutations</code>：更改 vuex 的 store 中的状态的唯一方法是提交 mutation。vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>组件通过commit提交mutations的方式来请求改变state<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure></p><p>提交载荷（Payload）<br>mutations方法中是可以传参的，具体用法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 提交载荷 Payload</span></span><br><span class="line">    add(state, n) &#123;</span><br><span class="line">      state.count += n</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'add'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p>######　4.Action<br><code>Action</code>：类似于 <code>mutation</code>，不同在于Action 提交的是 <code>mutation</code>，而不是直接变更状态；<code>Action</code> 可以包含任意异步操作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>不同于<code>mutations</code>使用<code>commit</code>方法，<code>actions</code>使用<code>dispatch</code>方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementAsync'</span>)</span><br></pre></td></tr></table></figure></p><p>context<br>context是与 store 实例具有相同方法和属性的对象。可以通过context.state和context.getters来获取 state 和 getters。<br>以载荷形式分发<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">incrementAsyncWithValue (context, value) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>, value)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementAsyncWithValue'</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><h6 id="5-Module"><a href="#5-Module" class="headerlink" title="5.Module"></a>5.Module</h6><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></p><p>模块的局部状态<br>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,    </span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vuex计数器的例子：<br>在src目录下创建一个store文件夹。</p><p>store/store.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    show: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    counts: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.count--</span><br><span class="line">    &#125;,</span><br><span class="line">    changVal: <span class="function">(<span class="params">state, v</span>) =&gt;</span> &#123;</span><br><span class="line">      state.show = v</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p>state就是我们的需要的状态，状态的改变只能通过提交mutations,例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">increase() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>带有载荷的提交方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">changObj () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'changVal'</span>, <span class="keyword">this</span>.obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>载荷也可以是一个对象，这样可以提交多个参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">changObj () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'changVal'</span>, &#123;</span><br><span class="line">          key:<span class="string">''</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main.js中引入store.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件中使用<br>在组建可以通过$store.state.count获得状态<br>更改状态只能以提交mutation的方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"store"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;$store.state.count&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increase"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>+<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrease"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>-<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;$store.state.show&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入内容"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"obj"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">"changObj"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clearable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      obj: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    increase() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    decrease() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    changObj () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$store.commit(<span class="string">'changVal'</span>, <span class="keyword">this</span>.obj)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;组件是Vue最强大的功能之一，而组件实例的作用域是相互独立的，意味着不同组件之间的数据是无法相互使用。组件间如何传递数据就显得至关重要，这篇文章主要是介绍vuex。尽量以通俗易懂的实例讲述这其中的差别，希望对小伙伴有些许帮助。&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="vuex" scheme="https://ru23.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>蓝灯导致关闭蓝灯后电脑一直异常的解决方案</title>
    <link href="https://ru23.com/note/11224d78.html"/>
    <id>https://ru23.com/note/11224d78.html</id>
    <published>2018-10-04T09:58:17.000Z</published>
    <updated>2018-11-01T08:08:35.887Z</updated>
    
    <content type="html"><![CDATA[<p>电脑关闭Lantern以后发现qq浏览器都没办法上网，这是应为Lantern未完全退出导致，那关闭蓝灯后不能上网怎么解决呢？下面给大家分享关闭蓝灯不能上网的方法。 </p><p>步骤：</p><p>1、按win+r打开运行窗口，输入regedit，如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/10/1.webp" alt="regedit" title="">                </div>                <div class="image-caption">regedit</div>            </figure></p><p>2、注册表找到：HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Connections，然后删除Connections这一目录，如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/10/2.jpg" alt="删除Connections" title="">                </div>                <div class="image-caption">删除Connections</div>            </figure></p><p>以上就是关闭蓝灯后不能上网的解决方法，是不是很简单，有遇到这情况的用户可以参考文中方法进行尝试，希望今天的分享对大家有所帮助。</p><p>作者：binkcheng<br>链接：<a href="https://www.jianshu.com/p/6193b3410342" target="_blank" rel="noopener">https://www.jianshu.com/p/6193b3410342</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;电脑关闭Lantern以后发现qq浏览器都没办法上网，这是应为Lantern未完全退出导致，那关闭蓝灯后不能上网怎么解决呢？下面给大家分享关闭蓝灯不能上网的方法。 &lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;1、按win+r打开运行窗口，输入regedit，如图所示：&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>开发者工具调试网页授权 确认按钮点击无任何反应</title>
    <link href="https://ru23.com/note/86c96dc5.html"/>
    <id>https://ru23.com/note/86c96dc5.html</id>
    <published>2018-10-02T11:07:15.000Z</published>
    <updated>2018-11-01T08:08:35.660Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/46324116-7347ae80-c624-11e8-9150-286a68773715.png" alt="qq 20181002084610" title="">                </div>                <div class="image-caption">qq 20181002084610</div>            </figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>开发者工具调试网页授权 确认按钮点击无任何反应！！！<br>V1以上就会有这个问题 很迷 我看其他社区的回答 说的是 点击“获得你的公开信息”那行字大概就可以，应该是显示屏分辨率的问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景：&quot;&gt;&lt;a href=&quot;#场景：&quot; class=&quot;headerlink&quot; title=&quot;场景：&quot;&gt;&lt;/a&gt;场景：&lt;/h3&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbo
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
      <category term="微信开发" scheme="https://ru23.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>

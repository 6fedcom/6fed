<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端迷 (front-end fan)</title>
  
  <subtitle>frank，前端开发爱好者，沉迷前端，无法自拔,欢迎一切技术交流（不局限于前端），邮箱fanqianweb@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ru23.com/"/>
  <updated>2018-12-05T10:38:23.136Z</updated>
  <id>https://ru23.com/</id>
  
  <author>
    <name>frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年12月前端文章分享</title>
    <link href="https://ru23.com/note/f04f102c.html"/>
    <id>https://ru23.com/note/f04f102c.html</id>
    <published>2018-12-05T10:10:17.000Z</published>
    <updated>2018-12-05T10:38:23.136Z</updated>
    
    <content type="html"><![CDATA[<p>实现简单的MVVM：<a href="https://github.com/louzhedong/blog/issues/4" target="_blank" rel="noopener">https://github.com/louzhedong/blog/issues/4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现简单的MVVM：&lt;a href=&quot;https://github.com/louzhedong/blog/issues/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/louzhedong/blog/issues/
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>12月份知识点总结</title>
    <link href="https://ru23.com/note/8b81e52c.html"/>
    <id>https://ru23.com/note/8b81e52c.html</id>
    <published>2018-12-03T12:04:57.000Z</published>
    <updated>2018-12-06T01:56:53.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS基础数据类型"><a href="#JS基础数据类型" class="headerlink" title="JS基础数据类型"></a>JS基础数据类型</h3><p>Number String Null Undefined Boolean, Symbol都属于础数据类型，往往都保存在栈内存中，栈空间先进后出，后进先出<br>引用数据类型：Object 类型、Array 类型、Date 类型、RegExp 类型、Function 类型 等。<br>引用类型的复制同样也会为新的变量自动分配一个新的值保存在栈内存中，但不同的是，这个新的值，仅仅只是引用类型的一个地址指针。当地址指针相同时，尽管他们相互独立，但是在堆内存中访问到的具体对象实际上是同一个</p><h3 id="HTTP三次握手以及原因"><a href="#HTTP三次握手以及原因" class="headerlink" title="HTTP三次握手以及原因"></a>HTTP三次握手以及原因</h3><p>ACK 确认序列编号<br>（表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0）<br>SYN 同步序列编号<br>(在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使SYN=1和ACK=1. 因此, SYN置1就表示这是一个连接请求或连接接受报文。)<br>FIN （finis）即完，终结的意思， 用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</p><p>第一次握手：建立连接。<br>客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；<br>第二次握手：服务端收到SYN报文段。<br>服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，同时，自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN+ACK报文段。<br>然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br>完成了三次握手，客户端和服务器端就可以开始传送数据。</p><p>为什么要三次握手<br>两次握手的问题在于服务器端不知道一个SYN是否是无效的，而三次握手机制因为客户端会给服务器回复第二次握手，也意味着服务器会等待客户端的第三次握手，如果第三次握手迟迟不来，服务器便会认为这个SYN是无效的，释放相关资源。但这时有个问题就是客户端完成第二次握手便认为连接已建立，而第三次握手可能在传输中丢失，服务端会认为连接是无效的，这时如果Client端向Server写数据，Server端将以RST包响应，这时便感知到Server的错误<br>防止了服务器端的一直等待而浪费资源</p><p>四次分手<br>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；<br>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；<br>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；<br>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p><p>为什么要四次分手<br>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><h3 id="AMD，CMD规范"><a href="#AMD，CMD规范" class="headerlink" title="AMD，CMD规范"></a>AMD，CMD规范</h3><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。<br>define(id?, dependencies?, factory)</p><ul><li>id:字符串，模块名称(可选)</li><li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li><li>factory: 工厂方法，返回一个模块函数</li></ul><p>CMD (Common Module Definition), 是seajs推崇的规范，CMD则是依赖就近，用的时候再require。<br>CMD与AMD一样，也是采用特定的define()函数来定义,用require方式来引用模块<br>define(id?, dependencies?, factory)</p><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>webSocket和http一样，同属于应用层协议。它最重要的用途是实现了客户端与服务端之间的全双工通信，当服务端数据变化时，可以第一时间通知到客户端。<br>除此之外，它与http协议不同的地方还有：<br>http只能由客户端发起，而webSocket是双向的。<br>webSocket传输的数据包相对于http而言很小，很适合移动端使用<br>没有同源限制，可以跨域共享资源</p><p>WebSocket握手的过程。<br>当Web应用程序调用new WebSocket(url)接口时，Browser就开始了与地址为url的WebServer建立握手连接的过程。</p><ol><li>Browser与WebSocket服务器通过TCP三次握手建立连接，如果这个建立连接失败，那么后面的过程就不会执行，Web应用程序将收到错误消息通知。</li><li>在TCP建立连接成功后，Browser/UA通过http协议传送WebSocket支持的版本号，协议的字版本号，原始地址，主机地址等等一些列字段给服务器端。</li><li>WebSocket服务器收到Browser/UA发送来的握手请求后，如果数据包数据和格式正确，客户端和服务器端的协议版本号匹配等等，就接受本次握手连接，并给出相应的数据回复，同样回复的数据包也是采用http协议传输。</li><li>Browser收到服务器回复的数据包后，如果数据包内容、格式都没有问题的话，就表示本次连接成功，触发onopen消息，此时Web开发者就可以在此时通过send接口想服务器发送数据。否则，握手连接失败，Web应用程序会收到onerror消息，并且能知道连接失败的原因。<br><strong>(一)socket和http区别</strong><br> 1,传输层的TCP是基于网络层的IP协议的，<br> 2,而应用层的HTTP协议又是基于传输层的TCP协议的，<br> 3,而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口.<br><strong>(二)websocket 和socket区别</strong><br> 1,websocket是应用层的协议,而socket是传输控制层的协议.<br><strong>(三)websocket和http区别</strong><br>相同点:<br> 1,都是应用层的协议<br> 2,都是基于tcp,并且都是可靠的协议<br>不同点:<br> 1,websocket是持久连接的协议,而http是非持久连接的协议.<br> 2,websocket是双向通信协议,模拟socket协议,可以双向发送消息,而http是单向的.<br> 3,websocket的服务端可以主动向客服端发送信息,而http的服务端只有在客户端发起请求时才能发送数据,无法主动向客户端发送信息.<br><strong>(四)HTTPS和HTTP的区别主要为以下四点：</strong><br> 1、https协议需要到ca申请证书，一般免费证书很少，需要交费。<br> 2、http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。<br> 3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br> 4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><h3 id="js原型链"><a href="#js原型链" class="headerlink" title="js原型链"></a>js原型链</h3><p><a href="https://juejin.im/post/58f94c9bb123db411953691b" target="_blank" rel="noopener">https://juejin.im/post/58f94c9bb123db411953691b</a><br><a href="http://yujiangshui.com/javascript-prototype-and-create-object/" target="_blank" rel="noopener">http://yujiangshui.com/javascript-prototype-and-create-object/</a></p><h3 id="继承（http-yujiangshui-com-javascript-inheritance-）"><a href="#继承（http-yujiangshui-com-javascript-inheritance-）" class="headerlink" title="继承（http://yujiangshui.com/javascript-inheritance/）"></a>继承（<a href="http://yujiangshui.com/javascript-inheritance/）" target="_blank" rel="noopener">http://yujiangshui.com/javascript-inheritance/）</a></h3><p><strong>1.原型链继承</strong></p><h3 id="对闭包的理解以及应用场景"><a href="#对闭包的理解以及应用场景" class="headerlink" title="对闭包的理解以及应用场景"></a>对闭包的理解以及应用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> secret = <span class="string">'secret'</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    get_secret : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 通过定义的接口来访问secret</span></span><br><span class="line">      <span class="keyword">return</span> secret;</span><br><span class="line">    &#125;,</span><br><span class="line">    new_secret: <span class="function"><span class="keyword">function</span> (<span class="params">new_secret</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 通过定义的接口来修改secret</span></span><br><span class="line">      secret = new_secret;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(foo.get_secret());</span><br><span class="line"><span class="built_in">console</span>.log(foo.secret)</span><br><span class="line">foo.get_secret();<span class="comment">//secret</span></span><br><span class="line">foo.secret;<span class="comment">//Type error</span></span><br><span class="line">foo.new_secret(<span class="string">'a new secret'</span>);</span><br><span class="line">foo.get_secret()<span class="comment">//a new secret</span></span><br></pre></td></tr></table></figure><h3 id="css盒模型"><a href="#css盒模型" class="headerlink" title="css盒模型"></a>css盒模型</h3><h3 id="css选择器优先级"><a href="#css选择器优先级" class="headerlink" title="css选择器优先级"></a>css选择器优先级</h3><p>important&gt;内联(1000)&gt;id(100&gt;class(10)&gt;标签（1）  数字表示权重</p><h3 id="js里事件的三个阶段"><a href="#js里事件的三个阶段" class="headerlink" title="js里事件的三个阶段"></a>js里事件的三个阶段</h3><p>事件流被分为三个阶段捕获过程、目标过程、冒泡过程<br>冒泡型事件流：事件的传播是从最特定的事件目标到最不特定的事件目标。即从DOM树的叶子到根。<br>捕获型事件流：事件的传播是从最不特定的事件目标到最特定的事件目标。即从DOM树的根到叶子。<br><strong>事件代理：</strong><br>原理：靠事件冒泡实现的<br>优点：<br>大量减少内存占用，减少事件注册<br>新增子对象时无需再次对其绑定事件，对于动态内容不符尤其适用<br>缺点：<br>适用于表格/列表等重复性dom元素,事件代理用不好可能出现事件误判，即本不应该触发事件的元素被绑定了事件<br><strong>e.target和e.currentTarget</strong><br>　target和currentTarget都是event上面的属性，target是真正发生事件的DOM元素，而currentTarget是当前事件发生在哪个DOM元素上。<br>　目标阶段也就是 target == currentTarget的时候。</p><h3 id="event-loop"><a href="#event-loop" class="headerlink" title="event loop"></a>event loop</h3><ol><li>js是单线程，js解析方法时，将同步任务排队到执行栈中，异步任务排队到事件队列中。</li><li>事件队列分为:<br>宏任务：setTimeout，setInterval，setImmediate，I/O，UI交互事件<br>微任务：process.nextTick，Promise.then</li><li>浏览器环境中执行方法时，先将执行栈中的任务清空，再将微任务推到执行栈中并清空，之后检查是否存在宏任务，若存在则取出一个宏任务，执行完成检查是否有微任务，以此循环…</li></ol><h3 id="vue-router原理（还需要整理一下）"><a href="#vue-router原理（还需要整理一下）" class="headerlink" title="vue-router原理（还需要整理一下）"></a>vue-router原理（还需要整理一下）</h3><p>利用URL中的hash；<br>利用H5中history；<br>重点说其中的两个新增的API history.pushState 和 history.replaceState<br>状态对象（state object） — 一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。<br>标题（title） — FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。<br>地址（URL） — 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</p><h3 id="html的缓存机制-（2个缓存的属性总结一下）"><a href="#html的缓存机制-（2个缓存的属性总结一下）" class="headerlink" title="html的缓存机制 （2个缓存的属性总结一下）"></a>html的缓存机制 （2个缓存的属性总结一下）</h3><p>Etag首部怎么产生的</p><h3 id="webpack的loader"><a href="#webpack的loader" class="headerlink" title="webpack的loader"></a>webpack的loader</h3><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h3 id="输入url发生了什么"><a href="#输入url发生了什么" class="headerlink" title="输入url发生了什么"></a>输入url发生了什么</h3><h3 id="js作用域的理解"><a href="#js作用域的理解" class="headerlink" title="js作用域的理解"></a>js作用域的理解</h3><h3 id="with在项目中的应用"><a href="#with在项目中的应用" class="headerlink" title="with在项目中的应用"></a>with在项目中的应用</h3><h3 id="web安全以及怎么防范"><a href="#web安全以及怎么防范" class="headerlink" title="web安全以及怎么防范"></a>web安全以及怎么防范</h3><p>csrf xxs验证码好处</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h3 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h3><h3 id="页面渲染过程"><a href="#页面渲染过程" class="headerlink" title="页面渲染过程"></a>页面渲染过程</h3><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><h3 id="cookie和session区别"><a href="#cookie和session区别" class="headerlink" title="cookie和session区别"></a>cookie和session区别</h3><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>   考虑到减轻服务器性能方面，应当使用COOKIE。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br>5、所以个人建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p><h3 id="localStorage和sessionStorage的区别"><a href="#localStorage和sessionStorage的区别" class="headerlink" title="localStorage和sessionStorage的区别"></a>localStorage和sessionStorage的区别</h3><p>特性    Cookie    localStorage    sessionStorage<br>数据的生命期    一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效    除非被清除，否则永久保存    仅在当前会话下有效，关闭页面或浏览器后被清除<br>存放数据大小    4K左右    一般为5MB<br>与服务器端通信    每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题    仅在客户端（即浏览器）中保存，不参与和服务器的通信<br>易用性    需要程序员自己封装，源生的Cookie接口不友好    源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p><h3 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h3><p>GET和POST的重大区别是，GET产生一个TCP数据包，POST产生两个数据包，对于GET请求，浏览器会把header与data一起发送出去，服务端响应200的状态码，但是POST首先会发送一个header，服务端响应100 continue，然后在发送data到服务端，所以产生两个数据包，并不是所有的浏览器都发送两次数据包，例如，Firefox只发送一次。</p><h3 id="为什么需要虚拟DOM"><a href="#为什么需要虚拟DOM" class="headerlink" title="为什么需要虚拟DOM"></a>为什么需要虚拟DOM</h3><p>浏览器的引擎工作流程<br>创建DOM tree –&gt; 创建Style Rules -&gt; 构建Render tree -&gt; 布局Layout –&gt; 绘制Painting<br>第一步，用HTML分析器，分析HTML元素，构建一颗DOM树。<br>第二步：用CSS分析器，分析CSS文件和元素上的inline样式，生成页面的样式表。<br>第三步：将上面的DOM树和样式表，关联起来，构建一颗Render树。这一过程又称为Attachment。每个DOM节点都有attach方法，接受样式信息，返回一个render对象（又名renderer）。这些render对象最终会被构建成一颗Render树。<br>第四步：有了Render树后，浏览器开始布局，会为每个Render树上的节点确定一个在显示屏上出现的精确坐标值。<br>第五步：Render数有了，节点显示的位置坐标也有了，最后就是调用每个节点的paint方法，让它们显示出来。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>css里面的定位：absolute ，relative，fixed，分别相对于什么进行定位<br>css引入样式的方式，优先级，性能最好；外部文件的样式覆盖标签的样式<br>JS对象原型链，检测对象,数组的数据类型Object.prototype.toString()<br>apply()，call()，区别，this指向了谁，<br>闭包是什么，函数作为返回值用来干什么（难道不是调用另一个函数的作用域）<br>JS中this的指向，最普通的指向（没有环境，没有方法）——&gt;指向全局；在函数中的this指向调用这个函数的对象；箭头函数的this指向定义它的对象；<br>Object中定义了一个方法，方法中this指向了谁？ 不是箭头函数的时候，this指向调用这个函数的对象；箭头函数中指向这个Object<br>Ajax的了解<br>Promise的了解<br>DOM选择一个元素有哪些方法？（getElementById,getElementByClassName;getElementByTagName,querySelected）<br>http状态码，常用的（200，204，301，302，304，404,500，502）<br>进程，线程区别；<br>数据结构Set，Map<br>map的实现，红黑树了解吗？哈希表？<br>linux的了解？基本命令应该知道吧？（no）</p><h3 id="vue底层怎么实现双向数据绑定"><a href="#vue底层怎么实现双向数据绑定" class="headerlink" title="vue底层怎么实现双向数据绑定"></a>vue底层怎么实现双向数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>myVue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"increment"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">v-model</span>=<span class="string">"count"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"incre"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>._init(options);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$options = options;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$data = options.data;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$methods = options.methods;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>._binding = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>._obverse(<span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>._complie(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">  myVue.prototype._obverse = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span></span><br><span class="line"><span class="undefined">        _this._binding[key] = &#123;                                                                                                                                                          </span></span><br><span class="line"><span class="undefined">          _directives: []</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(_this._binding[key])</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> value = obj[key];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span></span><br><span class="line"><span class="undefined">          _this._obverse(value);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> binding = _this._binding[key];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(_this.$data, key, &#123;</span></span><br><span class="line"><span class="javascript">          enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>获取<span class="subst">$&#123;value&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (value !== newVal) &#123;</span></span><br><span class="line"><span class="undefined">              value = newVal;</span></span><br><span class="line"><span class="javascript">              binding._directives.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                item.update();</span></span><br><span class="line"><span class="undefined">              &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  myVue.prototype._complie = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> nodes = root.children;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> node = nodes[i];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.children.length) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>._complie(node);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        node.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">'v-click'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);</span></span><br><span class="line"><span class="undefined">        &#125;)();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName == <span class="string">'INPUT'</span> || node.tagName == <span class="string">'TEXTAREA'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span></span><br><span class="line"><span class="javascript">          _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span></span><br><span class="line"><span class="javascript">            <span class="string">'input'</span>,</span></span><br><span class="line"><span class="undefined">            node,</span></span><br><span class="line"><span class="undefined">            _this,</span></span><br><span class="line"><span class="undefined">            attrVal,</span></span><br><span class="line"><span class="javascript">            <span class="string">'value'</span></span></span><br><span class="line"><span class="undefined">          ))</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            _this.$data[attrVal] =  nodes[key].value;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)(i));</span></span><br><span class="line"><span class="undefined">      &#125; </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span></span><br><span class="line"><span class="javascript">        _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span></span><br><span class="line"><span class="javascript">          <span class="string">'text'</span>,</span></span><br><span class="line"><span class="undefined">          node,</span></span><br><span class="line"><span class="undefined">          _this,</span></span><br><span class="line"><span class="undefined">          attrVal,</span></span><br><span class="line"><span class="javascript">          <span class="string">'innerHTML'</span></span></span><br><span class="line"><span class="undefined">        ))</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.name = name;         <span class="comment">//指令名称，例如文本节点，该值设为"text"</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.el = el;             <span class="comment">//指令对应的DOM元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.vm = vm;             <span class="comment">//指令所属myVue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.exp = exp;           <span class="comment">//指令对应的值，本例如"number"</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.attr = attr;         <span class="comment">//绑定的属性值，本例为"innerHTML"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.update();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Watcher.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp];</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span></span><br><span class="line"><span class="javascript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">        number: 0,</span></span><br><span class="line"><span class="undefined">        count: 0,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="javascript">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.number ++;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        incre: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.count ++;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手写bind call aplly</p><p>原型链</p><p>js的设计模式</p><p>http协议</p><p>三次握手</p><p>cookie 和session 的区别：<br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>   考虑到减轻服务器性能方面，应当使用COOKIE。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br>5、所以个人建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p><p>闭包</p><p>javascript中的this</p><p>new 一个对象的时候底层发生了什么</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS基础数据类型&quot;&gt;&lt;a href=&quot;#JS基础数据类型&quot; class=&quot;headerlink&quot; title=&quot;JS基础数据类型&quot;&gt;&lt;/a&gt;JS基础数据类型&lt;/h3&gt;&lt;p&gt;Number String Null Undefined Boolean, Symbol都属
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="ms" scheme="https://ru23.com/tags/ms/"/>
    
  </entry>
  
  <entry>
    <title>对css重绘和重排的理解，两个有什么不同</title>
    <link href="https://ru23.com/note/8463a2db.html"/>
    <id>https://ru23.com/note/8463a2db.html</id>
    <published>2018-12-01T13:49:16.000Z</published>
    <updated>2018-12-03T02:08:48.102Z</updated>
    
    <content type="html"><![CDATA[<p>这一题考的其实是网页性能的问题，我们先理解下对网页性能产生影响到因素，了解下网页是怎么生成的</p><p>网页生成的过程，大致可以分为五步：</p><ol><li>html代码转化为dom</li><li>css代码转化为cssom</li><li>结合dom和cssom，生成一颗渲染树（包含每个节点的视觉信息）</li><li>生成布局layout，即将所有的渲染树的节点进行平面合成</li><li>将布局绘制paint在屏幕上</li></ol><p>重绘和重排</p><p>网页生成的时候，至少会渲染一次，用户访问的过程中，还会不断的重新渲染<br>以下三种情况会导致页面重新渲染<br>修改dom<br>修改样式表<br>用户事件<br>重新渲染，就需要重新生成布局和重新绘制，前者叫重排reflow，后者叫重绘repaint<br>需要注意的是重绘不一定需要重排，比如改变网页元素的颜色，就会只发生重绘，不会发生重排，因为布局没有改变，但是重排一定会导致重绘，如何改变一个网页元素的位置，就会同时触发重排和重绘，因为布局改变了</p><p>对于性能的影响<br>重绘和重排会不断触发，这是不可避免的，但是，他们是非常耗费资源的，是导致网页性能低下根本原因<br>要提高网页性能，就是要降低重排和重绘的频率和成本，尽量少触发重新渲染</p><p>一般来说，样式的写操作之后，如果有下面这些属性的读操作，都会引发浏览器立即重新渲染<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offsetTop/offsetLeft/offsetWidth/offsetHeight</span><br><span class="line">scrollTop/scrollLeft/scrollWidth/scrollHeight</span><br><span class="line">clientTop/clientLeft/clientWidth/clientHeight</span><br><span class="line">getComputeStyle()</span><br></pre></td></tr></table></figure></p><p>所以，从性能角度考虑，尽量不要把读操作和写操作，放在一个语句里，一般的规则是<br>样式表越简单，重绘和重排就越快<br>重排和重绘的dom层级越高，成本就越高<br>table元素的重绘和重排成本，要高于div元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一题考的其实是网页性能的问题，我们先理解下对网页性能产生影响到因素，了解下网页是怎么生成的&lt;/p&gt;
&lt;p&gt;网页生成的过程，大致可以分为五步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html代码转化为dom&lt;/li&gt;
&lt;li&gt;css代码转化为cssom&lt;/li&gt;
&lt;li&gt;结合dom和c
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="css" scheme="https://ru23.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>React 坑点总结</title>
    <link href="https://ru23.com/note/9a17caa7.html"/>
    <id>https://ru23.com/note/9a17caa7.html</id>
    <published>2018-11-29T03:36:28.000Z</published>
    <updated>2018-11-29T09:52:15.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="setState-异步特性"><a href="#setState-异步特性" class="headerlink" title="setState 异步特性"></a>setState 异步特性</h3><p>基于性能考虑，React 通常是批量合并更新，调用 setState() 之后，this.state 并没有马上修改，而是创建了一个中间态作为过渡。</p><p>但是有些例外情况，它是同步执行的，比如：eventListeners，Ajax，setTimeout 等。<br>原因是这些 JS 原生的 API 不在 React 的上下文控制范围，无法进行优化。</p><p>如何解决？</p><p>setState 第二个参数可以传入 callback<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'State before : '</span> + <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state));</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">dollars: <span class="number">50</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Here state will always be updated to latest version!'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'State after : '</span> + <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="shouldComponentUpdate-检查"><a href="#shouldComponentUpdate-检查" class="headerlink" title="shouldComponentUpdate() 检查"></a>shouldComponentUpdate() 检查</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AutocompleteItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextProps.url !== <span class="keyword">this</span>.props.url ||</span><br><span class="line">      nextProps.selected !== <span class="keyword">this</span>.props.selected;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;props&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> selectedClass = props.selected === <span class="literal">true</span> ? <span class="string">"selected"</span> : <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> path = parseUri(props.url).path;</span><br><span class="line">    path = path.length &lt;= <span class="number">0</span> ? props.url : <span class="string">"..."</span> + path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li</span><br><span class="line">        onMouseLeave=&#123;props.onMouseLeave&#125;</span><br><span class="line">        className=&#123;selectedClass&#125;&gt;</span><br><span class="line">        &lt;i className=<span class="string">"ion-ios-eye"</span></span><br><span class="line">           data-image=&#123;props.image&#125;</span><br><span class="line">           data-url=&#123;props.url&#125;</span><br><span class="line">           data-title=&#123;props.title&#125;</span><br><span class="line">           onClick=&#123;props.handlePlanetViewClick&#125;/&gt;</span><br><span class="line">        &lt;span</span><br><span class="line">          onMouseEnter=&#123;props.onMouseEnter&#125;&gt;</span><br><span class="line">          &lt;div className=<span class="string">"dot bg-mint"</span>/&gt;</span><br><span class="line">          &#123;path&#125;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;setState-异步特性&quot;&gt;&lt;a href=&quot;#setState-异步特性&quot; class=&quot;headerlink&quot; title=&quot;setState 异步特性&quot;&gt;&lt;/a&gt;setState 异步特性&lt;/h3&gt;&lt;p&gt;基于性能考虑，React 通常是批量合并更新，调用 
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>12月份todolist</title>
    <link href="https://ru23.com/note/4bf41c9b.html"/>
    <id>https://ru23.com/note/4bf41c9b.html</id>
    <published>2018-11-28T14:45:45.000Z</published>
    <updated>2018-12-03T02:08:48.100Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="https://ru23.com/note/3d3ed3e0.html"/>
    <id>https://ru23.com/note/3d3ed3e0.html</id>
    <published>2018-11-28T08:21:52.000Z</published>
    <updated>2018-11-29T09:52:15.743Z</updated>
    
    <content type="html"><![CDATA[<p>手写数组去重<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;i&lt;arr.length+<span class="number">1</span>;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(arr[i]===arr[j])&#123;</span><br><span class="line">               arr.splice(j,<span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure><p>手写数组倒序<br>各种场景下的this指针问题<br>冒泡，选择，插入排序用js怎么写，时间复杂度多少空间复杂度多少<br>http和https有什么区别 端口号多少<br>三次握手过程<br>四次挥手过程<br>域名解析过程<br>三列布局中间固定左右自适应的三种写法<br>变量提升问题<br>那些数组方法会生成一个新数组，那些不会生成新数组<br>上面那些问题回答不上来说明你不仅前端不行，上大学也没好好学习，赶紧滚去学习吧</p><p>下面这些问题是针对一般学习前端两个月都应该会的问题，如果已经学习很久了这些问题还是有盲区的化说明前端不适合你，或者你不适合前端<br>怎样理解语义化<br>怎样理解表现与样式分离<br>什么是混杂模式严格模式，怎样触发<br>常见的mate 标签<br>什么是文本流 文档流 dom树<br>什么是行元素 什么是块元素 通过那些属性可以让行元素转换成块元素<br>可以设置宽高的行元素叫什么<br>css常见几种选择器<br>选择器的权重值分别多少<br>js中有几种变量类型 哪些放在堆 哪些放在栈<br>变量类型隐形转换问题<br>如何声明函数</p><p>下面这些问题是一个前端开发应该会的，如果不会就别去找工作让面试官鄙视你<br>闭包是什么，怎么形成这种结构 有什么用处何危害 有没有实际的案例<br>settimeout在不同的情况下的执行顺序<br>settimeout中的this指针指向<br>手写继承实现<br>手写深浅数组克隆<br>手写一个方法取出url后面的参数<br>几种跨域的方法<br>手写ajax函数兼容ie和标准浏览器<br>浏览器状态码有哪些</p><p>下面这些问题是最近比较常问的，回答不上来一定会pass<br>什么是宏任务什么是微任务<br>promise的运行机制，几种状态<br>介绍缓存机制<br>cookie session localstorage区别<br>mvc mvvm区别<br>angular vue react区别<br>angular双向数据绑定原理<br>vue双向数据绑定原理<br>什么是虚拟dom 怎么实现<br>vue组件传值的五种方法<br>vuex是什么<br>输入一个url到页面显示都会发什么<br>性能优化的点<br>如何实现节省流量<br>前端安全攻击有几种 如何避免<br>dom树的节点遍历<br>先这些吧后续再补，虽然现在出现了很多简化dom操作的框架，这些框架可以让面试者很轻松的隐藏掉自己的js基础方面的不足<br>但是js基础一直是重中之重，一些很复杂的问题都是从js基础进行分析解决的，不要觉得学了几个框架，抄了几个demo就可以自信满满的去找工作了，面试官更看重的是学习能力和基础。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;手写数组去重&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>手写一个promise，彻底掌握它的原理</title>
    <link href="https://ru23.com/note/e5037e31.html"/>
    <id>https://ru23.com/note/e5037e31.html</id>
    <published>2018-11-27T14:35:58.000Z</published>
    <updated>2018-11-30T01:20:26.837Z</updated>
    
    <content type="html"><![CDATA[<p>Promise 是异步编程的一种解决方案,解决传统的回调嵌套问题</p><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。<br>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="首先，我们先搭建好代码的骨架："><a href="#首先，我们先搭建好代码的骨架：" class="headerlink" title="首先，我们先搭建好代码的骨架："></a>首先，我们先搭建好代码的骨架：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">self.status = <span class="string">'pending'</span>;</span><br><span class="line">self.data = <span class="literal">undefined</span>;</span><br><span class="line">self.onResolvedCallback = [];</span><br><span class="line">self.onRejectedCallback = [];</span><br><span class="line">callback(resolve, reject);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status == <span class="string">'fulfilled'</span>;</span><br><span class="line">self.data = value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class="line">self.onResolvedCallBack[i].value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status == <span class="string">'rejected'</span>;</span><br><span class="line">self.data = error;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class="line">self.onResolvedCallback[i].value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> promise2;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved === <span class="string">'function'</span>) &#123;</span><br><span class="line">onResolved = onResolved</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">onResolved = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">onResolved = onResolved</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">onResolved = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'resolved'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onResolved(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">resolve(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onRejected(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">resolve(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">self.onResolvedCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onResolved(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">self.onRejected.push(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x = onRejected(self.data)</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">x.then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.</span><br><span class="line"><span class="keyword">catch</span> = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6实现Promise</p><p><code>`</code>js<br>class  Promise{<br>    constructor(fn)<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Promise 是异步编程的一种解决方案,解决传统的回调嵌套问题&lt;/p&gt;
&lt;p&gt;（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="promise" scheme="https://ru23.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>前端开发者进阶之函数柯里化Currying</title>
    <link href="https://ru23.com/note/260f9819.html"/>
    <id>https://ru23.com/note/260f9819.html</id>
    <published>2018-11-27T11:03:00.000Z</published>
    <updated>2018-11-28T05:33:06.005Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    __args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> __inargs = slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, __args.concat(__inargs));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>简书笔记摘抄</title>
    <link href="https://ru23.com/note/368be592.html"/>
    <id>https://ru23.com/note/368be592.html</id>
    <published>2018-11-27T06:36:28.000Z</published>
    <updated>2018-11-30T12:56:27.423Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>How to resolve iOS 11 Safari getUserMedia “Invalid constraint” issue</title>
    <link href="https://ru23.com/note/e4a16398.html"/>
    <id>https://ru23.com/note/e4a16398.html</id>
    <published>2018-11-26T05:01:05.000Z</published>
    <updated>2018-11-28T05:33:05.990Z</updated>
    
    <content type="html"><![CDATA[<p>I’m attempting to run the following code in Safari in iOS 11. It should prompt the user to give access to their devices camera and then display it in my <video autoplay id="video"></video> element. However, when running in iOS 11, it results in an OverconstrainedError to be thrown:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">message</span>: <span class="string">"Invalid constraint"</span>, <span class="attr">constraint</span>: <span class="string">"width"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>The code runs fine in Chorme and successfully opens the camera.<br>I’ve attempted multiple valid configurations with no luck.</p><p><strong>Code</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line"><span class="keyword">if</span>(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">     navigator.mediaDevices.getUserMedia(&#123;<span class="attr">video</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">             video.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">             video.play();</span><br><span class="line">         &#125;)</span><br><span class="line">         .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(err);</span><br><span class="line">         &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>The invalid constraint error in safari is because the browser expects that you pass a correct width, one of:</p><ul><li>320</li><li>640</li><li><p>1280<br>the height is auto calculate in an aspect ratio of 4:3 for 320 or 640, and 16:9 for 1280, then if you pass a width of 320, you video stream is set in:</p></li><li><p>320x240<br>if you set a width of 640, you video stream is set in:</p></li><li><p>640x480<br>And if you set a width of 1280, then you video stream is set in:</p></li><li><p>1280x720<br>In any other case you got a error “InvalidConstrain” for width value.</p></li></ul><p>Also you can use a min, max, exact or ideal constrains for width, please check the MDN documentation</p><p>Here an example in this codepen<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123; <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">320</span><span class="comment">/*320-640-1280*/</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> start = <span class="function"><span class="params">()</span> =&gt;</span> navigator.mediaDevices.getUserMedia(config)</span><br><span class="line">  .then(<span class="function"><span class="params">stream</span> =&gt;</span> v.srcObject = stream)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> v.onloadedmetadata = resolve))</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> log(<span class="string">"Success: "</span> + v.videoWidth + <span class="string">"x"</span> + v.videoHeight))</span><br><span class="line">  .catch(log);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="params">msg</span> =&gt;</span> div.innerHTML += <span class="string">"&lt;p&gt;"</span> + msg + <span class="string">"&lt;/p&gt;"</span>;</span><br></pre></td></tr></table></figure></p><p>PD: In chrome you can set a width of height and the video stream is set in these sizes, Firefox do a fitness distance, and Safari expect a exact match.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m attempting to run the following code in Safari in iOS 11. It should prompt the user to give access to their devices camera and then d
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>算法题</title>
    <link href="https://ru23.com/note/f4c4f07f.html"/>
    <id>https://ru23.com/note/f4c4f07f.html</id>
    <published>2018-11-25T11:38:57.000Z</published>
    <updated>2018-11-28T02:59:22.863Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法<br>二分查找算法<br>走台阶问题，每次可以走1步或者2步，走到第n个台阶有多少种方式<br>斐波那契数列, 递归，尾部递归，循环实现方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;排序算法&lt;br&gt;二分查找算法&lt;br&gt;走台阶问题，每次可以走1步或者2步，走到第n个台阶有多少种方式&lt;br&gt;斐波那契数列, 递归，尾部递归，循环实现方式&lt;/p&gt;

      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载发生了什么</title>
    <link href="https://ru23.com/note/e277deca.html"/>
    <id>https://ru23.com/note/e277deca.html</id>
    <published>2018-11-23T15:14:05.000Z</published>
    <updated>2018-11-30T12:56:27.331Z</updated>
    
    <content type="html"><![CDATA[<p>眼过千遍，不如手敲一遍。<br>文章参考：<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a></p><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理HTTP请求</li><li>页面渲染</li><li>断开TCP连接</li></ol><p>仔细思考这个问题，发现确实很深，这个过程涉及到的东西很多。这个问题的回答真的能够很好的考验一个web工程师的水平<br>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，<br>而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、<br>到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS查询顺序如下，若其中一步成功则直接跳到建立链接部分：</p><ul><li>浏览器自身DNS</li><li>操作系统DNS</li><li>本地hosts文件</li><li>向域名服务器发送请求</li></ul><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP三次握手(three-way handshaking)</p><ul><li>发送方:SYN(synchronize)</li><li>接收方:SYN/ACK(acknowledgement),确认信息传达</li><li>发送方:ACK - 确认接收方在线可收消息，握手结束</li><li>Accept</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/11/three-way-handshaking.jpg" alt="TCP三次握手" title="">                </div>                <div class="image-caption">TCP三次握手</div>            </figure><p>（1）第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。</p><p>（2）第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。</p><p>（3）第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。</p><p>TCP三次握手的的好处在于：发送方可以确认接收方仍然在线，不会因为白发送而浪费资源。</p><h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><p>为什么要把HTTPS协议放在这里讲呢？</p><ul><li>因为HTTP报文是包裹在TCP报文中发送的，服务端收到TCP报文时候会解包提取出HTTP报文。</li><li>但是这个过程中存在一定的风险。HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的危险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/11/https.jpg" alt="HTTPS" title="">                </div>                <div class="image-caption">HTTPS</div>            </figure><h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客TLS/SSL握手过程。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，<br><strong>是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡</strong>。</p><h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><p>构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。<br>HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。</p><p><strong>请求行：</strong><br>Method Request-URL HTTP-Version CRLF</p><p><strong>请求报头</strong><br>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p><h4 id="事件循环-Event-loop"><a href="#事件循环-Event-loop" class="headerlink" title="事件循环(Event loop)"></a>事件循环(Event loop)</h4><ol><li>js是单线程，js解析方法时，将同步任务排队到执行栈中，异步任务排队到事件队列中。</li><li>事件队列分为:<br>宏任务：setTimeout，setInterval，setImmediate，I/O，UI交互事件<br>微任务：process.nextTick，Promise.then</li><li>浏览器环境中执行方法时，先将执行栈中的任务清空，再将微任务推到执行栈中并清空，之后检查是否存在宏任务，若存在则取出一个宏任务，执行完成检查是否有微任务，以此循环…</li></ol><h3 id="4-服务器处理HTTP请求并返回HTTP报文"><a href="#4-服务器处理HTTP请求并返回HTTP报文" class="headerlink" title="4. 服务器处理HTTP请求并返回HTTP报文"></a>4. 服务器处理HTTP请求并返回HTTP报文</h3><p>HTTP响应报文也是由三部分组成: 状态码, 响应报头和响应报文。</p><h4 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h4><p>强缓存和协商缓存</p><h3 id="5-浏览器解析渲染页面"><a href="#5-浏览器解析渲染页面" class="headerlink" title="5.浏览器解析渲染页面"></a>5.浏览器解析渲染页面</h3><p>使用HTML创建文件对象类型（DOM）<br>使用CSS创建CSS对象类型（CSSOM）<br>基于DOM和CSSOM执行脚本（Scripts）<br>合并DOM和CSSOM形成渲染树（Render Tree)<br>使用渲染布局（Layout）所有元素渲染（Paint）所有元素</p><h3 id="6-断开TCP连接（4次挥手）"><a href="#6-断开TCP连接（4次挥手）" class="headerlink" title="6.断开TCP连接（4次挥手）"></a>6.断开TCP连接（4次挥手）</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;眼过千遍，不如手敲一遍。&lt;br&gt;文章参考：&lt;a href=&quot;https://segmentfault.com/a/1190000006879700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>addEventListener （type, fn , true/false）绑定事件第三个参数作用以及利用事件的冒泡，实现事件委托</title>
    <link href="https://ru23.com/note/f078bfb.html"/>
    <id>https://ru23.com/note/f078bfb.html</id>
    <published>2018-11-23T07:00:11.000Z</published>
    <updated>2018-12-03T02:25:44.329Z</updated>
    
    <content type="html"><![CDATA[<p>第一个参数type，事件的类型，如click，mouseover等；</p><p>fn，事件监听执行的function；</p><p>第三参数，决定事件执行的过程（大概这样解释。。），捕获或者冒泡，首先我们看一张图片：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/11/shijianliu.gif" alt="事件流原理" title="">                </div>                <div class="image-caption">事件流原理</div>            </figure><p>由此可以知道<br>　　1、一个完整的JS事件流是从window开始，最后回到window的一个过程<br>　　2、事件流被分为三个阶段(1~5)捕获过程、(5~6)目标过程、(6~10)冒泡过程</p><p>e.target和e.currentTarget</p><p>　　target和currentTarget都是event上面的属性，target是真正发生事件的DOM元素，而currentTarget是当前事件发生在哪个DOM元素上。</p><p>　　可以结合控制台打印出来的信息理解下，目标阶段也就是 target == currentTarget的时候。我没有打印它们两个因为太长了，所以打印了它们的nodeName，但是由于window没有nodeName这个属性，所以是undefined。</p><h3 id="事件委托和事件代理的理解"><a href="#事件委托和事件代理的理解" class="headerlink" title="事件委托和事件代理的理解"></a>事件委托和事件代理的理解</h3><p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件，当我们需要对很多元素添加事件的时候，可以通过事件添加到他们的父节点二将时间委托给父节点来触发处理函数</p><p>减少与dom的交互次数，提高性能</p><h3 id="事件委托的原理？"><a href="#事件委托的原理？" class="headerlink" title="事件委托的原理？"></a>事件委托的原理？</h3><p>事件委托是利用事件的冒泡机制来实现的，何为事件冒泡呢？这里介绍下浏览器dom事件处理的过程，dom2.0模型将事件流程分为三个阶段：事件捕获阶段，事件目标阶段，事件冒泡阶段。</p><p>事件捕获：当某个元素触发某个事件，顶层对象document就会发出一个事件流，随着dom树的节点向目标元素节点流去，直到到达事件真正发生的目标元素，在这个过程中，事件相应的监听函数是不会被触发的<br>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数，如果没有绑定监听函数，那就不执行<br>事件冒泡：从目标元素开始，往顶层元素传播，途中如果有节点绑定了相应的事件处理函数，这些函数都会被一次触发，如果想阻止事件冒泡，可以使用event.stopPropgation()或者event.cancelBubble=true来阻止事件的冒泡传播</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一个参数type，事件的类型，如click，mouseover等；&lt;/p&gt;
&lt;p&gt;fn，事件监听执行的function；&lt;/p&gt;
&lt;p&gt;第三参数，决定事件执行的过程（大概这样解释。。），捕获或者冒泡，首先我们看一张图片：&lt;/p&gt;
&lt;figure class=&quot;image-
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
      <category term="js" scheme="https://ru23.com/tags/js/"/>
    
      <category term="事件流" scheme="https://ru23.com/tags/%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>nginx 80 443 并存</title>
    <link href="https://ru23.com/note/1cdb2279.html"/>
    <id>https://ru23.com/note/1cdb2279.html</id>
    <published>2018-11-21T17:02:23.000Z</published>
    <updated>2018-11-28T02:59:22.832Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ECS主机 nginx默认目录/etc/nginx</p><p>如果一站点既要80 http访问，又要443https访问。</p><p>要让https和http并存，不能在配置文件中使用ssl on，配置listen 443 ssl;</p><p>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line">    ssl_certificate &quot;cert/1483067_www.ru23.com.pem&quot;;</span><br><span class="line">    ssl_certificate_key &quot;cert/1483067_www.ru23.com.key&quot;;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里云ECS主机 nginx默认目录/etc/nginx&lt;/p&gt;
&lt;p&gt;如果一站点既要80 http访问，又要443https访问。&lt;/p&gt;
&lt;p&gt;要让https和http并存，不能在配置文件中使用ssl on，配置listen 443 ssl;&lt;/p&gt;
&lt;p&gt;实例&lt;br&gt;
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>彻底理解浏览器的缓存机制</title>
    <link href="https://ru23.com/note/5bb02710.html"/>
    <id>https://ru23.com/note/5bb02710.html</id>
    <published>2018-11-20T15:16:55.000Z</published>
    <updated>2018-11-21T08:11:26.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#概述" title="概述" target="_blank" rel="noopener"></a>概述</h2><p>浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，<strong>HTTP报文</strong>分为两种：</p><ul><li><p><strong>HTTP请求(Request)报文</strong>，报文格式为：<strong>请求行 – HTTP头(通用信息头，请求头，实体头) – 请求报文主体(只有POST才有报文主体)</strong>，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Request.jpg" alt="Request"><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Request-header.jpg" alt="Request"></p></li><li><p><strong>HTTP响应(Response)报文</strong>，报文格式为：<strong>状态行 – HTTP头(通用信息头，响应头，实体头) – 响应报文主体</strong>，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Response-header.jpg" alt="Response"><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Response.jpg" alt="Response"></p></li></ul><p>注：<strong>通用信息头</strong>指的是请求和响应报文都支持的头域，分别为Cache-Control、Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via；<strong>实体头</strong>则是实体信息的实体头域，分别为Allow、Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、Etag、Expires、Last-Modified、extension-header。这里只是为了方便理解，将通用信息头，响应头/请求头，实体头都归为了HTTP头。</p><h2 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#缓存过程分析" title="缓存过程分析" target="_blank" rel="noopener"></a>缓存过程分析</h2><p>浏览器与服务器通信的方式为应答模式，即是：<strong>浏览器发起HTTP请求 – 服务器响应该请求</strong>。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache.jpg" alt="cache"></p><p>由上图我们可以知道：</p><ul><li><p>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</p></li><li><p>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</p></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了，本文也将围绕着这点进行详细分析。为了方便大家理解，这里我们根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong> 。</p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#强制缓存" title="强制缓存" target="_blank" rel="noopener"></a>强制缓存</h3><p><strong>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程</strong>，强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</p><ul><li><p>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致），如下图：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.0.jpg" alt="cache"></p></li><li><p>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存(暂不分析)，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.1.jpg" alt="cache"></p></li><li><p>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果，如下图<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/cache1.2.jpg" alt="cache"></p></li></ul><blockquote><p>那么强制缓存的缓存规则是什么？</p></blockquote><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是<strong>Expires</strong>和<strong>Cache-Control</strong>，其中Cache-Control优先级比Expires高。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Expires" title="Expires" target="_blank" rel="noopener"></a>Expires</h4><p>Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。</p><blockquote><p>Expires是HTTP/1.0的字段，但是现在浏览器默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？</p></blockquote><p>到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Cache-Control" title="Cache-Control" target="_blank" rel="noopener"></a>Cache-Control</h4><p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p><ul><li><p><strong>public</strong>：所有内容都将被缓存（客户端和代理服务器都可缓存）</p></li><li><p><strong>private</strong>：所有内容只有客户端可以缓存，<strong>Cache-Control的默认取值</strong></p></li><li><p><strong>no-cache</strong>：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</p></li><li><p><strong>no-store</strong>：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</p></li><li><p><strong>max-age=xxx (xxx is numeric)</strong>：缓存内容将在xxx秒后失效</p></li></ul><p>接下来，我们直接看一个例子，如下：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/example1.0.jpg" alt="example"></p><p>由上面的例子我们可以知道：</p><ul><li><p>HTTP响应报文中expires的时间值，是一个绝对值</p></li><li><p>HTTP响应报文中Cache-Control为max-age=600，是相对值</p></li></ul><p>由于Cache-Control的优先级比expires，那么直接根据Cache-Control的值进行缓存，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。</p><p>注：在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control相比于expires是更好的选择，所以同时存在时，只有Cache-Control生效。</p><p>了解强制缓存的过程后，我们拓展性的思考一下：</p><blockquote><p>浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/disk.jpg" alt="disk" title="">                </div>                <div class="image-caption">disk</div>            </figure>  <p>这里我们以博客的请求为例，状态码为灰色的请求则代表使用了强制缓存，请求对应的Size值则代表该缓存存放的位置，分别为<strong>from memory cache</strong> 和 <strong>from disk cache</strong>。</p><blockquote><p>那么from memory cache 和 from disk cache又分别代表的是什么呢？什么时候会使用from disk cache，什么时候会使用from memory cache呢？</p></blockquote><p>from memory cache代表使用内存中的缓存，from disk cache则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为memory –&gt; disk。</p><p>虽然我已经直接把结论说出来了，但是相信有不少人对此不能理解，那么接下来我们一起详细分析一下缓存读取问题，这里仍让以我的博客为例进行分析：<br><strong>访问<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a> –> 200 –&gt; 关闭博客的标签页 –&gt; 重新打开<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a> –> 200(from disk cache) –&gt; 刷新 –&gt; 200(from memory cache)</strong></p><p>过程如下：</p><ul><li><p>访问<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/1.0.jpg" alt="200"></p></li><li><p>关闭博客的标签页</p></li><li><p>重新打开<a href="https://heyingye.github.iohttps://heyingye.github.io/" target="_blank" rel="noopener">https://heyingye.github.io/</a><br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/2.0.jpg" alt="from disk cache"></p></li><li><p>刷新<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/3.0.jpg" alt="from disk memory"></p></li></ul><blockquote><p>看到这里可能有人小伙伴问了，最后一个步骤刷新的时候，不是同时存在着from disk cache和from memory cache吗？</p></blockquote><p>对于这个问题，我们需要了解内存缓存(from memory cache)和硬盘缓存(from disk cache)，如下:</p><ul><li><p><strong>内存缓存(from memory cache)</strong>：内存缓存具有两个特点，分别是<strong>快速读取</strong>和<strong>时效性</strong>：</p><ul><li><p><strong>快速读取</strong>：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</p></li><li><p><strong>时效性</strong>：一旦该进程关闭，则该进程的内存则会清空。</p></li></ul></li><li><p><strong>硬盘缓存(from disk cache)</strong>：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。</p></li></ul><p>在浏览器中，浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#协商缓存" title="协商缓存" target="_blank" rel="noopener"></a>协商缓存</h3><p><strong>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</strong>，主要有以下两种情况：</p><ul><li><p>协商缓存生效，返回304，如下<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/304.jpg" alt="304"></p></li><li><p>协商缓存失效，返回200和请求结果结果，如下<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/200.jpg" alt="200"></p></li></ul><p>同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<strong>Last-Modified / If-Modified-Since和Etag / If-None-Match</strong>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。</p><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Last-Modified-If-Modified-Since" title="Last-Modified / If-Modified-Since" target="_blank" rel="noopener"></a>Last-Modified / If-Modified-Since</h4><ul><li><p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/last-modify.jpg" alt="last-modify"></p></li><li><p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/since.jpg" alt="since"></p></li></ul><h4 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#Etag-If-None-Match" title="Etag / If-None-Match" target="_blank" rel="noopener"></a>Etag / If-None-Match</h4><ul><li><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Etag.jpg" alt="Etag"></p></li><li><p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200，如下。<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/Etag-match.jpg" alt="Etag-match"></p></li></ul><p>注：Etag / If-None-Match优先级高于Last-Modified / If-Modified-Since，同时存在则只有Etag / If-None-Match生效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#总结" title="总结" target="_blank" rel="noopener"></a>总结</h2><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：<br><img src="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/img/all.jpg" alt="all"></p><p>原文出自：<a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/#%E6%80%BB%E7%BB%93</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/#概述&quot; title=&quot;概述&quot; targ
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年11月月刊</title>
    <link href="https://ru23.com/note/bc5cd3d4.html"/>
    <id>https://ru23.com/note/bc5cd3d4.html</id>
    <published>2018-11-17T15:52:52.000Z</published>
    <updated>2018-12-05T10:39:25.108Z</updated>
    
    <content type="html"><![CDATA[<p>算法：<a href="https://github.com/liyanlong/front-end-test" target="_blank" rel="noopener">https://github.com/liyanlong/front-end-test</a></p><p>HTTP 协议入门： <a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/08/http.html</a></p><p>AST（抽象语法树）：<a href="https://mp.weixin.qq.com/s/0-k1xZr8-nPCakN-jnfRnQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/0-k1xZr8-nPCakN-jnfRnQ</a></p><p>函数柯里化 ：<a href="https://www.jianshu.com/p/f88a5175e7a2" target="_blank" rel="noopener">https://www.jianshu.com/p/f88a5175e7a2</a> </p><p>浏览器缓存知识小节以及应用：<a href="https://www.cnblogs.com/lyzg/p/5125934.html" target="_blank" rel="noopener">https://www.cnblogs.com/lyzg/p/5125934.html</a> </p><p>图片详解TCP连接的三次握手，四次断开基本原理：<a href="https://blog.csdn.net/u013011841/article/details/38519971" target="_blank" rel="noopener">https://blog.csdn.net/u013011841/article/details/38519971</a></p><p>JS函数节流和函数防抖：<a href="https://juejin.im/post/5c00f7fe51882516be2ee2fc" target="_blank" rel="noopener">https://juejin.im/post/5c00f7fe51882516be2ee2fc</a></p><p>输入url发生了什么: <a href="https://mp.weixin.qq.com/s/XzKViOthLIQiEJ4lb-HRHw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XzKViOthLIQiEJ4lb-HRHw</a></p><p>剖析Vue原理&amp;实现双向绑定MVVM：<a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006599500</a></p><p>浏览器缓存机制：<a href="https://www.cnblogs.com/slly/p/6732749.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6732749.html</a></p><p>浏览器渲染原理及流程：<a href="https://www.cnblogs.com/slly/p/6640761.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6640761.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法：&lt;a href=&quot;https://github.com/liyanlong/front-end-test&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liyanlong/front-end-test&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="前端分享" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="前端月刊" scheme="https://ru23.com/tags/%E5%89%8D%E7%AB%AF%E6%9C%88%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>每周攻克一个技术点</title>
    <link href="https://ru23.com/note/d196d9f1.html"/>
    <id>https://ru23.com/note/d196d9f1.html</id>
    <published>2018-11-17T12:35:36.000Z</published>
    <updated>2018-11-21T08:11:26.435Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+bvORsS9SF0s7ddD/Vb3OAFpZCDCBMXZ6UR5at5IrGOlVK9CfuholhsgEnXIGgCno5FidEpXw3zSZSxWmir7ehesV+VQIGEWBra3Kg4IQWLgSWCPHKxNCAMZTQ9I3agiuQ82cEomlyU0BID8Kpn3KX8LoJjnuFpD1+szpD397EDBVWJyb95B4PL77b3zCfb3ZeXSq2Ae4wPCHY1xnSW95kToBh7ebk9jok9YYVoj7XAL1XMWfJ0ZjkE0EM/U5fNrxgFLzHusXGMPOUTOSoCA/EqXsPtYDhqhfLhzB+PycMVdoMJmZp1p4fuodXmxzkq5CR+8tvrLrnRDTODKlS/Fg4QUEmpiGHH74BHAnMhWF/mtHD9dYVHg/p3Pj7eLkYafbWVs4eLpEGiVScnfIlnIJ+0M4FsqKFlo5J+pn/mAv3vlLDNQKbAujtwwzBxHUpwDmBIYrYeBXrtsJAemXXPrNO55SlIyOWNpIpbTZjSdT9W5DdUXY5HeRIi0vDdueNHYHiPKEy8o9mPLzlTZ7p63PJSU+1ym0OLJfnia8umnjGUNbEixkrNLLLoZvS4MpTH7Uf9aoYL7pSvYjCdTg4DaSPY26l4P+IZBWzMzye9e4yB9pGmLSQX7k9XWLJGfuBen5oy/LalZd5ekN+8SYPFQAGxMI3pGHhrlBjpj63pOXTLmXWr4RUF1C8m/wNQCYeHzYF0p0jRBa8He+KWNNcd3J8IOhqn0EPMb0kB1fpj3M+wWdFiIRtfaXECtjXIGeXKMYERY44Qq4rCrm1wwTQwe0u+Ig+9Et5w/xuRZPAmrMqstDpoK49VhcCjae98+/1F3DEEyAiMy5i13sHpWNyVIf98RCjMs82j9/sbe8EOa6AcfapdDTdnGdZ95QRMaqN7lv1YMI4bt3TsHOx8ob6ySXdkEcVjp9u1wwMPrrXqNS/pRPGQMv9O3lUSNaGR/C/cJTwPHOwP8fs45Ctcy4C0so3upfMumtOlJ08vN3se/7acyL9RQW3JECRVfc0h9Cs0vi5SDFxbb9b5lYZWc3mAb1kOC36YmpZCJSwkES9XHx9UV8JpqULG8Tlx5gaTgqxbZPOCvjHsH3u873IiwEnDk7ffDw3OgjQCp/C8Co3XRP460dKWnYwGp5POR6uuYlnrzwRQf2liw0DK7b6ZXsCjO/XKxgdZMO8qmp4WXsJ/VGV8oPL+NwZFJfe2o75q2q347cO2Q2BNIY8kOmXrhfsJ1prG4txMEVYTcjbwJk+MokDNNpDSYK83ZPLdGQCpqzd1qj9ESwKFqGJnq38aXTkW+FwMGtJ4EY69h5sPT0FHpxj50tLsL2ib4ByjpIgyWbv8hyTeHqoBPA4jreN4rLA+ztN2njXkLOk5E3gpB6znn96+DrNsg8Uh9UyVoLbAHr/6LsJo4zbZislHeGo3Xu8aOOK/8Tcg2zNg+lsCSi3NVpUhZ95+fk3EejRELr/hqNq3mmS8RbSZH9FbnUKemr5RsVg3RBe9OyJshw0XG/4iv1QH6VVcMaDLiNzx/Dv88sHBvozanXhpjFk8WyMCNm1AWQ5vmTNYkbRAkJXxPEWp8fJUjtzg4dkF83Y8M3Kw9r7Z2/plm8KN0afFoh258XgStQfpMRxLp/U2vIvBsbqIe803c5fTrkGcsfGmfgcP4XifHOSvrQfHG1uLUBxSlvQ29yXfR3Cewh5zztFcRmfFE9ip/AOJza8a/TBe5Vqm+o005euAocP9pN7vnC5buvldBUHT5pLSy9TNXz6TsuJS/ZiTWUY8sc/MmUHzu3j7My4uDOSkOvCCcI1jHirLE0gJpTc7Fh4/6UmoBgAuzWrB8YnkEkmKbaTQo+fqaNGyc2Tll1KwJuVPUylP+A6PpYu9+ukQs0+11kCQbLBp6S5m8XlwOaI2PANzdRBZlWefzWh8pvihJYxTv7gZe45lSo40uuIrMYHgEYbrdeUTmKhIlW/+AZUpA8Ec/hHiFcG2nFgFXyGaNVBraLa0ClfAOYDSaNtV340gQktnOIZ/eXkHBOhBbH9abcDMF0uJgP/oty3DpXR0xCvVngN1ImKlT4VL8kjbjqeYVunXXDnAHikBvDdinpvW2JLgu4VkBp/EPbiVClqZUR57+pHPg1GH0bJmlikpEkVjzHSq1+xqPx9bOyaudoQ5/HGT5uXlOI0ypoW9SoU7bSEeuSK16g6RzTl6dnvZTJdrjbCoSSjNiol8DhQ4cLKetv5XiSQuHhyrmKZPkJZCjpoksJAUedLuUnWFdqy/nSYS4fHVP8UHWUdJqC8UZZhLg6UGWfTjLNj3z3ijpmX6RuDC9FIeGPvFOknJTQKX850I/AIsBYGIFeewhZBtfSckwio/Nu52QafFahFG1YNGcIKDXiHaDBLkrmeFkLoBJQyXVslHItZCfshkANWYFsOQnsqZ03mhckF4UrUtcssX31iXuzXXbQWcgjJD2dwf6B62H1E8y+n7dtecBuOt23wZPFxSu1W9vpsYRJvf61WjnU4EPOkQsLyfz71Ca0qVSKNv3TSMyTCRQQTeacObEQGcOPddgGUCqG/JMLtQAwOAfdSe8l2kqmMqCDWI3llCOC2n/6zGV2Dg4EvnXpYUc90Cag9R0RIlC5NHoIUN90ay3vplAEX323iYn9dqW0F8WFCw3PuSWSIb4fpFKMJVEcyeErlHE7jJfPQRO1YI2Pee5VP1HazzA2+uWwUcDtnI4soDbNJf5uEQSfddmYJwl+kJTCCLMEDte36wVG9lYMX/W+HiQm/d/VB3Hm8gqwesdyOxwm8KxDELrSaRDciKk4G8yzJ7CAvdy1BCt/EDEQPRenqBRSae0k4sP7W5ewKS2TVPP8oPb6Qq+XwFUvL4jyWWUml01GKe5pbdyJ76ZxXVArTM5O5virJ6wUeeC9swYBwrQ2EfTo4JJSh+gVuGI+IDHOSVhk38f2Kn4gPrPfbIRNlmSNhBPlIa21UMnnfMma9dMaLMc4UHy9CBOJD+OkeDhI4NnWexBjF6j7kk7mCGqxsQ4wntC8QT6+gyvM5m3/qNcjjzt5c0syxK92p99AUvJmPUd3eWRhs8wdg17URZHaBRy2fIPPKfALmFvUJSeG4epPCILvtj97uB2iITbdkGk3CCuFtldhAqn1tKu3LVD25OuY+939BxMSzkDoSIGOua/PS61WCmXkOybENR3DkNgh/2npS31xzl08tc02PsKaPgL3vdRzwlSqvBoH1M13bgPdmOpoW/WgaKFgJSLVWztyvz/iW6izN0eqO1CzdaYvSAu8cyoNYwidT9KYpeBrJXM4MXYke0XR1/7ksg6bWLboAxroUehChd+QUx5BvX1tmCvtV7Kwqmap6TE2didvbTtSS5T9k4pcwD/OH9TX/5uPo12bY </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年11月17号整理的知识点</title>
    <link href="https://ru23.com/note/fd1af4a9.html"/>
    <id>https://ru23.com/note/fd1af4a9.html</id>
    <published>2018-11-17T11:43:55.000Z</published>
    <updated>2018-12-04T01:50:11.500Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>百度面试题</title>
    <link href="https://ru23.com/note/acc871bc.html"/>
    <id>https://ru23.com/note/acc871bc.html</id>
    <published>2018-11-13T10:11:23.000Z</published>
    <updated>2018-12-04T01:32:46.928Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 的使用主要考虑以下几点：</p><p>体积小，复杂度低<br>业务上移动端项目占比 70% 以上，Vue 的体积小，网络性能角度相比 React 更适合移动端<br>移动端一般巨型项目很少，从代码结构上来讲，使用 Vue 实现更符合我们的场景复杂度，React 更适合大型相对更复杂的 SPA<br>上手成本和迁移成本低<br>Vue 的学习和上手成本相对更低，团队成员对于 Vue 的认可度和热情也比较高<br>组件内双向绑定、数据依赖收集<br>组件内支持双向绑定，更方便的去进行组件内的数据响应与交互<br>独有的数据依赖收集模式使其默认的数据响应和渲染效率都要比 React 高一些<br>React 的使用主要考虑以下原因：</p><p>有一部分现有后台项目采用 React 技术栈，迭代和维护较少，老的项目如果没有足够的迁移价值则不额外投入资源<br>保留很小的一部分 React 技术生态也可以一定程度上保持一些技术多样性</p><p>一面<br>先完成笔试题</p><h4 id="1-实现一个函数，判断输入是不是回文字符串。"><a href="#1-实现一个函数，判断输入是不是回文字符串。" class="headerlink" title="1 实现一个函数，判断输入是不是回文字符串。"></a>1 实现一个函数，判断输入是不是回文字符串。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str!==<span class="string">'string'</span>|| str.constructor !== <span class="built_in">String</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=str.length<span class="number">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i,j)</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(i) !== str.charAt(j))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'adddddda'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'addddda'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'adddasd'</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="2-居中"><a href="#2-居中" class="headerlink" title="2 居中"></a>2 居中</h4><p> transform:translate(-50%,-50%); (ie9以上兼容)<br> flex;align-items: center;justify-content: center （ 移动端首选）</p><h4 id="3-实现效果，点击容器内的图标，图标边框变成border-1px-solid-red，点击空白处重置。"><a href="#3-实现效果，点击容器内的图标，图标边框变成border-1px-solid-red，点击空白处重置。" class="headerlink" title="3 实现效果，点击容器内的图标，图标边框变成border 1px solid red，点击空白处重置。"></a>3 实现效果，点击容器内的图标，图标边框变成border 1px solid red，点击空白处重置。</h4><h4 id="4-请简单实现双向数据绑定mvvm。"><a href="#4-请简单实现双向数据绑定mvvm。" class="headerlink" title="4 请简单实现双向数据绑定mvvm。"></a>4 请简单实现双向数据绑定mvvm。</h4><p> Object.defineProperty 来实现一个简单的数据双向绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        input.value = newVal;</span><br><span class="line">        div.innerHTML = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    obj.name = event.target.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="5-实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem-key-value-和getItem-key"><a href="#5-实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem-key-value-和getItem-key" class="headerlink" title="5 实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem(key,value)和getItem(key)"></a>5 实现Storage，使得该对象为单例，并对localStorage进行封装设置值setItem(key,value)和getItem(key)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance =<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">         <span class="keyword">this</span>.state=&#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//实例化</span></span><br><span class="line">    <span class="keyword">static</span> getInstance(name) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">            <span class="keyword">this</span>.instance = <span class="keyword">new</span> Storage(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    setItem = <span class="function">(<span class="params">key, value</span>) =&gt;</span> localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(value)),</span><br><span class="line">    getItem = <span class="function"><span class="params">key</span> =&gt;</span> localStorage.getItem(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Q1-你的技术栈主要是react，那你说说你用react有什么坑点？"><a href="#Q1-你的技术栈主要是react，那你说说你用react有什么坑点？" class="headerlink" title="Q1 你的技术栈主要是react，那你说说你用react有什么坑点？"></a>Q1 你的技术栈主要是react，那你说说你用react有什么坑点？</h4><p>1.在JSX语法种，需要将 class改写成 className<br>2.react 打包后，项目部署完毕，刷新页面报错（404） 配置nginx 把目录指向index.html就可以解决<br>3.this.setState()会调用render方法，但并不会立即改变state的值，state是在render方法中赋值的。所以执行this.setState()后立即获取state的值是不变的。同样的直接赋值state并不会出发更新，因为没有调用render函数<br>4.监听事件和定时器需要在组件卸载的时候清除，否则切换路由的话这些事件还会一直执行下去<br>5.react列表渲染时为什么尽量不要把索引设置为key值<br>用state和jsx模板生成虚拟DOM，然后用虚拟DOM生成真实的 DOM，当我们state发生变化时,render函数执行，生成新的 虚拟DOM，然后比较新旧虚拟DOM的区别，找到区别，然后直接操作DOM，改变有区别的内容，这样比传统的操作DOM，极大的提升了性能。<br>再说虚拟DOM，虚拟DOM其实就是一个JS对象([‘div’,{class:’app’},’item’]),虚拟DOM核心之一是diff算法，diff算法的核心之一是同层对比，</p><p>因为react中渲染dom是通过render方式，也就是通过虚拟的dom与真实的存在的dom树比较之后发现哪不一样，再进行渲染，这样的渲染对于性能的提升很有帮助，所以键值在保证稳定性,唯一性的时候，在遍历寻找需要改变的地方时候就能很块的找见并对其进行操作，如果键值不是稳定的而是变化的就会使渲染更改dom的效率大大的打折。</p><p>我们如果不用索引为key , 程序能快速的对比出差异，反之也能对出差异，但是必须对比整个虚拟DOM，<br>这样，程序仍然能正常执行，只不过大大消耗了新旧虚拟DOM的对比的性能，并可能导致组件状态问题。</p><p>componentDidMount处理http请求，shouldComponentUpdate允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。<br>调用setState之后发生了什么<br>调用setState函数之后，react会将传入的参数对象与组件当前的状态合并，然后触发调和过程(Reconciliation)。以高效方式根据新的状态构建React元素树并且着手重新渲染整个UI界面。在React得到元素树之后，React会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。（按需渲染，不是全部渲染）<br>React中keys的作用是什么<br>Keys是React用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。在React Diff算法中React会借助元素的Key值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。</p><h4 id="Q2-我现在有一个button，要用react在上面绑定点击事件，我要怎么做？"><a href="#Q2-我现在有一个button，要用react在上面绑定点击事件，我要怎么做？" class="headerlink" title="Q2 我现在有一个button，要用react在上面绑定点击事件，我要怎么做？"></a>Q2 我现在有一个button，要用react在上面绑定点击事件，我要怎么做？</h4><p>第一种是在构造函数中绑定this，第二种是在render()函数里面绑定this，第三种就是使用箭头函数，都能实现上述方法；<br>但是哪一种方法的性能最好，是我们要考虑的问题。应该大家都知道答案：第一种的性能最好。<br>因为第一种，构造函数每一次渲染的时候只会执行一遍；<br>而第二种方法，在每次render()的时候都会重新执行一遍函数；<br>第三种方法的话，每一次render()的时候，都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。<br>第三种方法我们可以举一个例子，因为react判断是否需要进行render是浅层比较，简单来说就是通过===来判断的，如果state或者prop的类型是字符串或者数字，只要值相同，那么浅层比较就会认为其相同；<br>但是如果前者的类型是复杂的对象的时候，我们知道对象是引用类型，浅层比较只会认为这两个prop是不是同一个引用，如果不是，哪怕这两个对象中的内容完全一样，也会被认为是两个不同的prop。</p><h4 id="Q4-你说说event-loop吧"><a href="#Q4-你说说event-loop吧" class="headerlink" title="Q4 你说说event loop吧"></a>Q4 你说说event loop吧</h4><p>对象放在heap（堆）里，常见的基础类型和函数放在stack（栈）里，函数执行的时候在栈里执行。栈里函数执行的时候可能会调一些Dom操作，ajax操作和setTimeout定时器，这时候要等stack（栈）里面的所有程序先走 （注意：栈里的代码是先进后出）， 走完后再走WebAPIs，WebAPIs执行后的结果放在callback queue（回调的队列里，注意：队列里的代码先放进去的先执行），也就是当栈里面的程序走完之后，再从任务队列中读取事件，将队列中的事件放到执行栈中依次执行，这个过程是循环不断的。</p><p>1.所有同步任务都在主线程上执行，形成一个执行栈<br>2.主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。<br>3.一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列,将队列中的事件放到执行栈中依次执行<br>4.主线程从任务队列中读取事件，这个过程是循环不断的</p><h4 id="Q5-说说事件流吧"><a href="#Q5-说说事件流吧" class="headerlink" title="Q5 说说事件流吧"></a>Q5 说说事件流吧</h4><p>1、一个完整的JS事件流是从window开始，最后回到window的一个过程<br>2、事件流被分为三个阶段(1~5)捕获过程、(5~6)目标过程、(6~10)冒泡过程</p><h4 id="Q6-我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？"><a href="#Q6-我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？" class="headerlink" title="Q6 我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？"></a>Q6 我现在有一个进度条，进度条中间有一串文字，当我的进度条覆盖了文字之后，文字要去进度条反色，怎么实现？</h4><p>css反色属性 mix-blend-mode<br>CSS 文字反色</p><p>Q1 你为什么要离开上一家公司？</p><p>Q2 你觉得理想的前端地位是什么？</p><p>Q3 那你意识到问题所在，你又尝试过解决问题吗</p><p>Q1 说一下你上一家公司的一个整体开发流程吧</p><h4 id="react-的虚拟dom是怎么实现的"><a href="#react-的虚拟dom是怎么实现的" class="headerlink" title="react 的虚拟dom是怎么实现的"></a>react 的虚拟dom是怎么实现的</h4><p>在Web开发中,需要将数据的变化实时反映到UI上,这时就需要对DOM进行操作,也就是既状态改变了就要操作相应的DOM元素。<br>解决这个问题有一个非常直观的方法,可以大大降低视图更新的操作,那就是:<br>一旦状态发生了变化,就用模版引擎重新渲染整个视图,然后用新的视图更换掉旧的视图。<br>我们一定会想到:这样的做法会导致很多的问题。最大的问题就是这样做效率太低。<br>因为即使一个小小的状态变更都要重新构造整棵DOM,性价比太低;而且这样做的话,input和textarea的会失去原有的焦点。<br>最后的结论会是:对于局部的小视图的更新,没有问题;但是对于大型视图,如全局应用状态变更的时候,需要更新页面较多局部视图的时候,这样的做法不可取。<br>但是我们会发现,其实React就是这么做的,只是增加了Virtual DOM(虚拟DOM)来避免了整棵DOM 树变更。<br><em><br>DOM树的结构是非常庞大的,因此操作它们的时候要小心,轻微的变更就可能就会导致整个页面重排,这可是杀死性能的罪魁祸首。<br>相对于DOM 对象,原生的JavaScript 对象处理起来更快,而且更简单。并且我们可以很容易地用JavaScript 来构造DOM。<br>既然这样,是不是可以将上面的“状态变更-&gt;重新渲染整个视图”的方式稍微修改一下:<br>用JavaScript 对象表示DOM 信息和结构,当状态变更的时候,重新渲染这个JavaScript 的对象结构。<br>当然这样做其实没什么用,因为真正的页面其实没有改变。<br>但是可以用新渲染的对象树去和旧的树进行对比,记录这两棵树差异。记录下来的不同就是我们需要对页面真正的DOM 操作,<br>然后把它们应用在真正的DOM 树上,页面就变更了。<br>这样就可以做到:视图的结构确实是整个全新渲染了,但是最后操作DOM的时候确实只变更有不同的地方。这就是所谓的Diff算法。<br>为什么这样做就快了呢?因为:javaScript很快,DOM很慢。所以要尽量使用快的,减少使用慢的。</em><br>Diff算法包括以下三个步骤:<br>1、用JavaScript 对象结构表示DOM 树的结构;然后用这个树构建一个真正的DOM 树,插到文档当中。<br>2、当状态变更的时候,重新构造一棵新的对象树。然后用新的树和旧的树进行比较,记录两棵树差异。<br>3、把2所记录的差异应用到步骤1所构建的真正的DOM 树上,视图就更新了。<br>这种做法在React中叫做Virtual DOM(虚拟DOM)。由虚拟DOM来确保只对界面上真正变化的部分进行实际的DOM操作。<br><em><br>虚拟DOM本质上就是在JS 和DOM 之间做了一个缓存。可以类比CPU 和硬盘,既然硬盘这么慢,我们就在它们之间加个缓存:既然DOM 这么慢,我们就在它们JS 和DOM 之间加个缓存。CPU(JS)只操作内存(Virtual DOM),最后的时候再把变更写入硬盘(DOM)。</em><br>最后要特别说明一下:<br>Virtual DOM并没有完全实现DOM,Virtual DOM最主要的还是保留了Element之间的层次关系和一些基本属性。<br>因为DOM实在是太复杂,一个空的Element都复杂得能让你崩溃,并且几乎所有内容我们根本不需要关心。<br>所以Virtual DOM里每一个Element实际上只有几个属性,并且没有那么多乱七八糟的引用。</p><p>Q3 react 的渲染过程中，兄弟节点之间是怎么处理的？也就是key值不一样的时候。</p><h4 id="Q4-我现在有一个数组-1-2-3-4-，请实现算法，得到这个数组的全排列的数组，如-2-1-3-4-，-2-1-4-3-。。。。你这个算法的时间复杂度是多少"><a href="#Q4-我现在有一个数组-1-2-3-4-，请实现算法，得到这个数组的全排列的数组，如-2-1-3-4-，-2-1-4-3-。。。。你这个算法的时间复杂度是多少" class="headerlink" title="Q4 我现在有一个数组[1,2,3,4]，请实现算法，得到这个数组的全排列的数组，如[2,1,3,4]，[2,1,4,3]。。。。你这个算法的时间复杂度是多少"></a>Q4 我现在有一个数组[1,2,3,4]，请实现算法，得到这个数组的全排列的数组，如[2,1,3,4]，[2,1,4,3]。。。。你这个算法的时间复杂度是多少</h4><p>数组全排列：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(arr) &#123;</span><br><span class="line">       <span class="keyword">this</span>.arr = <span class="built_in">Array</span>.from(arr); <span class="comment">// 传入的数组</span></span><br><span class="line">       <span class="keyword">this</span>.result = [];<span class="comment">// 存储全排列结果</span></span><br><span class="line">       <span class="keyword">this</span>.len = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.run(<span class="number">0</span>); <span class="comment">// 首次创建对象时初始化方法</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   run(index) &#123;</span><br><span class="line">       <span class="comment">// 单遍历到数组末端时，将结果储存在result数组中，全排列次数加1</span></span><br><span class="line">       <span class="keyword">if</span> (index == <span class="keyword">this</span>.arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.result.push(<span class="built_in">Array</span>.from(<span class="keyword">this</span>.arr));</span><br><span class="line">           <span class="keyword">this</span>.len++;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = index; i &lt; <span class="keyword">this</span>.arr.length; i++) &#123;</span><br><span class="line">           [<span class="keyword">this</span>.arr[index], <span class="keyword">this</span>.arr[i]] = [<span class="keyword">this</span>.arr[i], <span class="keyword">this</span>.arr[index]];  <span class="comment">// 与下标为i的元素交换位置</span></span><br><span class="line">           <span class="keyword">this</span>.run(index + <span class="number">1</span>);                                              <span class="comment">// 剩下元素全排列</span></span><br><span class="line">           [<span class="keyword">this</span>.arr[index], <span class="keyword">this</span>.arr[i]] = [<span class="keyword">this</span>.arr[i], <span class="keyword">this</span>.arr[index]];  <span class="comment">// 复原数组</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> p = <span class="keyword">new</span> Permutation([<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(p.result);</span><br><span class="line"> <span class="built_in">console</span>.log(p.len);</span><br></pre></td></tr></table></figure></p><p>Q5 我现在有一个背包，容量为m，然后有n个货物，重量分别为w1,w2,w3…wn，每个货物的价值是v1,v2,v3…vn，w和v没有任何关系，请求背包能装下的最大价值。</p><p>四面</p><h4 id="Q1-请说一下你的上一家公司的研发发布流程。"><a href="#Q1-请说一下你的上一家公司的研发发布流程。" class="headerlink" title="Q1 请说一下你的上一家公司的研发发布流程。"></a>Q1 请说一下你的上一家公司的研发发布流程。</h4><p>1.需求会议，完成最终功能需求确认，<br>2.并且选取合适的sprint master，sprint master完成排期预估，并且主导每天的晨会，<br>3.UI原型图和需求会上传到tfs，<br>4.在git的master上新建分支，分支名字前端是</p><h4 id="Q2-你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。"><a href="#Q2-你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。" class="headerlink" title="Q2 你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。"></a>Q2 你说一下webpack的一些plugin，怎么使用webpack对项目进行优化。</h4><p>webpack-dev-server<br>CommonsChunkPlugin<br>ExtractTextWebpackPlugin 分离 CSS<br>UglifyJsPlugin<br>DefinePlugin</p><p>　　代码热替换, HotModuleReplacementPlugin</p><p>　　生成html文件，HtmlWebpackPlugin</p><p>　　将css成生文件，而非内联，ExtractTextPlugin</p><p>　　报错但不退出webpack进程，NoErrorsPlugin</p><p>　　代码丑化，UglifyJsPlugin，开发过程中不建议打开</p><p>　　多个 html共用一个js文件(chunk)，可用CommonsChunkPlugin</p><p>　　清理文件夹，Clean</p><p>　　调用模块的别名ProvidePlugin，例如想在js中用[Math Processing Error]与jQuery对应起来</p><p>webpack DllPlugin、webpack DllReferencePlugin 预编译第三方库文件<br>使用 HappyPack 来加速代码构建<br>Q4 es6 class 的new实例和es5的new实例有什么区别</p><p>Q5 请手写实现一个promise<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.status = <span class="string">'pending'</span>;</span><br><span class="line">    self.value = <span class="literal">undefined</span>;</span><br><span class="line">    self.reason = <span class="literal">undefined</span>;</span><br><span class="line">    self.fullFiledArr = [];</span><br><span class="line">    self.rejectedArr = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">            self.value = value;</span><br><span class="line">            self.status = <span class="string">'fufilled'</span>;</span><br><span class="line">            self.fullFiledArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">                f.call(<span class="keyword">this</span>, self.value)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.status == <span class="string">'pending'</span>) &#123;</span><br><span class="line">            self.reason = reason;</span><br><span class="line">            self.status = <span class="string">'rejected'</span>;</span><br><span class="line">            self.rejectedArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">                f(self.reason)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        callback(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFufilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> myPromise2;</span><br><span class="line">    <span class="keyword">switch</span> (self.status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'pending'</span>:</span><br><span class="line">        myPromise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            self.fullFiledArr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> res = onFufilled(self.value);</span><br><span class="line">                    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                        res.then(resolve, reject);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// resolvePromise(myPromise,res);</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            self.rejectedArr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> res = onRejected(self.reason);</span><br><span class="line">                    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                        res.then(resolve, reject);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'fufilled'</span>:</span><br><span class="line">        myPromise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> res = onFufilled(self.value);</span><br><span class="line">                <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                    res.then(resolve, reject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        myPromise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> res = onRejected(self.reason);</span><br><span class="line">                <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">                    res.then(resolve, reject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> myPromise2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"type error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> isUsed;</span><br><span class="line">    <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">"object"</span> || <span class="keyword">typeof</span> x === <span class="string">"function"</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">"function"</span>) &#123;</span><br><span class="line">                <span class="comment">//是一个promise的情况</span></span><br><span class="line">                then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (isUsed) <span class="keyword">return</span>;</span><br><span class="line">                    isUsed = <span class="literal">true</span>;</span><br><span class="line">                    resolvePromise(promise, y, resolve, reject);</span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (isUsed) <span class="keyword">return</span>;</span><br><span class="line">                    isUsed = <span class="literal">true</span>;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//仅仅是一个函数或者是对象</span></span><br><span class="line">                resolve(x)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isUsed) <span class="keyword">return</span>;</span><br><span class="line">            isUsed = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//返回的基本类型，直接resolve</span></span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> async1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'链式调用1'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> async2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'链式调用2'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">async1().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> async2();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">'pending'</span>;</span><br><span class="line">  <span class="keyword">var</span> doneList = [];</span><br><span class="line">  <span class="keyword">var</span> failList= [];</span><br><span class="line">  <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">done ,fail</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"pending"</span>:</span><br><span class="line">        doneList.push(done);</span><br><span class="line">        failList.push(fail);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'fulfilled'</span>:</span><br><span class="line">        done();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        fail();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    state = <span class="string">"fulfilled"</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = newValue;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;doneList.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = doneList[i](value);</span><br><span class="line">        <span class="keyword">if</span>(temp <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> newP =  temp;</span><br><span class="line">            <span class="keyword">for</span>(i++;i&lt;doneList.length;i++)&#123;</span><br><span class="line">                newP.then(doneList[i],failList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            value = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    state = <span class="string">"rejected"</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = newValue;</span><br><span class="line">      <span class="keyword">var</span> tempRe = failList[<span class="number">0</span>](value);</span><br><span class="line">      <span class="comment">//如果reject里面传入了一个promise，那么执行完此次的fail之后，将剩余的done和fail传入新的promise中</span></span><br><span class="line">      <span class="keyword">if</span>(tempRe <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> newP = tempRe;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;doneList.length;i++)&#123;</span><br><span class="line">            newP.then(doneList[i],failList[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果不是promise，执行完当前的fail之后，继续执行doneList</span></span><br><span class="line">        value =  tempRe;</span><br><span class="line">        doneList.shift();</span><br><span class="line">        failList.shift();</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fn(resolve,reject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          reject(<span class="string">'p 的结果'</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'p2拿到前面传入的值：'</span> + input)</span><br><span class="line">            resolve(<span class="string">'p2的结果'</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">p()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'p的结果:'</span> + res); <span class="keyword">return</span> <span class="string">'p then方法第一次返回'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value);<span class="keyword">return</span> <span class="string">'p then方法第一次错误的返回'</span>&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'p第一次then方法的返回：'</span>+res); <span class="keyword">return</span> <span class="string">'p then方法第二次返回'</span>&#125;)</span><br><span class="line">.then(p2)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'p2的结果：'</span> + res)&#125;);</span><br></pre></td></tr></table></figure><p>五面<br>Q1 你说一下你的技术有什么特点</p><p>Q2 说一下你觉得你最得意的一个项目？你这个项目有什么缺陷，弊端吗？</p><p>Q3 现在有那么一个团队，假如让你来做技术架构，你会怎么做？</p><p>Q4 说一下你上一家公司的主要业务流程，你参与到其中了吗？</p><h4 id="Q10-说一下浏览器的缓存机制"><a href="#Q10-说一下浏览器的缓存机制" class="headerlink" title="Q10 说一下浏览器的缓存机制"></a>Q10 说一下浏览器的缓存机制</h4><p><a href="http://note.youdao.com/noteshare?id=74c654bea765bb13b618c30ee90025f4" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=74c654bea765bb13b618c30ee90025f4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue 的使用主要考虑以下几点：&lt;/p&gt;
&lt;p&gt;体积小，复杂度低&lt;br&gt;业务上移动端项目占比 70% 以上，Vue 的体积小，网络性能角度相比 React 更适合移动端&lt;br&gt;移动端一般巨型项目很少，从代码结构上来讲，使用 Vue 实现更符合我们的场景复杂度，React 更
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里面试题</title>
    <link href="https://ru23.com/note/42f0994d.html"/>
    <id>https://ru23.com/note/42f0994d.html</id>
    <published>2018-11-12T08:09:57.000Z</published>
    <updated>2018-12-04T01:49:30.264Z</updated>
    
    <content type="html"><![CDATA[<p>基本类型、引用类型、typeof vs instanceof、类型转换、this、== vs ===、作用域、闭包、深浅拷贝、防抖、节流、原型</p><p>1.电话初探</p><h3 id="1-说一下你了解CSS盒模型。"><a href="#1-说一下你了解CSS盒模型。" class="headerlink" title="1.说一下你了解CSS盒模型。"></a>1.说一下你了解CSS盒模型。</h3><p>盒模型的组成大家肯定都懂，由里向外content,padding,border,margin.</p><p>盒模型是有两种标准的，一个是标准模型，一个是IE模型。</p><p>我就说了一下IE的怪异盒模型和标注浏览器的盒模型，然后可以通过box-sizing属性控制两种盒模型的变换。<br>W3C模型中：<br>　　　　　　CSS中的宽（width）=内容（content）的宽<br>　　　　　　CSS中的高（height）=内容（content）的高<br>IE模型中：<br>　　　　　　CSS中的宽（width）=内容（content）的宽+（border+padding）<em>2<br>　　　　　　CSS中的高（height）=内容（content）的高+（border+padding）</em>2</p><h3 id="2-说一下box-sizing的应用场景。"><a href="#2-说一下box-sizing的应用场景。" class="headerlink" title="2.说一下box-sizing的应用场景。"></a>2.说一下box-sizing的应用场景。</h3><p>box-sizing属性可以指定盒子模型种类，content-box指定盒子模型为W3C，后者为IE盒子模型。<br>一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，假如用标准 w3c 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2+1</em>2+10<em>2+200=262px、高 20</em>2+1<em>2</em>10<em>2+50=112px，盒子的实际大小为：宽 1</em>2+10<em>2+200=222px、高 1</em>2+10<em>2+50=72px；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2+200=240px、高 20*2+50=70px，盒子的实际大小为：宽 200px、高 50px</p><p>3.说一下你了解的弹性FLEX布局.</p><p>这个我也比较了解，各种概念和属性能想到的说了一大堆，也扯到了Grid布局，基本这个也没啥问题。</p><p>4.说一下一个未知宽高元素怎么上下左右垂直居中。</p><p>说了一下flex弹性布局的实现，说了一下兼容性，扯到了postcss的一些东西，然后说了一下常规的兼容性比较好的实现。</p><p>5.说一下原型链，对象，构造函数之间的一些联系。</p><p>这个我之前写过相关的文章，自己也有比较深入的理解，所以这个也不在话下，噼里啪啦说了一大堆，也不知道面试官听得咋样。</p><p>6.DOM事件的绑定的几种方式</p><p>说了三种，然后说了一些冒泡，默认事件，以及DOM2，DOM3级的一些标准。</p><p>7.说一下你项目中用到的技术栈，以及觉得得意和出色的点，以及让你头疼的点，怎么解决的。</p><p>这个因人而异，开放性问题，主要考察平时项目的一些积累吧，这个我回答感觉也比较ok。</p><p>8.有没有了解http2.0,websocket,https，说一下你的理解以及你所了解的特性。</p><p>这个我看过一些文章，但是没有什么印象，扯了一些概念，但是回答的不是很深。</p><p>第一轮电话初探，大约面了50分钟，就记起来这么多，还有一些细节问题可能淡忘了，总体来说，面的都是以基础为主，然后boss说把我简历推荐给内部，进行正式的社招流程。</p><p>一轮技术面</p><p>然后当天晚上一个女的面试官就给我打电话了，说八点半进行下一轮技术面试，没想到效率这么快，我都没怎么准备。<br>这次就直接省略自我介绍了。</p><p>1.webpack的入口文件怎么配置，多个入口怎么分割啥的，我也没太听清楚。</p><p>这个自己就说了一下自己的理解，以及自己用node写的多入口怎么配置，然后面试官说不是多入口配置，然后我又说了一下自己的理解，然后这题就过了。</p><p>2.我看到你的项目用到了Babel的一个插件：transform-runtime以及stage-2，你说一下他们的作用。</p><p>这个我也还算比较了解，就说了一下ES的一些API，比如generator啥的默认不转换，只转换语法，需要这个来转换，然后说profill啥的，扯了一下stage-1，stage-2，stage-3，这个问题回答还算清楚。</p><p>3.我看到你的webpack配置用到webpack.optimize.UglifyJsPlugin这个插件，有没有觉得压缩速度很慢，有什么办法提升速度。</p><p>这个我主要回答了一下，我之前也没怎么了解，一个想到是缓存原理，压缩只重新压缩改变的，还有就是减少冗余的代码，压缩只用于生产阶段，然后面试官问还有呢？我就说，还可以从硬件上提升，可以得到质的飞跃，比如换台I9处理器的电脑。。。。</p><p>4.简历上看见你了解http协议。说一下200和304的理解和区别</p><p>这个噼里啪啦说了一堆，协商缓存和强制缓存的区别，流程，还有一些细节，提到了expires,Cache-Control,If-none-match,Etag,last-Modified的匹配和特征，这一块之前有过比较详细的了解，所以还是应答如流。</p><p>5.DOM事件中target和currentTarget的区别</p><p>8.说一下项目中觉得可以改进的地方以及做的很优秀的地方？</p><p>这个也是因人而异，开放性问题，大致扯了一下自己的经历，也还OK。</p><p>最后问了有什么需要问的地方，面试到这里基本就结束了，大约面了一个多钟头，还是蛮累的。总体来说，回答的广度和深度以及细节都还算OK，觉得这轮面试基本没什么悬念。</p><p>二轮技术面</p><p>过了几天，接到阿里另一个面试官的电话，上一轮面试通过了，这次是二轮技术面，说估计一个钟头。这次依然跳过自我介绍之类的，直奔主题。</p><p>1.有没有自己写过webpack的loader,他的原理以及啥的，记得也不太清楚。</p><p>这个我就说了一下，然后loader配置啥的，也还ok。</p><p>2.有没有去研究webpack的一些原理和机制，怎么实现的。</p><p>这个我简单说了一下我自己了解的，因为这一块我也没深入去研究，所以说的应该比较浅。</p><p>3.babel把ES6转成ES5或者ES3之类的原理是什么，有没有去研究。</p><p>这一块我说了一下自己的思路，大致也还OK，我也没去深入研究怎么转换的，之前好像看过类似的文章，自己也只观察过转换之后的代码是啥样的，至于怎么转换的规则，真的没去深入观察。</p><p>4.git大型项目的团队合作，以及持续集成啥的。</p><p>这里我就说了一下自己了解的git flow方面的东西，因为没有实战经验，所以我就选择性说明了这一块的不熟练，然后面试官也没细问。</p><p>5.什么是函数柯里化？以及说一下JS的API有哪些应用到了函数柯里化的实现？</p><p>这个我就说了一下函数柯里化一些了解，以及在函数式编程的应用，最后说了一下JS中bind函数和数组的reduce方法用到了函数柯里化。</p><p>6.ES6的箭头函数this问题，以及拓展运算符。</p><p>这一块主要是API和概念的问题，扯了一些规范以及严格模式下其他情况this只想问题。</p><p>7.JS模块化Commonjs,UMD,CMD规范的了解，以及ES6的模块化跟其他几种的区别，以及出现的意义。</p><p>这个也是说了一下自己的理解和认知，自己对模块化历史以及一些规范都有所涉猎，这一块也还凑合。</p><p>8.说一下Vue实现双向数据绑定的原理，以及vue.js和react.js异同点，如果让你选框架，你怎么怎么权衡这两个框架，分析一下。</p><p>主要是发布订阅的设计模式，还有就是ES5的Object.defineProperty的getter和setter机制，然后顺便扯了一下Angular的脏检测，以及alvon.js最先用到这种方式。然后扯了一下vue.js和react.js异同点，权衡框架选择，调研分析之类，噼里啪啦说了一大堆。</p><p>9.我看你也写博客，说一下草稿的交互细节以及实现原理。</p><p>这一款就按照自己用过简书或者掘金，SG这类草稿的体验，详细说了一下，这个开放性问题，说到点基本就OK。</p><p>最后面试官问我有什么想问的吗，面试到这里基本就结束了，差不多面了一个小时，说过几天就会给答复，如果过了就会去阿里园区进行下一轮的技术面。</p><p>1.先自我介绍一下，说一下项目的技术栈，以及项目中遇到的一些问题啥的。</p><p>这个问题就是个开场白，简要说明一下，问题都不大，这个面试官就是第一次打电话给我面试的那个boss，所以技术那块boss心里也有个底细，所以没再问技术问题。</p><p>2.一个业务场景，面对产品不断迭代，以及需求的变动该怎么应对，具体技术方案实现。</p><p>具体业务场景，我就不一一描述，Boss在白板上画了一个大致的模块图，然后做了一些需求描述。<br>然后需求一层一层的改变，然后往下挖，主要是考察应对产品能力，以及对代码的可维护性和可拓展性这些考察，开放性问题，我觉得还考察一些沟通交流方面的能力，因为有些地方面试官故意说得很含糊，反正就是一个综合能力，以及对产品的理解，中间谈到怎么实现，也问到了一些具体的点，记得问到的有一下几个。</p><p>① 怎么获取一个元素到视图顶部的距离。<br>② getBoundingClientRect获取的top和offsetTop获取的top区别<br>③事件委托<br>第二个面试官</p><p>1.业务场景：比如说百度的一个服务不想让阿里使用，如果识别到是阿里的请求，然后跳转到404或者拒绝服务之类的？</p><p>主要是考察http协议头Referer，然后怎么判断是阿里的ip或者啥的，我也不太清楚。</p><p>2.二分查找的时间复杂度怎么求，是多少</p><p>。。。排序的还算清楚一点，查找真的不知所措，没回答上来，也没猜，意义不大，不会就是不会。</p><h3 id="3-XSS是什么，攻击原理，怎么预防。"><a href="#3-XSS是什么，攻击原理，怎么预防。" class="headerlink" title="3.XSS是什么，攻击原理，怎么预防。"></a>3.XSS是什么，攻击原理，怎么预防。</h3><p>这个很简单，跨站脚本攻击XSS(cross site scripting)，攻击类型主要有两种：反射型和存储型，简单说了一下如何防御：</p><p>①转义<br>②DOM解析白名单<br>③第三方库<br>④CSP<br>自己对web安全这块系统学习过，前前后后大约了解了很多，对于XSS,CSRF,点击劫持，Cookie安全，HTTP窃听篡改，密码安全，SQL注入，社会工程学都有一定了解，所以这个自然也不在话下。</p><p>XSS攻击是Web攻击中最常见的攻击方法之一，它是通过对网页注入可执行代码且成功地被浏览器<br>执行，达到攻击的目的，形成了一次有效XSS攻击，一旦攻击成功，它可以获取用户的联系人列<br>表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，有时候还和其他攻击方式同时实<br>施比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨<br>大的，是web安全的头号大敌。</p><p> HttpOnly</p><ol><li>输入检查<br>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用<br>Q：什么是CSRF攻击？举例？如何防御CSRF？<br>A：CSRF 即：跨站点请求伪造</li></ol><p>网站A ：为恶意网站。<br>网站B ：用户已登录的网站。<br>当用户访问 A站 时，A站 私自访问 B站 的操作链接，模拟用户操作。</p><p>假设B站有一个删除评论的链接：<code>http://b.com/comment/?type=delete&amp;id=81723</code><br>A站 直接访问该链接，就能删除用户在 B站 的评论。</p><p>4.线性顺序存储结构和链式存储结构有什么区别？以及优缺点。</p><p>我是类比JS数组和对象来回答的，反正还算凑合吧，自己都数据结构这块多少还是有些印象，所以入了前端，对数据结构和算法确实一直淡忘了。</p><p>5.分析一下移动端日历，PC端日历以及桌面日历的一些不同和需要注意的地方。</p><p>这个我能想到的大致都说了一遍，不同的场景交互和细节以及功能都有所偏差，以及功能的侧重都可能不同。</p><h4 id="6-白板写代码，用最简洁的代码实现数组去重。"><a href="#6-白板写代码，用最简洁的代码实现数组去重。" class="headerlink" title="6.白板写代码，用最简洁的代码实现数组去重。"></a>6.白板写代码，用最简洁的代码实现数组去重。</h4><p>我写了两种实现方式：<br>ES6实现：</p><p>[…new Set([1,2,3,1,’a’,1,’a’])]<br>ES5实现：</p><p>[1,2,3,1,’a’,1,’a’].filter(function(ele,index,array){<br>    return index===array.indexOf(ele)<br>})</p><p>闭包<br>Q：谈谈闭包<br>A：闭包指的是有权访问另一个函数作用域中变量的函数，创建闭包的常见方式，就是在一个函数内部创建另一个函数。要理解闭包，首先必须理解Javascript特殊的变量作用域。变量的作用域无非就是两种：全局变量和局部变量。函数内部可以直接读取全局变量，但在函数外部无法读取函数内的局部变量。如果我们有时候需要得到函数内的局部变量。<br>Q：那闭包的用处有什么？<br>A：闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>Q：使用闭包的问题？<br>A：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>由于IE9 之前的版本对JScript 对象和COM 对象使用不同的垃圾收集。因此闭包在IE 的这些版本中会导致一些特殊的问题。具体来说，如果闭包的作用域链中保存着一个HTML 元素，那么就意味着该元素将无法被销毁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基本类型、引用类型、typeof vs instanceof、类型转换、this、== vs ===、作用域、闭包、深浅拷贝、防抖、节流、原型&lt;/p&gt;
&lt;p&gt;1.电话初探&lt;/p&gt;
&lt;h3 id=&quot;1-说一下你了解CSS盒模型。&quot;&gt;&lt;a href=&quot;#1-说一下你了解CSS盒
      
    
    </summary>
    
      <category term="front-end" scheme="https://ru23.com/categories/front-end/"/>
    
    
  </entry>
  
</feed>

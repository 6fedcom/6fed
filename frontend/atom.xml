<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端迷 (front-end fan)</title>
  
  <subtitle>欢迎投稿、合作，交流QQ：188105274(微信，邮箱同Q)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ru23.com/"/>
  <updated>2018-10-30T15:23:49.381Z</updated>
  <id>https://ru23.com/</id>
  
  <author>
    <name>frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue生命周期和react生命周期对比</title>
    <link href="https://ru23.com/note/73225ea8.html"/>
    <id>https://ru23.com/note/73225ea8.html</id>
    <published>2018-10-27T09:29:11.000Z</published>
    <updated>2018-10-30T15:23:49.381Z</updated>
    
    <content type="html"><![CDATA[<p>react和vue的业务逻辑是差不多，vue在react上封装了更简洁的方法，使用起来更加的便捷，如：提供了便捷的指令（v-for,v-if,v-model），还提供了更多的属性（computed,watch），我还是比较喜欢用react的，更接近js原生，更容易于理解它。</p><h1 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h1><h3 id="一-如下图所示-很清晰-初始化、编译、更新、销毁"><a href="#一-如下图所示-很清晰-初始化、编译、更新、销毁" class="headerlink" title="一 如下图所示(很清晰)初始化、编译、更新、销毁"></a>一 如下图所示(很清晰)初始化、编译、更新、销毁</h3><p><img src="/../../img/vue-life-cycle.png" alt="vue生命周期"></p><h3 id="二-vue生命周期的栗子"><a href="#二-vue生命周期的栗子" class="headerlink" title="二 vue生命周期的栗子"></a>二 vue生命周期的栗子</h3><p> 注意触发vue的created事件以后,this便指向vue实例,这点很重要<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">".test"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">a: <span class="string">"我是内容,在控制台输入myVue.a=123456,可以改变我的值"</span></span><br><span class="line">&#125;,</span><br><span class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。</span></span><br><span class="line"><span class="comment">//但是还没有开始 DOM 编译，$el 还不存在,但是实例存在,即this.a存在,可打印出来 。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"建立"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">beforeCompile: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"未开始编译"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">compiled: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在编译结束后调用。此时所有的指令已生效，因而数据的变化将触发 DOM 更新。但是不担保 $el 已插入文档。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"编译完成"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">ready: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在编译结束和 $el 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.$appendTo() 等方法或指令更新）才触发 ready 钩子。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"一切准备好了"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//myVue.$appendTo(".test2")暂时触发不了,不知道怎么解决</span></span><br><span class="line"><span class="comment">//在 vm.$el 插入 DOM 时调用。必须是由指令或实例方法（如 $appendTo()）插入，直接操作 vm.$el 不会 触发这个钩子。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"插入DOM成功"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">detached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//触发事件 myVue.$destroy(true),其中参数true控制是否删除DOM节点或者myVue.$remove()</span></span><br><span class="line"><span class="comment">//在 vm.$el 从 DOM 中删除时调用。必须是由指令或实例方法删除，直接操作 vm.$el 不会 触发这个钩子。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"删除DOM成功"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//触发方式,在console里面打myVue.$destroy();</span></span><br><span class="line"><span class="comment">//在开始销毁实例时调用。此时实例仍然有功能。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"销毁前"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//触发方式,在console里面打myVue.$destroy();其中myVue.$destroy(true)是删除DOM节点,会触发detached函数,但是实例仍然存在</span></span><br><span class="line"><span class="comment">//在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，注意是解绑不是销毁,所有的子实例也已经被销毁。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"已销毁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="react生命周期"><a href="#react生命周期" class="headerlink" title="react生命周期"></a>react生命周期</h1><h3 id="React-生命周期分为三种状态-1-初始化-2-更新-3-销毁"><a href="#React-生命周期分为三种状态-1-初始化-2-更新-3-销毁" class="headerlink" title="React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁"></a>React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/react-life-cycle.png" alt="React生命周期" title="">                </div>                <div class="image-caption">React生命周期</div>            </figure><p>•初始化</p><p>1、<code>getDefaultProps()</code><br>设置默认的props，也可以用ufaultProps设置组件的默认属性.</p><p>2、<code>getInitialState()</code><br>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props</p><p>3、<code>componentWillMount()</code><br>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p><p>4、 <code>render()</code><br>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p><p>5、<code>componentDidMount()</code><br>组件渲染之后调用，只调用一次。</p><p>•更新</p><p>6、<code>componentWillReceiveProps(nextProps)</code><br>组件初始化时不调用，组件接受新的props时调用。</p><p>7、<code>shouldComponentUpdate(nextProps, nextState)</code><br>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</p><p>8、<code>componentWillUpdata(nextProps, nextState)</code><br>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p><p>9、<code>render()</code><br>组件渲染</p><p>10、<code>componentDidUpdate()</code><br>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p><p>•卸载</p><p>11、<code>componentWillUnmount()</code></p><p>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react和vue的业务逻辑是差不多，vue在react上封装了更简洁的方法，使用起来更加的便捷，如：提供了便捷的指令（v-for,v-if,v-model），还提供了更多的属性（computed,watch），我还是比较喜欢用react的，更接近js原生，更容易于理解它。
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://ru23.com/tags/vue/"/>
    
      <category term="react" scheme="https://ru23.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>js深度拷贝解决双向绑定问题(包含es6方法)</title>
    <link href="https://ru23.com/note/284d188d.html"/>
    <id>https://ru23.com/note/284d188d.html</id>
    <published>2018-10-26T07:44:21.000Z</published>
    <updated>2018-10-27T09:27:15.534Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当我们利用v-bind：来绑定属性向子组件传递对象的时候，有时候我们需要子组件改变的时候不改变父组件的值，一般可以利用JSON.stringify(JSON.parse(jsonstr))将传递来的对象赋值到子组件自己的data，这样做的原理是对传过来的值重新赋予一个空间，从而解决双向绑定。，但是es6有一个深度赋值的方法也可以解决这个问题, let obj= Object.assign({}, obj)也可以解决。</p></blockquote><p>比如一个数组（array）浅度拷贝是当数组a变量成数组b的时候，b改变里面的数组数值的时候，a也随着改变.</p><p>深度拷贝是当当数组a变量成数组b的时候，b改变里面的数组数值的时候，a里面的数组数组不随着改变，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];      </span><br><span class="line"><span class="keyword">var</span> Arr = <span class="built_in">JSON</span>.stringify(arr); <span class="comment">//先转化为string字符串的类型</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">var</span> Brr = <span class="built_in">JSON</span>.parse(Arr); <span class="comment">//在解析字符串的类型</span></span><br><span class="line">Brr[<span class="number">1</span>] = <span class="string">'h'</span>;             <span class="comment">//这样修改Brr中的数组的时候就不会影响到arr里面数组的值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr:'</span> + arr); <span class="comment">//结果是arr:a,h,c,d,e</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Arr:"</span> + Brr); <span class="comment">//结果是Arr:a,h,c,d,e</span></span><br></pre></td></tr></table></figure></p><p>那么为什么浅度拷贝会改变a的数组值而深度拷贝则不会呢？</p><p>因为浅度拷贝指向的是同一个内存，而深度拷贝是增加了一个新的内存，所以不会影响到原来a的内存， 所 以就不会改变原来的值<br><code>eg.</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];      </span><br><span class="line"><span class="keyword">var</span> Arr = arr;    </span><br><span class="line">Arr[<span class="number">1</span>] = <span class="string">'h'</span>;     </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr:'</span> + arr);  <span class="comment">//arr的下标1的‘b’也变成了‘h’ 结果是：arr:a,h,c,d,e</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Arr:"</span> + Arr); <span class="comment">//结果是：Arr:a,h,c,d,e</span></span><br></pre></td></tr></table></figure></p><h2 id="数组的深拷贝"><a href="#数组的深拷贝" class="headerlink" title="数组的深拷贝"></a>数组的深拷贝</h2><p>对于数组的深拷贝常规的有三种方法：</p><p><strong>方法一：遍历复制</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>], arrCopy = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arr) arrCopy[item] = arr[item];</span><br><span class="line">arrCopy[<span class="number">1</span>] = <span class="string">"c"</span>;</span><br><span class="line">arr   <span class="comment">// =&gt; ["a", "b"]</span></span><br><span class="line">arrCopy   <span class="comment">// =&gt; ["a", "c"]</span></span><br></pre></td></tr></table></figure></p><p>考虑伪多维数组可以写成函数形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrDeepCopy</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) sourceCopy[item] = <span class="keyword">typeof</span> source[item] === <span class="string">'object'</span> ? arrDeepCopy(source[item]) : source[item];</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法简单粗暴，但是利用JS本身的函数我们可以更加便捷地实现这个操作。</p><p><strong>方法二：slice()</strong></p><p>可以参考 W3School 对 slice() 方法的描述：slice() 方法可从已有的数组中返回选定的元素。</p><p>调用格式为：</p><p><code>arrayObject.slice(start,end)</code><br>方法返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。该方法并不会修改数组，而是返回一个子数组。</p><p>在这里我们的思路是直接从数组开头截到尾：</p><p>arrCopy = arr.slice(0);<br>arrCopy[1] = “c”;<br>arr   // =&gt; [“a”, “b”]<br>arrCopy   // =&gt; [“a”, “c”]<br>可以看出成功创建了一份原数组的拷贝。</p><p><strong>方法三：concat()</strong></p><p>可以参考 W3School 对 <code>concat()</code> 方法的描述：<code>concat()</code> 方法用于连接两个或多个数组。</p><p>调用格式为：<br><code>arrayObject.concat(arrayX,arrayX,......,arrayX)</code><br>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p>使用这种方法的思路是我们用原数组去拼接一个空内容，放回的便是这个数组的拷贝：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arrCopy = arr.concat();</span><br><span class="line">arrCopy[<span class="number">1</span>] = <span class="string">"c"</span>;</span><br><span class="line">arr   <span class="comment">// =&gt; ["a", "b"] </span></span><br><span class="line">arrCopy   <span class="comment">// =&gt; ["a", "c"]</span></span><br></pre></td></tr></table></figure></p><h2 id="对象的深拷贝"><a href="#对象的深拷贝" class="headerlink" title="对象的深拷贝"></a>对象的深拷贝</h2><p>对于数组的深拷贝我们有了概念，那么一般对象呢？</p><p>我们给出一个对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>同样做测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objCopy = obj;</span><br><span class="line">objCopy.b = <span class="number">3</span>;</span><br><span class="line">obj   <span class="comment">// =&gt; &#123; "a": 1, "b": 3 &#125;</span></span><br><span class="line">objCopy   <span class="comment">// =&gt; &#123; "a": 1, "b": 3 &#125;</span></span><br></pre></td></tr></table></figure></p><p>同样，简单的赋值运算只是创建了一份浅拷贝。</p><p>而对于对象的深拷贝，没有内置方法可以使用，我们可以自己命名一个函数进行这一操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objDeepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) sourceCopy[item] = source[item];</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是对于复杂结构的对象我们发现这个函数并不适用，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"a"</span>: &#123; <span class="string">"a1"</span>: [<span class="string">"a11"</span>, <span class="string">"a12"</span>], <span class="string">"a2"</span>: <span class="number">1</span> &#125;, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>所以需要进行一点修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objDeepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) sourceCopy[item] = <span class="keyword">typeof</span> source[item] === <span class="string">'object'</span> ? objDeepCopy(source[item]) : source[item];</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objCopy = objDeepCopy(obj);</span><br><span class="line">objCopy.a.a1[<span class="number">1</span>] = <span class="string">"a13"</span>;</span><br><span class="line">obj   <span class="comment">// =&gt; &#123; "a": &#123; "a1": ["a11", "a12"], "a2": 1 &#125;, "b": 2 &#125;</span></span><br><span class="line">objCopy   <span class="comment">// =&gt; &#123; "a": &#123; "a1": ["a11", "a13"], "a2": 1 &#125;, "b": 2 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、对象数组的深拷贝</strong></p><p> 如果再考虑更奇葩更复杂的情况，例如我们定义：</p><p>var obj = [{ “a”: { “a1”: [“a11”, “a12”], “a2”: 1 }, “b”: 2 }, [“c”, { “d”: 4, “e”: 5 }]];<br>这是一个由对象、数组杂合成的奇葩数组，虽然我们平时写程序基本不可能这么折腾自己，但是可以作为一种特殊情况来考虑，这样我们就可以结合之前说的方法去拓展拷贝函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objDeepCopy = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCopy = source <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source) &#123;</span><br><span class="line">        sourceCopy[item] = <span class="keyword">typeof</span> source[item] === <span class="string">'object'</span> ? objDeepCopy(source[item]) : source[item];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sourceCopy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objCopy = objDeepCopy(obj);</span><br><span class="line">objCopy[<span class="number">0</span>].a.a1[<span class="number">1</span>] = <span class="string">"a13"</span>;</span><br><span class="line">objCopy[<span class="number">1</span>][<span class="number">1</span>].e = <span class="string">"6"</span>;</span><br><span class="line">obj   <span class="comment">// =&gt; [&#123; "a": &#123; "a1": ["a11", "a12"], "a2": 1 &#125;, "b": 2 &#125;, ["c", &#123; "d": 4, "e": 5 &#125;]]</span></span><br><span class="line">objCopy   <span class="comment">// =&gt; [&#123; "a": &#123; "a1": ["a11", "a13"], "a2": 1 &#125;, "b": 2 &#125;, ["c", &#123; "d": 4, "e": 6 &#125;]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;当我们利用v-bind：来绑定属性向子组件传递对象的时候，有时候我们需要子组件改变的时候不改变父组件的值，一般可以利用JSON.stringify(JSON.parse(jsonstr))将传递来的对象赋值到子组件自己的data，这样做的原理是对传
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://ru23.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>ajax和fetch、axios的优缺点以及比较</title>
    <link href="https://ru23.com/note/7fae67c6.html"/>
    <id>https://ru23.com/note/7fae67c6.html</id>
    <published>2018-10-26T01:18:54.000Z</published>
    <updated>2018-10-27T12:41:57.933Z</updated>
    
    <content type="html"><![CDATA[<p>前端是个发展迅速的领域，前端请求自然也发展迅速，从原生的XHR到jquery ajax，再到现在的axios和fetch。</p><h2 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery ajax"></a>jquery ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: data,</span><br><span class="line">    dataType: dataType,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>它是对原生XHR的封装，还支持JSONP，非常方便；真的是用过的都说好。但是随着react，vue等前端框架的兴起，jquery早已不复当年之勇。很多情况下我们只需要使用ajax，但是却需要引入整个jquery，这非常的不合理，于是便有了fetch的解决方案。</p><p><strong>优缺点</strong></p><ul><li>本身是针对MVC的编程,不符合现在前端MVVM的浪潮</li><li>基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案</li><li>JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）</li></ul><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p><code>fetch</code>号称是ajax的替代品，它的API是基于Promise设计的，旧版本的浏览器不支持<code>Promise</code>，需要使用<code>polyfill es6-promise</code></p><p>举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生XHR</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, url);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText) <span class="comment">// 从服务器获取数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line">fetch(url).then(response = &gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">response.json()</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(data = &gt; <span class="built_in">console</span>.log(data)).</span><br><span class="line"><span class="keyword">catch</span> (err = &gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">看起来好像是方便点，then链就像之前熟悉的callback。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在MDN上，讲到它跟jquery ajax的区别，这也是fetch很奇怪的地方：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当接收到一个代表错误的 HTTP 状态码时，从 fetch()返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ）， 仅当网络故障时或请求被阻止时，才会标记为 reject。 默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">突然感觉这还不如jquery ajax好用呢？别急，再搭配上async/await将会让我们的异步代码更加优雅：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看起来是不是像同步代码一样？简直完美！好吧，其实并不完美，async/await是ES7的API，目前还在试验阶段，还需要我们使用babel进行转译成ES5代码。</p><p>还要提一下的是，fetch是比较底层的API，很多情况下都需要我们再次封装。 比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery ajax</span></span><br><span class="line">$.post(url, &#123;<span class="attr">name</span>: <span class="string">'test'</span>&#125;)</span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: <span class="built_in">Object</span>.keys(&#123;<span class="attr">name</span>: <span class="string">'test'</span>&#125;).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[key]);</span><br><span class="line">    &#125;).join(<span class="string">'&amp;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">由于fetch是比较底层的API，所以需要我们手动将参数拼接成'name=test'的格式，而jquery ajax已经封装好了。所以fetch并不是开箱即用的。</span></span><br><span class="line"><span class="string">另外，fetch还不支持超时控制。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**优缺点：**</span></span><br><span class="line"><span class="string">- 符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里</span></span><br><span class="line"><span class="string">- 更好更方便的写法</span></span><br><span class="line"><span class="string">- 更加底层，提供的API丰富（request, response）</span></span><br><span class="line"><span class="string">- 脱离了XHR，是ES规范里新的实现方式</span></span><br><span class="line"><span class="string">- 1）fetchtch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</span></span><br><span class="line"><span class="string">- 2）fetch默认不会带cookie，需要添加配置项</span></span><br><span class="line"><span class="string">- 3）fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了量的浪费</span></span><br><span class="line"><span class="string">- 4）fetch没有办法原生监测请求的进度，而XHR可以</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## axios</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">axios是尤雨溪大神推荐使用的，它也是对原生XHR的封装。它有以下几大特性：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以在node.js中使用</span></span><br><span class="line"><span class="string">提供了并发请求的接口</span></span><br><span class="line"><span class="string">支持Promise API</span></span><br><span class="line"><span class="string">简单使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(err)&#125;)</span><br></pre></td></tr></table></figure></p><p>写法有很多种，自行查看文档</p><p>并发请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Both requests are now complete</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p><p>这是官方的并发案例，好像是挺厉害的样子。不过感觉它的all方法应该是基于Promise.all()的</p><p>axios体积比较小，也没有上面fetch的各种问题，我认为是当前最好的请求方式 </p><p><strong>优缺点：</strong></p><p>从 node.js 创建 http 请求<br>支持 Promise API<br>客户端支持防止CSRF<br>提供了一些并发请求的接口（重要，方便了很多的操作）</p><p>最后，这都是些基础用法，还没有深入了解，还是要在实战中踩过坑才能运用的更加自如。</p><h1 id="为什么要用axios"><a href="#为什么要用axios" class="headerlink" title="为什么要用axios?"></a>为什么要用axios?</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><p>从浏览器中创建 XMLHttpRequest<br>从 node.js 发出 http 请求<br>支持 Promise API<br>拦截请求和响应<br>转换请求和响应数据<br>取消请求<br>自动转换JSON数据<br>客户端支持防止CSRF/XSRF</p><p>以上内容整理于互联网<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47509372-8dce1a00-d8a8-11e8-959d-faf613af8dcc.jpg" alt="0" title="">                </div>                <div class="image-caption">0</div>            </figure></p><hr><blockquote><p>作者：林寻丶<br>来源：掘金<br>原文：<a href="https://juejin.im/post/5acde23c5188255cb32e7e76?utm_medium=fe&amp;utm_source=weixinqun" target="_blank" rel="noopener">https://juejin.im/post/5acde23c5188255cb32e7e76?utm_medium=fe&amp;utm_source=weixinqun</a></p></blockquote><hr><blockquote><p>作者：WebCandy<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/twodogya/article/details/80223508" target="_blank" rel="noopener">https://blog.csdn.net/twodogya/article/details/80223508</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端是个发展迅速的领域，前端请求自然也发展迅速，从原生的XHR到jquery ajax，再到现在的axios和fetch。&lt;/p&gt;
&lt;h2 id=&quot;jquery-ajax&quot;&gt;&lt;a href=&quot;#jquery-ajax&quot; class=&quot;headerlink&quot; title=&quot;j
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Axios" scheme="https://ru23.com/tags/Axios/"/>
    
      <category term="Ajax" scheme="https://ru23.com/tags/Ajax/"/>
    
      <category term="Fetch" scheme="https://ru23.com/tags/Fetch/"/>
    
  </entry>
  
  <entry>
    <title>关于数组中forEach() 、map()、filter()、reduce()、some()、every()的总结</title>
    <link href="https://ru23.com/note/afd16d4c.html"/>
    <id>https://ru23.com/note/afd16d4c.html</id>
    <published>2018-10-22T14:43:01.000Z</published>
    <updated>2018-10-27T09:27:15.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach()"></a>1、forEach()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.forEach((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">//结果为1,2,3,4 </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//forEach遍历数组，无返回值，不改变原数组，仅仅只是遍历、常用于注册组件、指令等等。</span></span><br></pre></td></tr></table></figure><h2 id="2、map"><a href="#2、map" class="headerlink" title="2、map()"></a>2、map()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.map((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item * <span class="number">10</span></span><br><span class="line"><span class="comment">//新数组为10,20,30,40 </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">////map遍历数组，返回一个新数组，不改变原数组的值。</span></span><br></pre></td></tr></table></figure><h2 id="3、filter"><a href="#3、filter" class="headerlink" title="3、filter()"></a>3、filter()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.filter((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line"><span class="comment">//新数组为[3,4] </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//filter过滤掉数组中不满足条件的值，返回一个新数组，不改变原数组的值。</span></span><br></pre></td></tr></table></figure><h2 id="4、reduce"><a href="#4、reduce" class="headerlink" title="4、reduce()"></a>4、reduce()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4];</span><br><span class="line">arr.reduce((result, item, index, arr) = &gt; &#123;</span><br><span class="line">console.log(result)</span><br><span class="line">// 1 3 6 result为上次一计算的结果</span><br><span class="line">console.log(item)</span><br><span class="line">// // 2 3 4 </span><br><span class="line">console.log(index)</span><br><span class="line">// // 1 2 3</span><br><span class="line">return result + item</span><br><span class="line">//最终结果为10 </span><br><span class="line">&#125;)</span><br><span class="line">//reduce 让数组的前后两项进行某种计算。</span><br><span class="line">//然后返回其值，并继续计算。</span><br><span class="line">//不改变原数组，返回计算的最终结果，从数组的第二项开始遍历。</span><br></pre></td></tr></table></figure><h2 id="5、some"><a href="#5、some" class="headerlink" title="5、some()"></a>5、some()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.some((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line"><span class="comment">//结果为true </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//遍历数组每一项，有一项返回true,则停止遍历，</span></span><br><span class="line"><span class="comment">//结果返回true。不改变原数组</span></span><br></pre></td></tr></table></figure><h2 id="6、every"><a href="#6、every" class="headerlink" title="6、every()"></a>6、every()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.every((item, index, arr) = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line"><span class="comment">//结果为false </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//遍历数组每一项，每一项返回true,则最终结果为true。</span></span><br><span class="line"><span class="comment">//当任何一项返回false时，停止遍历，返回false。不改变原数组</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、forEach&quot;&gt;&lt;a href=&quot;#1、forEach&quot; class=&quot;headerlink&quot; title=&quot;1、forEach()&quot;&gt;&lt;/a&gt;1、forEach()&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://ru23.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题携带cookie加入withCredentials报错原因以及解决方案</title>
    <link href="https://ru23.com/note/b2790fdc.html"/>
    <id>https://ru23.com/note/b2790fdc.html</id>
    <published>2018-10-22T10:26:41.000Z</published>
    <updated>2018-10-27T09:27:15.545Z</updated>
    
    <content type="html"><![CDATA[<p>1.跨域允许<br>解决方法：服务器发送允许客户端发送源的报文头<br>header(‘Access-Control-Allow-Origin:’.$_SERVER[“HTTP_ORIGIN”]);<br>2.客户端无法携带跨域cookie<br>这个时候就可以在extjs中加入withCredentials<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://120.111.111.123/setcookie.php'</span>,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    params: &#123; </span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'hello world'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    withCredentials: <span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">transport</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">    failure: <span class="function"><span class="keyword">function</span>(<span class="params">transport</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"Error: "</span> - transport.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>3.因为加了withCredentials报文头，可是客户端不知道服务器允不允许报的错（耿直的客户端）<br>这个时候就在服务器发送Access-Control-Allow-Credentials<br>header(‘Access-Control-Allow-Credentials:true’);<br>4.由于客户端不知道服务端是否允许POST请求而报的错<br>这个时候要在服务器端加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);</span><br></pre></td></tr></table></figure></p><p>以上汇总起来就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Origin:&apos;.$_SERVER[&apos;HTTP_ORIGIN&apos;]);</span><br><span class="line">header(&apos;Access-Control-Allow-Credentials:true&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Methods:GET, POST, PUT, DELETE, OPTIONS&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with,content-type&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:Origin, No-Cache, X-Requested-With, If-Modified-Since,</span><br></pre></td></tr></table></figure><p>1.跨域允许<br>不允许报错的跨域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. </span><br><span class="line">Origin &apos;null&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></p><p>报这个错就说明我们跨域了，不在允许的访问源，于是乎我在服务的setcookie.php加入<code>header(&#39;Access-Control-Allow-Origin:*&#39;)</code>;允许所有源<br>然后又报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://120.111.111.123/setcookie.php. Request header field X-Requested-With is not allowed by Access-Control-Allow-Headers in preflight response.</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">在跨域的时候，js不会直接发post请求，而是先发送一个option请求，看看服务器允许什么访问头（比如是不是允许post请求），验证成功后才会发送真正的请求</span><br></pre></td></tr></table></figure></p><p>#用谷歌的开发者工具抓的option报文<br>OPTIONS /setcookie.php HTTP/1.1<br>Host: 120.111.111.123<br>Connection: keep-alive<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Access-Control-Request-Method: POST<br>Origin: null<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36<br>Access-Control-Request-Headers: x-requested-with<br>Accept: <em>/</em><br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: zh-CN,zh;q=0.8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>#path /setcookie.php<br>session_start();<br>header(‘Access-Control-Allow-Origin:*’);<br>header(‘Access-Control-Allow-Methods:OPTIONS, GET, POST’); // 允许option，get，post请求<br>header(‘Access-Control-Allow-Headers:x-requested-with’); // 允许x-requested-with请求头<br>header(‘Access-Control-Max-Age:86400’); // 允许访问的有效期<br>// 功能…<br>// …<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">继续测试我们的新功能，成功的解决了跨域问题</span><br><span class="line">但是，cookie没有“设置成功”。而之所以没有“设置成功”，是因为cookie存在本地，但是每个cookie都有一个domain，当你本地的cookie中存在你当前访问的域时，才会被带过去，而我的index.html文件是本地访问的，即http://localhost/index.html，而cookie的域是要跨域的域名的，所以不行了。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;POST&quot;,</span><br><span class="line">    url: &quot;跨域的url&quot;,</span><br><span class="line">    xhrFields: &#123;</span><br><span class="line">         withCredentials: true </span><br><span class="line">    &#125;, // 发送凭据</span><br><span class="line">    contentType: &quot;application/json; charset=utf-8&quot;,</span><br><span class="line">    data: JSON.stringify(data),</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    success: function (message) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    error: function (message) &#123;</span><br><span class="line">        console.log(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>继续访问，报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: A wildcard &apos;*&apos; cannot be used in the &apos;Access-Control-Allow-Origin&apos; header when the credentials flag is true. </span><br><span class="line">Origin &apos;null&apos; is therefore not allowed access. </span><br><span class="line">The credentials mode of an XMLHttpRequest is controlled by the withCredentials attribute.</span><br></pre></td></tr></table></figure></p><p>现在这个错误产生的原因就是<br>1.因为加入了withCredentials之后，Access-Control-Allow-Origin就不能用“*”了，既然不允许访问这个源，那我就让你发个报文头让你允许访问呗！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#path setcookie.php</span><br><span class="line">session_start();</span><br><span class="line">// 是否存在请求源</span><br><span class="line">if(isset($_SERVER[&quot;HTTP_ORIGIN&quot;])) &#123;</span><br><span class="line">    header(&apos;Access-Control-Allow-Origin:&apos;.$_SERVER[&quot;HTTP_ORIGIN&quot;]);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);</span><br><span class="line"></span><br><span class="line">// 功能...</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>好了，上传完代码，继续测试。发送请求之后，又报错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: Credentials flag is &apos;true&apos;, but the &apos;Access-Control-Allow-Credentials&apos; header is &apos;&apos;. </span><br><span class="line">It must be &apos;true&apos; to allow credentials. Origin &apos;null&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></p><p>大概的意思就是说我给你发了<code>withCredentials</code>报文头，但是你服务器没有跟我说允许我带这个报文头，那么解决方法就是加上允许发这个报文头的报文头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">// 是否存在请求源</span><br><span class="line">if(isset($_SERVER[&quot;HTTP_ORIGIN&quot;])) &#123;</span><br><span class="line">    header(&apos;Access-Control-Allow-Origin:&apos;.$_SERVER[&quot;HTTP_ORIGIN&quot;]);  </span><br><span class="line">&#125;</span><br><span class="line">header(&apos;Access-Control-Allow-Origin:null&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Methods:OPTIONS, GET, POST&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with&apos;);</span><br><span class="line">header(&apos;Access-Control-Max-Age:86400&apos;);</span><br><span class="line"></span><br><span class="line">header(&apos;Access-Control-Allow-Credentials:true&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 功能...</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>终于成功了！</p><blockquote><p>摘自<br>链接：<a href="https://www.jianshu.com/p/552daaf2869c" target="_blank" rel="noopener">https://www.jianshu.com/p/552daaf2869c</a><br>來源：简书</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.跨域允许&lt;br&gt;解决方法：服务器发送允许客户端发送源的报文头&lt;br&gt;header(‘Access-Control-Allow-Origin:’.$_SERVER[“HTTP_ORIGIN”]);&lt;br&gt;2.客户端无法携带跨域cookie&lt;br&gt;这个时候就可以在extjs
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="https://ru23.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="cookie" scheme="https://ru23.com/tags/cookie/"/>
    
      <category term="ajax" scheme="https://ru23.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>输入框input类型为number时，去掉上下箭头样式</title>
    <link href="https://ru23.com/note/1c69a5f4.html"/>
    <id>https://ru23.com/note/1c69a5f4.html</id>
    <published>2018-10-22T08:57:28.000Z</published>
    <updated>2018-10-27T09:27:15.546Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-outer-spin-button</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-inner-spin-button</span> &#123;</span></span><br><span class="line"><span class="undefined">        -webkit-appearance: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[type="number"]</span>&#123;</span></span><br><span class="line"><span class="undefined">        -moz-appearance: textfield;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html5" scheme="https://ru23.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之hybrid</title>
    <link href="https://ru23.com/note/b3429210.html"/>
    <id>https://ru23.com/note/b3429210.html</id>
    <published>2018-10-20T17:13:10.000Z</published>
    <updated>2018-10-27T09:27:15.530Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-c6dfe0f6f12fe034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="一、hybrid-是什么，为何会用-hybrid"><a href="#一、hybrid-是什么，为何会用-hybrid" class="headerlink" title="一、hybrid 是什么，为何会用 hybrid"></a>一、hybrid 是什么，为何会用 hybrid</h2><h3 id="1-1-hybrid-文字解释"><a href="#1-1-hybrid-文字解释" class="headerlink" title="1.1 hybrid 文字解释"></a>1.1 hybrid 文字解释</h3><ul><li><code>hybrid</code> 即“混合”，即前端和客户端的混合开发</li><li>需前端开发人员和客户端开发人员配合完成</li><li>某些环节也可能涉及到 <code>server</code> 端</li><li>PS：不要以为自己的前端就可以不理会客户端的知识</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-8bb6aab836ef1b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-2-hybrid-存在价值"><a href="#1-2-hybrid-存在价值" class="headerlink" title="1.2 hybrid 存在价值"></a>1.2 hybrid 存在价值</h3><ul><li>可以快速迭代更新【关键】（无需 app 审核，思考为何？）</li><li>体验流畅（和 NA 的体验基本类似）</li><li>减少开发和沟通成本，双端公用一套代码</li></ul><h3 id="1-3-webview"><a href="#1-3-webview" class="headerlink" title="1.3 webview"></a>1.3 webview</h3><ul><li>是 <code>app</code> 中的一个组件（ <code>app</code> 可以有 <code>webview</code> ，也可以没有）</li><li>于加载 <code>h5</code> 页面，即一个小型的浏览器内核</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-683f8336237ea709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2c35b8e256628d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-4-file-协议"><a href="#1-4-file-协议" class="headerlink" title="1.4 file 协议"></a>1.4 file 协议</h3><ul><li>其实在一开始接触 <code>html</code>开发，就已经使用了 <code>file</code> 协议</li><li>只不过你当时没有“协议”“标准”等这些概念</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-658f64270968f795.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-5-http-s-协议"><a href="#1-5-http-s-协议" class="headerlink" title="1.5 http(s) 协议"></a>1.5 http(s) 协议</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-120c70939dda4f33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-6-两者区别"><a href="#1-6-两者区别" class="headerlink" title="1.6 两者区别"></a>1.6 两者区别</h3><ul><li><code>file</code> 协议：本地文件，快</li><li><code>http(s)</code> 协议：网络加载，慢</li></ul><h3 id="1-7-具体实现"><a href="#1-7-具体实现" class="headerlink" title="1.7 具体实现"></a>1.7 具体实现</h3><ul><li>不是所有场景都适合使用 <code>hybrid</code></li><li>使用 <code>NA</code> ：体验要求极致，变化不频繁（无头条的首页）</li><li>使用 <code>hybrid</code> ：体验要求高，变化频繁（如头条的新闻详情页）</li><li>使用 <code>h5</code> ：体验无要求，不常用（如举报、反馈等页面）</li></ul><blockquote><p>实现</p></blockquote><ul><li>前端做好静态页面（<code>html js css</code>），将文件交给客户端</li><li>客户端拿到前端静态页面，以文件形式存储在 <code>app</code> 中</li><li>客户端在一个 <code>webview</code> 中</li><li>使用 <code>file</code> 协议加载静态页面</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-78c3827d77e01846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、hybrid-更新上线流程"><a href="#二、hybrid-更新上线流程" class="headerlink" title="二、hybrid 更新上线流程"></a>二、hybrid 更新上线流程</h2><h3 id="2-1-具体流程图"><a href="#2-1-具体流程图" class="headerlink" title="2.1 具体流程图"></a>2.1 具体流程图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-968e9acbd54baf44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>思考（目的，可行途径）</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-da3cb73a39523a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>要替换每个客户端的静态文件</li><li>只能客户端来做（客户端是我们开发的）</li><li>客户端去 server 下载最新的静态文件</li><li>我们维护 server 的静态文件</li></ul><h3 id="2-2-完整流程"><a href="#2-2-完整流程" class="headerlink" title="2.2 完整流程"></a>2.2 完整流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-3ed2e0dcff457b30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>分版本，有版本号，如 <code>201803211015</code></li><li>将静态文件压缩成 <code>zip</code>包，上传到服务端</li><li>客户端每次启动，都去服务端检查版本号</li><li>如果服务端版本号大于客户端版本号，就去下载最新的 <code>zip</code> 包</li><li>下载完之后解压包，然后将现有文件覆盖</li></ul><p><strong>要点总结</strong></p><ul><li>要点1：服务端的版本和<code>zip</code>包维护</li><li>要点2：更新<code>zip</code> 包之前，先对比版本号</li><li>要点3：<code>zip</code> 下载解压和覆盖</li></ul><h2 id="三、hybrid-和-h5-的区别"><a href="#三、hybrid-和-h5-的区别" class="headerlink" title="三、hybrid 和 h5 的区别"></a>三、hybrid 和 h5 的区别</h2><h3 id="3-1-优点"><a href="#3-1-优点" class="headerlink" title="3.1 优点"></a>3.1 优点</h3><ul><li>体验更好，跟 <code>NA</code>体验基本一致</li><li>可快速迭代，无需 <code>app</code> 审核【关键】</li></ul><h3 id="3-2-缺点"><a href="#3-2-缺点" class="headerlink" title="3.2 缺点"></a>3.2 缺点</h3><ul><li>开发成本高。联调、测试、查 <code>bug</code> 都比较麻烦</li><li>运维成本高。参考此前讲过的更新上线的流程</li></ul><h3 id="3-3-适用的场景"><a href="#3-3-适用的场景" class="headerlink" title="3.3 适用的场景"></a>3.3 适用的场景</h3><ul><li><code>hybrid</code> ： 产品的稳定功能，体验要求高，迭代频繁</li><li><code>h5</code> ： 单词的运营活动（如 <code>xx</code> 红包）或不常用功能</li></ul><h2 id="四、前端和客户端通讯"><a href="#四、前端和客户端通讯" class="headerlink" title="四、前端和客户端通讯"></a>四、前端和客户端通讯</h2><h3 id="4-1-JS-和客户端通讯的基本形式"><a href="#4-1-JS-和客户端通讯的基本形式" class="headerlink" title="4.1 JS 和客户端通讯的基本形式"></a>4.1 JS 和客户端通讯的基本形式</h3><ul><li><code>JS</code> 访问客户端能力，传递参数和回调函数</li><li>客户端通过回调函数返回内容</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-68700d9920ef0351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-schema-协议简介和使用"><a href="#4-2-schema-协议简介和使用" class="headerlink" title="4.2 schema 协议简介和使用"></a>4.2 schema 协议简介和使用</h3><ul><li>之前介绍了 <code>http(s)</code> 和 <code>file</code> 协议</li><li><code>schema</code> 协议 —— 前端和客户端通讯的约定</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-728d555cfb705e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-87869b716de1fee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a0215dd1a9fcfa34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-3-schema-使用的封装"><a href="#4-3-schema-使用的封装" class="headerlink" title="4.3 schema 使用的封装"></a>4.3 schema 使用的封装</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-870b827be457e049.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-725ad0ec319d8d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-66d0b2f3f4af2495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-4-内置上线"><a href="#4-4-内置上线" class="headerlink" title="4.4 内置上线"></a>4.4 内置上线</h3><ul><li>将以上封装的代码打包，叫做 <code>invoke.js</code>，内置到客户端</li><li>客户端每次启动 <code>webview</code>，都默认执行 <code>invoke.js</code></li><li>本地加载，免去网络加载的时间，更快</li><li>本地加载，没有网络请求，黑客看不到 <code>schema</code> 协议，更安全</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="面试" scheme="https://ru23.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Hybird" scheme="https://ru23.com/tags/Hybird/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之组件化</title>
    <link href="https://ru23.com/note/4cf9f504.html"/>
    <id>https://ru23.com/note/4cf9f504.html</id>
    <published>2018-10-20T16:20:32.000Z</published>
    <updated>2018-10-27T09:27:15.529Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-8aa7fa463781cafe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="一、说一下对组件化的理解"><a href="#一、说一下对组件化的理解" class="headerlink" title="一、说一下对组件化的理解"></a>一、说一下对组件化的理解</h2><h3 id="1-1-组件的封装"><a href="#1-1-组件的封装" class="headerlink" title="1.1 组件的封装"></a>1.1 组件的封装</h3><ul><li>视图</li><li>数据</li><li>变化逻辑</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-8f48ca224806e741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-2-组件的复用"><a href="#1-2-组件的复用" class="headerlink" title="1.2 组件的复用"></a>1.2 组件的复用</h3><ul><li><code>props</code> 传递</li><li>复用</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2a5e3b0b883ad5f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-3e549b6e59c0ea28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、JSX-本质是什么"><a href="#二、JSX-本质是什么" class="headerlink" title="二、JSX 本质是什么"></a>二、JSX 本质是什么</h2><h3 id="2-1-JSX-语法"><a href="#2-1-JSX-语法" class="headerlink" title="2.1 JSX 语法"></a>2.1 JSX 语法</h3><ul><li><code>html</code> 形式</li><li>引入 <code>JS</code> 变量和表达式</li><li>循环</li><li><code>style</code> 和 <code>className</code></li><li>事件</li></ul><blockquote><ul><li>JSX 语法根本无法被浏览器所解析</li><li>那么它如何在浏览器运行？</li></ul></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-f1c8a9cbb26570e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-2-JSX-解析"><a href="#2-2-JSX-解析" class="headerlink" title="2.2 JSX 解析"></a>2.2 JSX 解析</h3><ul><li><code>JSX</code> 其实是语法糖</li><li>开发环境会将 <code>JSX</code> 编译成 <code>JS</code> 代码</li><li><code>JSX</code> 的写法大大降低了学习成本和编码工作量</li><li>同时，<code>JSX</code> 也会增加 <code>debug</code>成本</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5f19249d793a7cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-11923d891215fd76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d033075c77441cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-3-JSX-独立的标准"><a href="#2-3-JSX-独立的标准" class="headerlink" title="2.3 JSX 独立的标准"></a>2.3 JSX 独立的标准</h3><ul><li><code>JSX</code> 是 <code>React</code> 引入的，但不是 <code>React</code> 独有的</li><li><code>React</code>已经将它作为一个独立标准开放，其他项目也可用</li><li><code>React.createElement</code> 是可以自定义修改的</li><li>说明：本身功能已经完备；和其他标准监控和扩展性没问题</li></ul><h2 id="三、JSX-和-vdom-的关系"><a href="#三、JSX-和-vdom-的关系" class="headerlink" title="三、JSX 和 vdom 的关系"></a>三、JSX 和 vdom 的关系</h2><h3 id="3-1-为何需要-vdom"><a href="#3-1-为何需要-vdom" class="headerlink" title="3.1 为何需要 vdom"></a>3.1 为何需要 vdom</h3><ul><li><code>vdom</code> 是 <code>React</code>初次推广开来的，结合 <code>JSX</code></li><li><code>JSX</code> 就是模板，最终要渲染成 <code>html</code></li><li>初次渲染 + 修改 <code>state</code> 后的 <code>re-render</code></li><li>正好符合 <code>vdom</code> 的应用场景</li></ul><h3 id="3-2-React-createElement-和-h"><a href="#3-2-React-createElement-和-h" class="headerlink" title="3.2 React.createElement 和 h"></a>3.2 React.createElement 和 h</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d345399b0ceb7e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="3-3-何时-patch"><a href="#3-3-何时-patch" class="headerlink" title="3.3 何时 patch"></a>3.3 何时 patch</h3><ul><li>初次渲染 - <code>ReactDOM.render(&lt;App/&gt;, container)</code></li><li>会触发 <code>patch(container, vnode)</code></li><li><code>re-render</code> - <code>setState</code></li><li>会触发 <code>patch(vnode, newVnode)</code></li></ul><h3 id="3-4-自定义组件的解析"><a href="#3-4-自定义组件的解析" class="headerlink" title="3.4 自定义组件的解析"></a>3.4 自定义组件的解析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-69788662ca8059d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><code>‘div’</code> - 直接渲染 <code>&lt;div&gt;</code> 即可，<code>vdom</code> 可以做到</li><li><code>Input</code> 和 <code>List</code> ，是自定义组件（<code>class</code>），<code>vdom</code> 默认不认识</li><li>因此 <code>Input</code> 和 <code>List</code> 定义的时候必须声明 <code>render</code> 函数</li><li>根据 <code>props</code> 初始化实例，然后执行实例的 <code>render</code> 函数</li><li><code>render</code> 函数返回的还是 <code>vnode</code>对象</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-11a4ca366d944a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="四、说一下-React-setState-的过程"><a href="#四、说一下-React-setState-的过程" class="headerlink" title="四、说一下 React setState 的过程"></a>四、说一下 React setState 的过程</h2><h3 id="4-1-setState-的异步"><a href="#4-1-setState-的异步" class="headerlink" title="4.1 setState 的异步"></a>4.1 setState 的异步</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-dc8703edc57b0b20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>setState 为何需要异步？</strong></p><ul><li>可能会一次执行多次 <code>setState</code></li><li>你无法规定、限制用户如何使用 <code>setState</code></li><li>没必要每次 <code>setState</code> 都重新渲染，考虑性能</li><li>即便是每次重新渲染，用户也看不到中间的效果</li><li>只看到最后的结果即可</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-dbca3e81f5b1a4a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-vue-修改属性也是异步"><a href="#4-2-vue-修改属性也是异步" class="headerlink" title="4.2 vue 修改属性也是异步"></a>4.2 vue 修改属性也是异步</h3><ul><li>效果、原因和 <code>setState</code> 一样</li></ul><h3 id="4-3-setState-的过程"><a href="#4-3-setState-的过程" class="headerlink" title="4.3 setState 的过程"></a>4.3 setState 的过程</h3><ul><li>每个组件实例，都有<code>renderComponent</code> 方法</li><li>执行 <code>renderComponent</code>  会重新执行实例的 <code>render</code></li><li><code>render</code> 函数返回 <code>newVnode</code> ，然后拿到 <code>preVnode</code></li><li>执行 <code>patch(preVnode, newVnode)</code></li></ul><h2 id="五、React-vs-vue"><a href="#五、React-vs-vue" class="headerlink" title="五、React vs vue"></a>五、React vs vue</h2><h3 id="5-1-两者的本质区别"><a href="#5-1-两者的本质区别" class="headerlink" title="5.1 两者的本质区别"></a>5.1 两者的本质区别</h3><ul><li>vue - 本质是 MVVM 框架，由 MVC 发展而来</li><li>React - 本质是前端组件化框架，由后端组件化发展而来</li><li>但这并不妨碍他们两者都能实现相同的功能</li></ul><h3 id="5-2-看模板和组件化的区别"><a href="#5-2-看模板和组件化的区别" class="headerlink" title="5.2 看模板和组件化的区别"></a>5.2 看模板和组件化的区别</h3><ul><li><code>vue</code>- 使用模板（最初由 <code>angular</code> 提出）</li><li><code>React</code>- 使用 <code>JSX</code></li><li>模板语法上，我更加倾向于 <code>JSX</code></li><li>模板分离上，我更加倾向于 <code>vue</code></li></ul><p><strong>模板的区别</strong></p><blockquote><p>模板应该和 JS 逻辑分离</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5e3dfde0d813ee64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d551ac0050d8ecf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a9fd44b70c5529d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>组件化区别</strong></p><ul><li><code>React</code> 本身就是组件化，没有组件化就不是 <code>React</code></li><li><code>vue</code> 也支持组件化，不过是在 <code>MVVM</code> 上的扩展</li><li>对于组件化，我更加倾向于 <code>React</code> ，做的彻底而清晰</li></ul><h3 id="5-3-两者共同点"><a href="#5-3-两者共同点" class="headerlink" title="5.3 两者共同点"></a>5.3 两者共同点</h3><ul><li>都支持组件化</li><li>都是数据驱动试图</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="面试" scheme="https://ru23.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="组件化" scheme="https://ru23.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之MVVM浅析</title>
    <link href="https://ru23.com/note/872b0859.html"/>
    <id>https://ru23.com/note/872b0859.html</id>
    <published>2018-10-20T16:10:02.000Z</published>
    <updated>2018-10-27T09:27:15.531Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-e0e229cfc78ee5d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="一、说一下使用-jquery-和使用框架的区别"><a href="#一、说一下使用-jquery-和使用框架的区别" class="headerlink" title="一、说一下使用 jquery 和使用框架的区别"></a>一、说一下使用 jquery 和使用框架的区别</h2><h3 id="1-1-jQuery-实现-todo-list"><a href="#1-1-jQuery-实现-todo-list" class="headerlink" title="1.1  jQuery 实现 todo-list"></a>1.1  jQuery 实现 todo-list</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a6e157c329007a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-2-vue-实现-todo-list"><a href="#1-2-vue-实现-todo-list" class="headerlink" title="1.2 vue 实现 todo-list"></a>1.2 vue 实现 todo-list</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-49817bcd534d8b6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="1-3-jQuery-和框架的区别"><a href="#1-3-jQuery-和框架的区别" class="headerlink" title="1.3 jQuery 和框架的区别"></a>1.3 jQuery 和框架的区别</h3><ul><li>数据和视图的分离，解耦（开放封闭原则）</li><li>以数据驱动视图，只关心数据变化，DOM 操作被封装</li></ul><h2 id="二、说一下对-MVVM-的理解"><a href="#二、说一下对-MVVM-的理解" class="headerlink" title="二、说一下对 MVVM 的理解"></a>二、说一下对 MVVM 的理解</h2><h3 id="2-1-MVC"><a href="#2-1-MVC" class="headerlink" title="2.1 MVC"></a>2.1 MVC</h3><ul><li><code>M - Model</code> 数据</li><li><code>V - View</code> 视图、界面</li><li><code>C - Controller</code> 控制器、逻辑处理</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-9eeb873dbeab8fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ae4d1af8796ca210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-2-MVVM"><a href="#2-2-MVVM" class="headerlink" title="2.2 MVVM"></a>2.2 MVVM</h3><ul><li><code>Model</code> - 模型、数据</li><li><code>View</code> - 视图、模板（视图和模型是分离的）</li><li><code>ViewModel</code> - 连接 <code>Model</code> 和 <code>View</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d2c6b8c8bd1d954a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-3-关于-ViewModel"><a href="#2-3-关于-ViewModel" class="headerlink" title="2.3 关于 ViewModel"></a>2.3 关于 ViewModel</h3><ul><li><code>MVVM</code> 不算是一种创新</li><li>但其中的 <code>ViewModel</code> 确实一种创新</li><li>真正结合前端场景应用的创建</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-4c4f92a1598b8111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-41caaec1c3c29299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="2-4-MVVM-框架的三大要素"><a href="#2-4-MVVM-框架的三大要素" class="headerlink" title="2.4 MVVM 框架的三大要素"></a>2.4 MVVM 框架的三大要素</h3><ul><li>响应式：<code>vue</code>如何监听到 <code>data</code> 的每个属性变化？</li><li>模板引擎：<code>vue</code> 的模板如何被解析，指令如何处理？</li><li>渲染：<code>vue</code> 的模板如何被渲染成 <code>html</code> ？以及渲染过程</li></ul><h2 id="三、vue-中如何实现响应式"><a href="#三、vue-中如何实现响应式" class="headerlink" title="三、vue 中如何实现响应式"></a>三、vue 中如何实现响应式</h2><h3 id="3-1-什么是响应式"><a href="#3-1-什么是响应式" class="headerlink" title="3.1 什么是响应式"></a>3.1 什么是响应式</h3><ul><li>修改 data 属性之后，vue 立刻监听到</li><li>data 属性被代理到 vm 上</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-b037083258565102.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="3-2-Object-defineProperty"><a href="#3-2-Object-defineProperty" class="headerlink" title="3.2 Object.defineProperty"></a>3.2 Object.defineProperty</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5a22356afe0fc249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="3-3-模拟实现"><a href="#3-3-模拟实现" class="headerlink" title="3.3 模拟实现"></a>3.3 模拟实现</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-9cd08cb0657479a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2cd1392e845ce6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="四、vue-中如何解析模板"><a href="#四、vue-中如何解析模板" class="headerlink" title="四、vue 中如何解析模板"></a>四、vue 中如何解析模板</h2><h3 id="4-1-模板是什么"><a href="#4-1-模板是什么" class="headerlink" title="4.1 模板是什么"></a>4.1 模板是什么</h3><ul><li>本质：字符串</li><li>有逻辑，如 <code>v-if</code> <code>v-for</code> 等</li><li>与 <code>html</code> 格式很像，但有很大区别</li><li>最终还要转换为 <code>html</code> 来显示</li></ul><p><strong>模板最终必须转换成 JS 代码，因为</strong></p><ul><li>有逻辑（<code>v-if</code> <code>v-for</code>），必须用 <code>JS</code>才能实现</li><li>转换为 <code>html</code> 渲染页面，必须用 <code>JS</code> 才能实现</li><li>因此，模板最重要转换成一个 <code>JS</code> 函数（<code>render</code> 函数）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-eb81593136db9979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-render-函数"><a href="#4-2-render-函数" class="headerlink" title="4.2 render 函数"></a>4.2 render 函数</h3><ul><li>模板中所有信息都包含在了 <code>render</code> 函数中</li><li><code>this</code> 即<code>vm</code></li><li><code>price</code> 即 <code>this.price</code> 即 <code>vm.price</code>，即 <code>data</code> 中的 <code>price</code></li><li><code>_c</code> 即 <code>this._c</code> 即 <code>vm._c</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-b73efe6842725d85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-3b0a4523b3a21f06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-48f05d2febca5466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-3-render-函数与-vdom"><a href="#4-3-render-函数与-vdom" class="headerlink" title="4.3 render 函数与 vdom"></a>4.3 render 函数与 vdom</h3><ul><li><code>vm._c</code> 其实就相当于 <code>snabbdom</code>中的 <code>h</code> 函数</li><li><code>render</code> 函数执行之后，返回的是 <code>vnode</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-a393a094aba2dbaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-9cd1e28e1b4be677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><code>updateComponent</code>中实现了 <code>vdom</code> 的 <code>patch</code></li><li>页面首次渲染执行 <code>updateComponent</code></li><li><code>data</code> 中每次修改属性，执行<code>updateComponent</code></li></ul><h2 id="五、vue-的整个实现流程"><a href="#五、vue-的整个实现流程" class="headerlink" title="五、vue 的整个实现流程"></a>五、vue 的整个实现流程</h2><ul><li>第一步：解析模板成 render 函数</li><li>第二步：响应式开始监听</li><li>第三步：首次渲染，显示页面，且绑定依赖</li><li>第四步：<code>data</code> 属性变化，触发 <code>rerender</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-161bb616d8d82ac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="5-1-第一步：解析模板成-render-函数"><a href="#5-1-第一步：解析模板成-render-函数" class="headerlink" title="5.1 第一步：解析模板成 render 函数"></a>5.1 第一步：解析模板成 render 函数</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-324e1d882233345a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2ae04b9b261c06f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-991804d9e7cbc521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-0ea6f157db6ded1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>模板中的所有信息都被 <code>render</code>函数包含</li><li>模板中用到的 <code>data</code> 中的属性，都变成了 <code>JS</code> 变量</li><li>模板中的<code>v-model</code>  <code>v-for</code>  <code>v-on</code> 都变成了 <code>JS</code> 逻辑</li><li><code>render</code> 函数返回 <code>vnode</code></li></ul><h3 id="5-2-第二步：响应式开始监听"><a href="#5-2-第二步：响应式开始监听" class="headerlink" title="5.2 第二步：响应式开始监听"></a>5.2 第二步：响应式开始监听</h3><ul><li><code>Object.defineProperty</code></li><li>将 <code>data</code> 的属性代理到 <code>vm</code>上</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-721a5fade82e7677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="5-3-第三步：首次渲染，显示页面，且绑定依赖"><a href="#5-3-第三步：首次渲染，显示页面，且绑定依赖" class="headerlink" title="5.3 第三步：首次渲染，显示页面，且绑定依赖"></a>5.3 第三步：首次渲染，显示页面，且绑定依赖</h3><ul><li>初次渲染，执行 <code>updateComponent</code>，执行 <code>vm._render()</code></li><li>执行 <code>render</code> 函数，会访问到 <code>vm.list vm.title</code></li><li>会被响应式的 <code>get</code> 方法监听到</li><li>执行 <code>updateComponent</code> ，会走到 <code>vdom</code> 的 <code>patch</code> 方法</li><li><code>patch</code> 将 <code>vnode</code>渲染成 <code>DOM</code> ，初次渲染完成</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-5aafaf7b6286bfb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-b9817fca90782813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>为何要监听 get ，直接监听 set 不行吗？</strong></p><ul><li><code>data</code> 中有很多属性，有些被用到，有些可能不被用到</li><li>被用到的会走到 <code>get</code> ，不被用到的不会走到 <code>get</code></li><li>未走到 <code>get</code> 中的属性，<code>set</code>的时候我们也无需关心</li><li>避免不必要的重复渲染</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-81f02a1c168d1d25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="5-4-第四步：data-属性变化"><a href="#5-4-第四步：data-属性变化" class="headerlink" title="5.4 第四步：data 属性变化"></a>5.4 第四步：data 属性变化</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-114a451f4dfe201a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-e6e45a3f2b8c986c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>修改属性，被响应式的 <code>set</code> 监听到</li><li><code>set</code>中执行 <code>updateComponent</code></li><li>updateComponent 重新执行 <code>vm._render()</code></li><li>生成的 <code>vnode</code> 和 <code>prevVnode</code> ，通过 <code>patch</code>进行对比</li><li>渲染到 <code>html</code> 中</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-f4b05281f852dbe8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="面试" scheme="https://ru23.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="MVVM" scheme="https://ru23.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>虚拟DOM（二）</title>
    <link href="https://ru23.com/note/a6c4da3d.html"/>
    <id>https://ru23.com/note/a6c4da3d.html</id>
    <published>2018-10-20T15:10:14.000Z</published>
    <updated>2018-10-27T09:27:15.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么需要虚拟DOM"><a href="#一、为什么需要虚拟DOM" class="headerlink" title="一、为什么需要虚拟DOM"></a>一、为什么需要虚拟DOM</h2><blockquote><p>先介绍浏览器加载一个<code>HTML</code>文件需要做哪些事，帮助我们理解为什么我们需要虚拟<code>DOM</code>。<code>webkit</code>引擎的处理流程</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-7c24fdb60936bd96.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>所有浏览器的引擎工作流程都差不多，如上图大致分5步：创建<code>DOM tree</code> –&gt; 创建<code>Style Rules</code> -&gt; 构建<code>Render tree</code> -&gt; 布局<code>Layout</code> –&gt; 绘制<code>Painting</code></p></blockquote><ul><li>第一步，用<code>HTML</code>分析器，分析<code>HTML</code>元素，构建一颗<code>DOM</code>树。</li><li>第二步：用<code>CSS</code>分析器，分析<code>CSS</code>文件和元素上的<code>inline</code>样式，生成页面的样式表。</li><li>第三步：将上面的<code>DOM</code>树和样式表，关联起来，构建一颗<code>Render</code>树。这一过程又称为<code>Attachment</code>。每个<code>DOM</code>节点都有<code>attach</code>方法，接受样式信息，返回一个<code>render</code>对象（又名<code>renderer</code>）。这些<code>render</code>对象最终会被构建成一颗<code>Render</code>树。</li><li>第四步：有了<code>Render</code>树后，浏览器开始布局，会为每个<code>Render</code>树上的节点确定一个在显示屏上出现的精确坐标值。</li><li>第五步：<code>Render</code>数有了，节点显示的位置坐标也有了，最后就是调用每个节点的<code>paint</code>方法，让它们显示出来。</li></ul><blockquote><p>当你用传统的源生<code>api</code>或<code>jQuery</code>去操作<code>DOM</code>时，浏览器会从构建<code>DOM</code>树开始从头到尾执行一遍流程。比如当你在一次操作时，需要更新<code>10</code>个<code>DOM</code>节点，理想状态是一次性构建完<code>DOM</code>树，再执行后续操作。但浏览器没这么智能，收到第一个更新<code>DOM</code>请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程。显然例如计算<code>DOM</code>节点的坐标值等都是白白浪费性能，可能这次计算完，紧接着的下一个<code>DOM</code>更新请求，这个节点的坐标值就变了，前面的一次计算是无用功。</p></blockquote><ul><li>即使计算机硬件一直在更新迭代，操作<code>DOM</code>的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验。真实的<code>DOM</code>节点，哪怕一个最简单的div也包含着很多属性，可以打印出来直观感受一下</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-409c2c86d78baa71.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>虚拟<code>DOM</code>就是为了解决这个浏览器性能问题而被设计出来的。例如前面的例子，假如一次操作中有<code>10</code>次更新<code>DOM</code>的动作，虚拟<code>DOM</code>不会立即操作<code>DOM</code>，而是将这<code>10</code>次更新的<code>diff</code>内容保存到本地的一个<code>js</code>对象中，最终将这个js对象一次性<code>attach</code>到<code>DOM</code>树上，通知浏览器去执行绘制工作，这样可以避免大量的无谓的计算量</p></blockquote><h2 id="二、实现虚拟DOM"><a href="#二、实现虚拟DOM" class="headerlink" title="二、实现虚拟DOM"></a>二、实现虚拟DOM</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"real-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Real DOM<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>cannot update<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用<code>js</code>对象来模拟<code>DOM</code>节点如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = Element(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'virtual-container'</span> &#125;, [</span><br><span class="line">    Element(<span class="string">'p'</span>, &#123;&#125;, [<span class="string">'Virtual DOM'</span>]),</span><br><span class="line">    Element(<span class="string">'div'</span>, &#123;&#125;, [<span class="string">'before update'</span>]),</span><br><span class="line">    Element(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 1'</span>]),</span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 2'</span>]),</span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 3'</span>]),</span><br><span class="line">    ]),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = tree.render();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'virtualDom'</span>).appendChild(root);</span><br></pre></td></tr></table></figure><blockquote><p>用<code>js</code>对象模拟<code>DOM</code>节点的好处是，页面的更新可以先全部反映在<code>js</code>对象上，操作内存中的<code>js</code>对象的速度显然要快多了。等更新完后，再将最终的<code>js</code>对象映射成真实的<code>DOM</code>，交由浏览器去绘制</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">tagName, props, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Element(tagName, props, children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.tagName = tagName;</span><br><span class="line">    <span class="keyword">this</span>.props = props || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.children = children || [];</span><br><span class="line">    <span class="keyword">this</span>.key = props ? props.key : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            count += child.count;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一个参数是节点名（如<code>div</code>），第二个参数是节点的属性（如<code>class</code>），第三个参数是子节点（如<code>ul</code>的<code>li</code>）。除了这三个参数会被保存在对象上外，还保存了<code>key</code>和<code>count</code></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-b834a19182079afd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>有了<code>js</code>对象后，最终还需要将其映射成真实的<code>DOM</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Element.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName);</span><br><span class="line">    <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">in</span> props) &#123;</span><br><span class="line">        setAttr(el, propName, props[propName]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> childEl = (child <span class="keyword">instanceof</span> Element) ? child.render() : <span class="built_in">document</span>.createTextNode(child);</span><br><span class="line">        el.appendChild(childEl);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>根据<code>DOM</code>名调用源生的<code>createElement</code>创建真实<code>DOM</code>，将<code>DOM</code>的属性全都加到这个<code>DOM</code>元素上，如果有子元素继续递归调用创建子元素，并<code>appendChild</code>挂到该<code>DOM</code>元素上。这样就完成了从创建虚拟<code>DOM</code>到将其映射成真实<code>DOM</code>的全部工作</p></blockquote><h2 id="三、Diff算法"><a href="#三、Diff算法" class="headerlink" title="三、Diff算法"></a>三、Diff算法</h2><blockquote><p>我们已经完成了创建虚拟<code>DOM</code>并将其映射成真实<code>DOM</code>的工作，这样所有的更新都可以先反映到虚拟<code>DOM</code>上，如何反映呢？需要明确一下<code>Diff</code>算法</p></blockquote><ul><li>两棵树如果完全比较时间复杂度是<code>O(n^3)</code></li><li><code>React</code>的<code>Diff</code>算法的时间复杂度是<code>O(n)</code>。要实现这么低的时间复杂度，意味着只能平层地比较两棵树的节点，放弃了深度遍历</li><li>这样做，似乎牺牲了一定的精确性来换取速度，但考虑到现实中前端页面通常也不会跨层级移动<code>DOM</code>元素，所以这样做是最优的。</li></ul><p>我们新创建一棵树，用于和之前的树进行比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newTree = Element(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'virtual-container'</span> &#125;, [</span><br><span class="line">    Element(<span class="string">'h3'</span>, &#123;&#125;, [<span class="string">'Virtual DOM'</span>]),                     <span class="comment">// REPLACE</span></span><br><span class="line">    Element(<span class="string">'div'</span>, &#123;&#125;, [<span class="string">'after update'</span>]),                   <span class="comment">// TEXT</span></span><br><span class="line">    Element(<span class="string">'ul'</span>, &#123; <span class="attr">class</span>: <span class="string">'marginLeft10'</span> &#125;, [              <span class="comment">// PROPS</span></span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 1'</span>]),</span><br><span class="line">        <span class="comment">// Element('li', &#123; class: 'item' &#125;, ['Item 2']),    // REORDER remove</span></span><br><span class="line">        Element(<span class="string">'li'</span>, &#123; <span class="attr">class</span>: <span class="string">'item'</span> &#125;, [<span class="string">'Item 3'</span>]),</span><br><span class="line">    ]),</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>只考虑平层地<code>Diff</code>的话，就简单多了，只需要考虑以下4种情况</p><blockquote><p>第一种是最简单的，节点类型变了，例如下图中的<code>P</code>变成了<code>h3</code>。我们将这个过程称之为<code>REPLACE</code>。直接将旧节点卸载（<code>componentWillUnmount</code>）并装载新节点（<code>componentWillMount</code>）就行了</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-fd068c191a95ea82.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>旧节点包括下面的子节点都将被卸载，如果新节点和旧节点仅仅是类型不同，但下面的所有子节点都一样时，这样做显得效率不高。但为了避免<code>O(n^3)</code>的时间复杂度，这样做是值得的。这也提醒了<code>React</code>开发者，应该避免无谓的节点类型的变化，例如运行时将<code>div</code>变成<code>p</code>就没什么太大意义</p><blockquote><p>第二种也比较简单，节点类型一样，仅仅属性或属性值变了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderA: &lt;ul&gt;</span><br><span class="line">renderB: &lt;ul class: &apos;marginLeft10&apos;&gt;</span><br><span class="line">=&gt; [addAttribute class &quot;marginLeft10&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>我们将这个过程称之为<code>PROPS</code>。此时不会触发节点的卸载（<code>componentWillUnmount</code>）和装载（<code>componentWillMount</code>）动作。而是执行节点更新（<code>shouldComponentUpdate</code>到<code>componentDidUpdate</code>的一系列方法）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffProps</span>(<span class="params">oldNode, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldProps = oldNode.props;</span><br><span class="line">    <span class="keyword">const</span> newProps = newNode.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> key;</span><br><span class="line">    <span class="keyword">const</span> propsPatches = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> isSame = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find out different props</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newProps[key] !== oldProps[key]) &#123;</span><br><span class="line">            isSame = <span class="literal">false</span>;</span><br><span class="line">            propsPatches[key] = newProps[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find out new props</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldProps.hasOwnProperty(key)) &#123;</span><br><span class="line">            isSame = <span class="literal">false</span>;</span><br><span class="line">            propsPatches[key] = newProps[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isSame ? <span class="literal">null</span> : propsPatches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种是文本变了，文本对也是一个<code>Text Node</code>，也比较简单，直接修改文字内容就行了，我们将这个过程称之为<code>TEXT</code></li><li>第四种是移动，增加，删除子节点，我们将这个过程称之为<code>REORDER</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-b592d77d1cc244e1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>在中间插入一个节点，程序员写代码很简单：$(B).after(F)。但如何高效地插入呢？简单粗暴的做法是：卸载C，装载F，卸载D，装载C，卸载E，装载D，装载E。如下图</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-b13f0c68b7cc7c43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>我们写<code>JSX</code>代码时，如果没有给数组或枚举类型定义一个<code>key</code>，就会看到下面这样的<code>warning</code>。<code>React</code>提醒我们，没有<code>key</code>的话，涉及到移动，增加，删除子节点的操作时，就会用上面那种简单粗暴的做法来更新。虽然程序运行不会有错，但效率太低，因此<code>React</code>会给我们一个<code>warning</code></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-e5ca945bf041e1f4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>如果我们在<code>JSX</code>里为数组或枚举型元素增加上<code>key</code>后，<code>React</code>就能根据<code>key</code>，直接找到具体的位置进行操作，效率比较高。如下图</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1959053-17cf74f6fdd45468.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>常见的最小编辑距离问题，可以用<code>Levenshtein Distance</code>算法来实现，时间复杂度是<code>O(M*N)</code>，但通常我们只要一些简单的移动就能满足需要，降低点精确性，将时间复杂度降低到<code>O(max(M, N)</code>即可</p></blockquote><p>最终<code>Diff</code>出来的结果如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>: [ &#123;<span class="attr">type</span>: REPLACE, <span class="attr">node</span>: Element&#125; ],</span><br><span class="line">    <span class="number">4</span>: [ &#123;<span class="attr">type</span>: TEXT, <span class="attr">content</span>: <span class="string">"after update"</span>&#125; ],</span><br><span class="line">    <span class="number">5</span>: [ &#123;<span class="attr">type</span>: PROPS, <span class="attr">props</span>: &#123;<span class="attr">class</span>: <span class="string">"marginLeft10"</span>&#125;&#125;, &#123;<span class="attr">type</span>: REORDER, <span class="attr">moves</span>: [&#123;<span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">0</span>&#125;]&#125; ],</span><br><span class="line">    <span class="number">6</span>: [ &#123;<span class="attr">type</span>: REORDER, <span class="attr">moves</span>: [&#123;<span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">0</span>&#125;]&#125; ],</span><br><span class="line">    <span class="number">8</span>: [ &#123;<span class="attr">type</span>: REORDER, <span class="attr">moves</span>: [&#123;<span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">0</span>&#125;]&#125; ],</span><br><span class="line">    <span class="number">9</span>: [ &#123;<span class="attr">type</span>: TEXT, <span class="attr">content</span>: <span class="string">"Item 3"</span>&#125; ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、映射成真实DOM"><a href="#四、映射成真实DOM" class="headerlink" title="四、映射成真实DOM"></a>四、映射成真实DOM</h2><blockquote><p>虚拟<code>DOM</code>有了，<code>Diff</code>也有了，现在就可以将<code>Diff</code>应用到真实<code>DOM</code>上了</p></blockquote><p>深度遍历DOM将Diff的内容更新进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfsWalk</span>(<span class="params">node, walker, patches</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currentPatches = patches[walker.index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> len = node.childNodes ? node.childNodes.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        walker.index++;</span><br><span class="line">        dfsWalk(node.childNodes[i], walker, patches);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentPatches) &#123;</span><br><span class="line">        applyPatches(node, currentPatches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>具体更新的代码如下，其实就是根据<code>Diff</code>信息调用源生<code>API</code>操作<code>DOM</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyPatches</span>(<span class="params">node, currentPatches</span>) </span>&#123;</span><br><span class="line">    currentPatches.forEach(<span class="function">(<span class="params">currentPatch</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (currentPatch.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> REPLACE: &#123;</span><br><span class="line">                <span class="keyword">const</span> newNode = (<span class="keyword">typeof</span> currentPatch.node === <span class="string">'string'</span>)</span><br><span class="line">                    ? <span class="built_in">document</span>.createTextNode(currentPatch.node)</span><br><span class="line">                    : currentPatch.node.render();</span><br><span class="line">                node.parentNode.replaceChild(newNode, node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> REORDER:</span><br><span class="line">                reorderChildren(node, currentPatch.moves);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PROPS:</span><br><span class="line">                setProps(node, currentPatch.props);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TEXT:</span><br><span class="line">                <span class="keyword">if</span> (node.textContent) &#123;</span><br><span class="line">                    node.textContent = currentPatch.content;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// ie</span></span><br><span class="line">                    node.nodeValue = currentPatch.content;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown patch type <span class="subst">$&#123;currentPatch.type&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虚拟<code>DOM</code>的目的是将所有操作累加起来，统计计算出所有的变化后，统一更新一次<code>DOM</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、为什么需要虚拟DOM&quot;&gt;&lt;a href=&quot;#一、为什么需要虚拟DOM&quot; class=&quot;headerlink&quot; title=&quot;一、为什么需要虚拟DOM&quot;&gt;&lt;/a&gt;一、为什么需要虚拟DOM&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先介绍浏览器加载一个&lt;code&gt;H
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="Javascript" scheme="https://ru23.com/tags/Javascript/"/>
    
      <category term="虚拟DOM" scheme="https://ru23.com/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
  </entry>
  
  <entry>
    <title>虚拟DOM（一）</title>
    <link href="https://ru23.com/note/96d236e5.html"/>
    <id>https://ru23.com/note/96d236e5.html</id>
    <published>2018-10-20T14:12:12.000Z</published>
    <updated>2018-10-27T09:27:15.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是-vdom"><a href="#一、什么是-vdom" class="headerlink" title="一、什么是 vdom"></a>一、什么是 vdom</h2><ul><li>用 <code>JS</code> 模拟 <code>DOM</code> 结构</li><li><code>DOM</code> 变化的对比，放在 <code>JS</code> 层来做</li><li>提高重绘性能</li></ul><h2 id="二、设计一个需求场景"><a href="#二、设计一个需求场景" class="headerlink" title="二、设计一个需求场景"></a>二、设计一个需求场景</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ecb5ff293ddc8aed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>用jQuery实现</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-68270e52c16db126.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-f6538e3e5d70378a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-4245c22334b69ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>遇到的问题</strong></p><ul><li>DOM 操作是“昂贵”的，js 运行效率高</li><li>尽量减少 DOM 操作，而不是“推倒重来”</li><li>项目越复杂，影响就越严重</li><li>vdom 即可解决这个问题</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-e6482808654c0d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="三、vdom-的如何应用，核心-API-是什么"><a href="#三、vdom-的如何应用，核心-API-是什么" class="headerlink" title="三、vdom 的如何应用，核心 API 是什么"></a>三、vdom 的如何应用，核心 API 是什么</h2><p><strong>什么是 vdom</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-cd7999ff2c9f675c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>介绍 snabbdom</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6315c360edc1b4af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-06a5989e70e0a367.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>介绍 snabbdom - h 函数</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-6f5499e3221909fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>介绍 snabbdom - patch 函数</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ddd86c5acbcc2c1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>重做jQuery的demo</strong></p><ul><li>使用 <code>data</code>生成 <code>vnode</code></li><li>第一次渲染，将 <code>vnode</code> 渲染到 <code>#container</code>中</li><li>并将 <code>vnode</code> 缓存下来</li><li>修改 <code>data</code> 之后，用新 <code>data</code> 生成 <code>newVnode</code></li><li>将 <code>vnode</code> 和 <code>newVnode</code> 对比</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-66ffa5d864b85710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>核心 API</strong></p><ul><li><code>h(‘&lt;标签名&gt;’, {…属性…}, […子元素…])</code></li><li><code>h(‘&lt;标签名&gt;’, {…属性…}, ‘….’)</code></li><li><code>patch(container, vnode)</code></li><li><code>patch(vnode, newVnode)</code></li></ul><h2 id="四、介绍一下-diff-算法"><a href="#四、介绍一下-diff-算法" class="headerlink" title="四、介绍一下 diff 算法"></a>四、介绍一下 diff 算法</h2><h3 id="4-1-vdom-为何使用-diff-算法"><a href="#4-1-vdom-为何使用-diff-算法" class="headerlink" title="4.1 vdom 为何使用 diff 算法"></a>4.1 vdom 为何使用 diff 算法</h3><ul><li>DOM 操作是“昂贵”的，因此尽量减少 DOM 操作</li><li>找出本次 DOM 必须更新的节点来更新，其他的不更新</li><li>这个“找出”的过程，就需要 diff 算法</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-20f2d2d895fd2e52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>patch(container, vnode)</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-2f58b6165b164eb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-58e4ff61b032df41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>演示过程</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-998b7db0afe63fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-ee8fc075196cdbcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-0480ea04b8e028a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-d4dd9e91b9397a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="4-2-diff-实现过程"><a href="#4-2-diff-实现过程" class="headerlink" title="4.2 diff 实现过程"></a>4.2 diff 实现过程</h3><ul><li><code>patch(container, vnode)</code> 和 <code>patch(vnode, newVnode)</code></li><li><code>createElment</code></li><li><code>updateChildren</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是-vdom&quot;&gt;&lt;a href=&quot;#一、什么是-vdom&quot; class=&quot;headerlink&quot; title=&quot;一、什么是 vdom&quot;&gt;&lt;/a&gt;一、什么是 vdom&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;JS&lt;/code&gt; 模拟 &lt;code&gt;DOM&lt;/
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="Javascript" scheme="https://ru23.com/tags/Javascript/"/>
    
      <category term="虚拟DOM" scheme="https://ru23.com/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
  </entry>
  
  <entry>
    <title>jQuery的deferred对象详解</title>
    <link href="https://ru23.com/note/d841583b.html"/>
    <id>https://ru23.com/note/d841583b.html</id>
    <published>2018-10-20T13:50:43.000Z</published>
    <updated>2018-10-27T09:27:15.533Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载于互联网</p></blockquote><h2 id="一、什么是deferred对象？"><a href="#一、什么是deferred对象？" class="headerlink" title="一、什么是deferred对象？"></a>一、什么是deferred对象？</h2><ul><li><p>开发网站的过程中，我们经常遇到某些耗时很长的javascript操作。其中，既有异步的操作（比如ajax读取服务器数据），也有同步的操作（比如遍历一个大型数组），它们都不是立即能得到结果的。</p></li><li><p>通常的做法是，为它们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。</p></li><li><p>但是，在回调函数方面，<code>jQuery</code>的功能非常弱。为了改变这一点，jQuery开发团队就设计了<code>deferred</code>对象。</p></li><li><p>简单说，<code>deferred</code>对象就是<code>jQuery</code>的回调函数解决方案。在英语中，<code>defer</code>的意思是”延迟”，所以<code>deferred</code>对象的含义就是”延迟”到未来某个点再执行。</p></li><li><p>它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。它的主要功能，可以归结为四点</p></li></ul><h2 id="二、ajax操作的链式写法"><a href="#二、ajax操作的链式写法" class="headerlink" title="二、ajax操作的链式写法"></a>二、ajax操作的链式写法</h2><blockquote><p>首先，回顾一下jQuery的ajax操作的传统写法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"></span><br><span class="line">　　　　url: <span class="string">"test.html"</span>,</span><br><span class="line"></span><br><span class="line">　　　　success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(<span class="string">"哈哈，成功了！"</span>);</span><br><span class="line">　　　　&#125;,</span><br><span class="line"></span><br><span class="line">　　　　error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(<span class="string">"出错啦！"</span>);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>在上面的代码中，<code>$.ajax()</code>接受一个对象参数，这个对象包含两个方法：<code>success</code>方法指定操作成功后的回调函数，<code>error</code>方法指定操作失败后的回调函数。</p></li><li><p><code>$.ajax()</code>操作完成后，如果使用的是低于<code>1.5.0</code>版本的<code>jQuery</code>，返回的是<code>XHR</code>对象，你没法进行链式操作；如果高于<code>1.5.0</code>版本，返回的是<code>deferre</code>d对象，可以进行链式操作。</p></li><li><p>现在，新的写法是这样的：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">"test.html"</span>)</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，done()相当于success方法，fail()相当于error方法。采用链式写法以后，代码的可读性大大提高</p></blockquote><h2 id="三、指定同一操作的多个回调函数"><a href="#三、指定同一操作的多个回调函数" class="headerlink" title="三、指定同一操作的多个回调函数"></a>三、指定同一操作的多个回调函数</h2><ul><li><p><code>deferred</code>对象的一大好处，就是它允许你自由添加多个回调函数。</p></li><li><p>还是以上面的代码为例，如果ajax操作成功后，除了原来的回调函数，我还想再运行一个回调函数，怎么办？</p></li><li><p>很简单，直接把它加在后面就行了。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　$.ajax(<span class="string">"test.html"</span>)</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>);&#125; )</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125; )</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"第二个回调函数！"</span>);&#125; );</span><br></pre></td></tr></table></figure><ul><li>回调函数可以添加任意多个，它们按照添加顺序执行</li></ul><h2 id="四、为多个操作指定回调函数"><a href="#四、为多个操作指定回调函数" class="headerlink" title="四、为多个操作指定回调函数"></a>四、为多个操作指定回调函数</h2><ul><li><p><code>deferred</code>对象的另一大好处，就是它允许你为多个事件指定一个回调函数，这是传统写法做不到的。</p></li><li><p>请看下面的代码，它用到了一个新的方法<code>$.when()</code>：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when($.ajax(<span class="string">"test1.html"</span>), $.ajax(<span class="string">"test2.html"</span>))</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这段代码的意思是，先执行两个操作$.ajax(“test1.html”)和$.ajax(“test2.html”)，如果都成功了，就运行done()指定的回调函数；如果有一个失败或都失败了，就执行fail()指定的回调函数</p></blockquote><h2 id="五、普通操作的回调函数接口（上）"><a href="#五、普通操作的回调函数接口（上）" class="headerlink" title="五、普通操作的回调函数接口（上）"></a>五、普通操作的回调函数接口（上）</h2><ul><li><p><code>deferred</code>对象的最大优点，就是它把这一套回调函数接口，从ajax操作扩展到了所有操作。也就是说，任何一个操作—-不管是ajax操作还是本地操作，也不管是异步操作还是同步操作—-都可以使用<code>deferred</code>对象的各种方法，指定回调函数。</p></li><li><p>我们来看一个具体的例子。假定有一个很耗时的操作<code>wait</code>：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>我们为它指定回调函数，应该怎么做呢？</p></li><li><p>很自然的，你会想到，可以使用$.when()：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when(wait())</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><ul><li>但是，这样写的话，done()方法会立即执行，起不到回调函数的作用。原因在于$.when()的参数只能是deferred对象，所以必须对wait()进行改写：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">　<span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个deferred对象</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.resolve(); <span class="comment">// 改变deferred对象的执行状态</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> dtd;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure><ul><li>现在，<code>wait()</code>函数返回的是<code>deferred</code>对象，这就可以加上链式操作了。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when(wait(dtd))</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><ul><li><code>wait()</code>函数运行完，就会自动运行<code>done()</code>方法指定的回调函数。</li></ul><h2 id="六、deferred-resolve-方法和deferred-reject-方法"><a href="#六、deferred-resolve-方法和deferred-reject-方法" class="headerlink" title="六、deferred.resolve()方法和deferred.reject()方法"></a>六、deferred.resolve()方法和deferred.reject()方法</h2><blockquote><p>jQuery规定，deferred对象有三种执行状态—-未完成，已完成和已失败。如果执行状态是”已完成”（resolved）,deferred对象立刻调用done()方法指定的回调函数；如果执行状态是”已失败”，调用fail()方法指定的回调函数；如果执行状态是”未完成”，则继续等待，或者调用progress()方法指定的回调函数（jQuery1.7版本添加）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个Deferred对象</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.reject(); <span class="comment">// 改变Deferred对象的执行状态</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> dtd;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　$.when(wait(dtd))</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><h2 id="七、小结：deferred对象的方法"><a href="#七、小结：deferred对象的方法" class="headerlink" title="七、小结：deferred对象的方法"></a>七、小结：deferred对象的方法</h2><ul><li><p>（1） <code>$.Deferred()</code> 生成一个<code>deferred</code>对象。</p></li><li><p>（2） <code>deferred.done()</code> 指定操作成功时的回调函数</p></li><li><p>（3） <code>deferred.fail()</code> 指定操作失败时的回调函数</p></li><li><p>（4） <code>deferred.promise()</code> </p><blockquote><p>没有参数时，返回一个新的<code>deferred</code>对象，该对象的运行状态无法被改变；接受参数时，作用为在参数对象上部署<code>deferred</code>接口。</p></blockquote></li><li><p>（5） <code>deferred.resolve()</code> </p></li></ul><blockquote><p>手动改变<code>deferred</code>对象的运行状态为”已完成”，从而立即触发done()方法。</p></blockquote><ul><li>（6）<code>deferred.reject()</code> </li></ul><blockquote><p>这个方法与<code>deferred.resolve()</code>正好相反，调用后将<code>deferred</code>对象的运行状态变为”已失败”，从而立即触发<code>fail()</code>方法。</p></blockquote><ul><li>（7） <code>$.when()</code> 为多个操作指定回调函数。</li></ul><blockquote><p>除了这些方法以外，<code>deferred</code>对象还有二个重要方法，上面的教程中没有涉及到。</p></blockquote><ul><li>（8）<code>deferred.then()</code></li></ul><p><strong>有时为了省事，可以把done()和fail()合在一起写，这就是then()方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　$.when($.ajax( &quot;/main.php&quot; ))</span><br><span class="line"></span><br><span class="line">　　.then(successFunc, failureFunc );</span><br></pre></td></tr></table></figure><blockquote><p>如果<code>then()</code>有两个参数，那么第一个参数是<code>done()</code>方法的回调函数，第二个参数是<code>fail()</code>方法的回调方法。如果<code>then()</code>只有一个参数，那么等同于<code>done()</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、什么是deferred对象？&quot;&gt;&lt;a href=&quot;#一、什么是deferred对象？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是deferred对象？&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="jQuery" scheme="https://ru23.com/tags/jQuery/"/>
    
      <category term="Deferred" scheme="https://ru23.com/tags/Deferred/"/>
    
  </entry>
  
  <entry>
    <title>韦博嗨英语微信端（H5开发）小结</title>
    <link href="https://ru23.com/note/7bec924e.html"/>
    <id>https://ru23.com/note/7bec924e.html</id>
    <published>2018-10-19T08:50:43.000Z</published>
    <updated>2018-10-27T09:27:15.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、deepLink跳转"><a href="#一、deepLink跳转" class="headerlink" title="一、deepLink跳转"></a>一、deepLink跳转</h2><h3 id="1-1-快应用中呼起deepLink"><a href="#1-1-快应用中呼起deepLink" class="headerlink" title="1.1 快应用中呼起deepLink"></a>1.1 快应用中呼起deepLink</h3><p><strong>第一步：检测是安装了app</strong></p><blockquote><p>前提条件：需要知道app的包名</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断用户是否安装了app</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkInstalledApp = <span class="function">(<span class="params">pkg_name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'@system.package'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    pkg.hasInstalled(&#123;</span><br><span class="line">      package: pkg_name,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        resolve(data.result) <span class="comment">//返回true、false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span> (<span class="params">data, code</span>) </span>&#123;</span><br><span class="line">        reject(code)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：调起deepLink</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pkg = <span class="string">'com.newsqq.fda'</span> <span class="comment">// 传入包名</span></span><br><span class="line"><span class="keyword">let</span> deep_link = <span class="string">''</span> <span class="comment">// 跳转到app的地址</span></span><br><span class="line"><span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">checkInstalledApp(pkg).then(<span class="function"><span class="params">hasInstalledApp</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 用户已经安装了app, deep_link直接跳转</span></span><br><span class="line">    <span class="keyword">if</span>(hasInstalledApp &amp;&amp; deep_link)&#123;</span><br><span class="line">      params = &#123;<span class="attr">uri</span>:deep_link&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 否则跳转到H5地址</span></span><br><span class="line">      params = &#123;</span><br><span class="line">        uri:<span class="string">'Webview'</span>,<span class="comment">//对应于manifest中的配置</span></span><br><span class="line">        params:&#123;</span><br><span class="line">          url,</span><br><span class="line">          title:goods_name</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.$app.$def.router.push(params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-H5页面呼起快应用"><a href="#1-2-H5页面呼起快应用" class="headerlink" title="1.2 H5页面呼起快应用"></a>1.2 <code>H5</code>页面呼起快应用</h3><blockquote><p>引入快应用<a href="https://doc.quickapp.cn/tutorial/platform/url-jump-configuration.html" target="_blank" rel="noopener">官方提供的代码</a>,这里做了一下处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> quickapp = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line">        <span class="built_in">window</span>.appRouter = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, a, o</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a = a || &#123;&#125;,</span><br><span class="line">            o &amp;&amp; (a.__PROMPT__ = <span class="number">1</span>, a.__NAME__ = o),</span><br><span class="line">            n(e, t, a)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">window</span>.installShortcut = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n(<span class="string">"command"</span>, <span class="string">""</span>, &#123;</span><br><span class="line">                type: <span class="string">"shortcut"</span>,</span><br><span class="line">                package: e,</span><br><span class="line">                name: t</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">window</span>.channelReady = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> n = &#123;</span><br><span class="line">                available: <span class="keyword">new</span> <span class="built_in">Function</span>,</span><br><span class="line">                availableTimeout: <span class="number">2e3</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"function"</span> == <span class="keyword">typeof</span> e ? n.available = e: <span class="string">"object"</span> == <span class="keyword">typeof</span> e &amp;&amp;</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">                n = n || &#123;&#125;;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> n) e[t] = n[t]</span><br><span class="line">            &#125; (n, e),</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> n = <span class="string">"http://thefatherofsalmon.com/images"</span>,</span><br><span class="line">                t = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">                <span class="keyword">if</span> (t.style.width = <span class="string">"1px"</span>, t.style.height = <span class="string">"1px"</span>, t.style.display = <span class="string">"none"</span>, n += <span class="string">"/"</span> + <span class="number">1e20</span> * <span class="built_in">Math</span>.random(), t.src = n, <span class="built_in">document</span>.body.appendChild(t), t.complete) e.available.call(<span class="literal">null</span>, !<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    t.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        clearTimeout(a),</span><br><span class="line">                        e.available.call(<span class="literal">null</span>, !<span class="number">0</span>)</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">var</span> a = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        e.available.call(<span class="literal">null</span>, !<span class="number">1</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    e.availableTimeout)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; (n)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">e, n, t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="string">"http://thefatherofsalmon.com/"</span>,</span><br><span class="line">            o = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (e &amp;&amp; (a = a + <span class="string">"?i="</span> + e), n &amp;&amp; (a = a + <span class="string">"&amp;p="</span> + n),</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!e) <span class="keyword">return</span> ! <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">var</span> n = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (n <span class="keyword">in</span> e) <span class="keyword">return</span> ! <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ! <span class="number">0</span></span><br><span class="line">            &#125; (t)) &#123;</span><br><span class="line">                <span class="keyword">var</span> i = <span class="built_in">window</span>.location.search;</span><br><span class="line">                i.indexOf(<span class="string">"?"</span>) &gt; <span class="number">-1</span> &amp;&amp; (o = i.substr(<span class="number">1</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                o = <span class="built_in">Object</span>.keys(t).map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> e + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(t[e])</span><br><span class="line">                &#125;).join(<span class="string">"&amp;"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">""</span> !== o &amp;&amp; (a = a + <span class="string">"&amp;a="</span> + <span class="built_in">encodeURIComponent</span>(o));</span><br><span class="line">            <span class="keyword">var</span> l = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">            l.src = a,</span><br><span class="line">            l.style.width = <span class="string">"1px"</span>,</span><br><span class="line">            l.style.height = <span class="string">"1px"</span>,</span><br><span class="line">            l.style.display = <span class="string">"none"</span>,</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(l)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      appRouter:<span class="built_in">window</span>.appRouter,</span><br><span class="line">      installShortcut:<span class="built_in">window</span>.installShortcut,</span><br><span class="line">      channelReady:<span class="built_in">window</span>.channelReady</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>或者在网页中嵌入以下 <code>js</code>，支持<code>HTTP</code>与<code>HTTPS</code>访问。上面的代码和这个一样的，只是做了一下模块化处理</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//statres.quickapp.cn/quickapp/js/routerinline.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>调起应用</strong></p><blockquote><p><code>appRouter(packageName, path, params, confirm)</code>，<a href="https://doc.quickapp.cn/tutorial/platform/url-jump-configuration.html" target="_blank" rel="noopener">更多详情</a></p></blockquote><p><strong>第一步：检测手机型号</strong></p><blockquote><p>只有在对应的应用商店上架才可以打开</p></blockquote><ul><li>主要用到了这个库 <a href="https://github.com/hgoebl/mobile-detect.js" target="_blank" rel="noopener">https://github.com/hgoebl/mobile-detect.js</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测手机型号</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkPhone = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MobileDetect = <span class="built_in">require</span>(<span class="string">'mobile-detect'</span>)</span><br><span class="line">  <span class="keyword">let</span> device_type = navigator.userAgent;<span class="comment">//获取userAgent信息</span></span><br><span class="line">  <span class="keyword">let</span> md = <span class="keyword">new</span> MobileDetect(device_type);<span class="comment">//初始化mobile-detect</span></span><br><span class="line">  <span class="keyword">let</span> os = md.os();<span class="comment">//获取系统</span></span><br><span class="line">  <span class="keyword">let</span> model = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断数组中是否包含某字符串</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">needle</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>[i].indexOf(needle) &gt; <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (os == <span class="string">"iOS"</span>) &#123;<span class="comment">//ios系统的处理</span></span><br><span class="line">      os = md.os() + md.version(<span class="string">"iPhone"</span>);</span><br><span class="line">      model = md.mobile();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (os == <span class="string">"AndroidOS"</span>) &#123;<span class="comment">//Android系统的处理</span></span><br><span class="line">      os = md.os() + md.version(<span class="string">"Android"</span>);</span><br><span class="line">      <span class="keyword">var</span> sss = device_type.split(<span class="string">";"</span>);</span><br><span class="line">      <span class="keyword">var</span> i = sss.contains(<span class="string">"Build/"</span>);</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          model = sss[i].substring(<span class="number">0</span>, sss[i].indexOf(<span class="string">"Build/"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">let</span> phoneModel = model.toLocaleLowerCase()</span><br><span class="line">      <span class="comment">//判断是否是oppo</span></span><br><span class="line">      <span class="keyword">if</span>(phoneModel.indexOf(<span class="string">'oppo'</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：调起快应用</strong></p><blockquote><p>以呼起<code>OPPO</code>手机下已经上架的快应用为例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// H5页面中呼起快应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// page你所在的页面标志，goods_id是传递的参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> openQuickapp = <span class="function">(<span class="params">&#123;page,goods_id&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appRouter = <span class="function">(<span class="params">path,params=&#123;&#125;</span>)=&gt;</span>quickapp.appRouter(<span class="string">'com.yesdat.poem'</span>,<span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>,params)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检测OPPO手机下呼起唐诗三百首快应用首页</span></span><br><span class="line">  <span class="keyword">if</span>(!checkPhone())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(page == <span class="string">'home'</span>)&#123;</span><br><span class="line">    appRouter(<span class="string">'Home'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(page == <span class="string">'detail'</span>)&#123;</span><br><span class="line">    appRouter(<span class="string">'Detail'</span>,&#123;goods_id&#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(page == <span class="string">'search'</span>)&#123;</span><br><span class="line">    appRouter(<span class="string">'Search'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-H5页面呼起deepLink"><a href="#1-3-H5页面呼起deepLink" class="headerlink" title="1.3 H5页面呼起deepLink"></a>1.3 H5页面呼起deepLink</h3><blockquote><p>H5 页检测手机是否安装 app 相关流程</p></blockquote><p><strong>uri获取</strong></p><blockquote><p>这里的<code>uri</code>,指得就是通过 <code>Url scheme</code> 来实现的<code>H5</code>与安卓、苹果应用之间的跳转链接。</p></blockquote><p>我们需要找到客户端的同事，来获取如下格式的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx://&apos;跳转页面&apos;/&apos;携带参数&apos;</span><br></pre></td></tr></table></figure><blockquote><p>简单解释下<code>url scheme</code>。</p></blockquote><ul><li><code>url</code> 就是我们平常理解的链接。</li><li><code>scheme</code> 是指<code>url</code>链接中的最初位置，就是上边链接中 <code>‘xx’</code>的位置。</li><li>详细介绍可以看这里：<a href="https://sspai.com/post/31500" target="_blank" rel="noopener">使用url scheme详解</a></li></ul><blockquote><p>用这个链接我们可以跳转到 应用中的某个页面,并可以携带一定的参数</p></blockquote><p><strong>具体实现</strong></p><p><strong>第一步：通过iframe打开App</strong></p><blockquote><p><code>Android</code>平台则各个<code>app</code>厂商差异很大，比如<code>Chrome</code>从25及以后就不再支持通过<code>js</code>触发（非用户点击），所以这里使用<code>iframe src</code>地址等来触发<code>scheme</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在iframe 中打开APP</span></span><br><span class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">ifr.src = openUrl;</span><br><span class="line">ifr.style.display = <span class="string">'none'</span>;</span><br></pre></td></tr></table></figure><p><strong>第二步： 判断是否安装某应用</strong></p><blockquote><p>原理：若通过<code>url scheme</code> 打开<code>app</code>成功，那么当前<code>h5</code>会进入后台，通过计时器会有明显延迟。利用时间来判断。</p></blockquote><ul><li>由于安卓手机,页面进入后台，定时器<code>setTimeout</code>仍会不断运行，所以这里使用<code>setInterval</code>,较小间隔时间重复多次。来根据累计时间判断。</li><li>根据返回<code>true</code> <code>false</code>来判断是否安装。</li><li><code>document.hidden</code>对大于<code>4.4</code> <code>webview</code>支持很好，为页面可见性<code>api</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测app是否安装 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hasInstalledApp = <span class="function">(<span class="params">deepLink</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> timeout, t = <span class="number">1000</span>, hasApp = <span class="literal">true</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasApp) &#123;</span><br><span class="line">          resolve(<span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(ifr);</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> t1 = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">      ifr.setAttribute(<span class="string">'src'</span>, deepLink);</span><br><span class="line">      ifr.setAttribute(<span class="string">'style'</span>, <span class="string">'display:none'</span>);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line"></span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> t2 = <span class="built_in">Date</span>.now();</span><br><span class="line">         <span class="keyword">if</span> (!t1 || t2 - t1 &lt; t + <span class="number">100</span>) &#123;</span><br><span class="line">           hasApp = <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, t);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deep_link与h5链接跳转区分</span></span><br><span class="line"><span class="keyword">if</span>(deepLink)&#123;</span><br><span class="line">Toast.loading(<span class="string">'正在跳转中...'</span>,<span class="number">0</span>)</span><br><span class="line">hasInstalledApp(deepLink).then(<span class="function"><span class="params">hasInstall</span>=&gt;</span>&#123;</span><br><span class="line">Toast.hide()</span><br><span class="line"> <span class="keyword">if</span>(!hasInstall)&#123;<span class="comment">//未安装 直接跳H5</span></span><br><span class="line">   <span class="built_in">window</span>.location.href = h5Url</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.location.href = h5Url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、剪贴板分享"><a href="#二、剪贴板分享" class="headerlink" title="二、剪贴板分享"></a>二、剪贴板分享</h2><blockquote><p>主要是使用到<code>clipboard</code>简化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ClipboardJS <span class="keyword">from</span> <span class="string">'clipboard'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    showShare = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//实例化 ClipboardJS对象;</span></span><br><span class="line">        <span class="keyword">const</span> copyBtn = <span class="keyword">new</span> ClipboardJS(<span class="string">'.copyBtn'</span>);</span><br><span class="line">        </span><br><span class="line">        copyBtn.on(<span class="string">"success"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 复制成功</span></span><br><span class="line">        Toast.info(<span class="string">'复制成功，可分享到微信、浏览器打开'</span>,<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        copyBtn.on(<span class="string">"error"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//复制失败；</span></span><br><span class="line">            Toast.fail(<span class="string">`复制失败<span class="subst">$&#123;e.action&#125;</span>`</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制功能：需要复制的文本内容传递data-clipboard-text，定义类copyBtn用于实例化 </span></span><br><span class="line">&lt;Flex.Item</span><br><span class="line">data-clipboard-text=&#123;<span class="built_in">window</span>.location.href&#125;</span><br><span class="line">className=<span class="string">"copyBtn"</span></span><br><span class="line">onClick=&#123;()=&gt;showShare()&#125;&gt;</span><br><span class="line">&lt;IconWrapper&gt;<span class="xml"><span class="tag">&lt;<span class="name">IoMdShare</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">IconWrapper</span>&gt;</span></span>复制</span><br><span class="line">&lt;<span class="regexp">/Flex.Item&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多使用方式详情：<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">https://github.com/zenorocha/clipboard.js</a></p></blockquote><h2 id="三、加载更多"><a href="#三、加载更多" class="headerlink" title="三、加载更多"></a>三、加载更多</h2><blockquote><p><code>h5</code>页面需要分页加载优化，<code>react</code>中为例</p></blockquote><p><strong>第一步：封装一个loadMore组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoadMoreWrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  border-top: 1px dashed #ddd;</span></span><br><span class="line"><span class="string">  .load-more&#123;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    padding: 10px 0;</span></span><br><span class="line"><span class="string">    background-color: #fff;</span></span><br><span class="line"><span class="string">    color: #999;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadMore</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">    &#125;</span><br><span class="line">    _loadMoreHandle()&#123;</span><br><span class="line">        <span class="comment">// 执行传递过来的loadMoreData</span></span><br><span class="line">        <span class="keyword">this</span>.props.loadMoreFn()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;hasMore&#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;LoadMoreWrapper&gt;</span><br><span class="line">              &lt;div className=<span class="string">"load-more"</span> ref=<span class="string">'wrapper'</span>&gt;</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">this</span>.props.isLoadingMore &amp;&amp; hasMore</span><br><span class="line">                     ? <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;<span class="name">Spin</span> <span class="attr">tip</span>=<span class="string">"Loading..."</span>/&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     : (hasMore?<span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;this._loadMoreHandle.bind(this)&#125;</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">span</span>&gt;</span>:<span class="tag">&lt;<span class="name">span</span>&gt;</span>没有更多了<span class="tag">&lt;/<span class="name">span</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">                 &#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/LoadMoreWrapper&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    componentDidMount()&#123;</span></span><br><span class="line"><span class="regexp">        const wrapper = this.refs.wrapper;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        let timeoutId;</span></span><br><span class="line"><span class="regexp">        window.addEventListener('scroll',()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">            if (this.props.isLoadingMore) return;</span></span><br><span class="line"><span class="regexp">            if(timeoutId) clearTimeout(timeoutId);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            timeoutId = setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 获取加载更多这个节点距离顶部的距离</span></span><br><span class="line"><span class="regexp">                const top = wrapper.getBoundingClientRect().top;</span></span><br><span class="line"><span class="regexp">                const windowHeight = window.screen.height;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                if (top &amp;&amp; top &lt; windowHeight) &#123;</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/ 当wrapper已经在页面可视范围之内触发</span></span><br><span class="line"><span class="regexp">                    this.props.loadMoreFn();</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;,50)</span></span><br><span class="line"><span class="regexp">        &#125;,false)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">LoadMore.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  isLoadingMore:PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  hasMore:PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  loadMoreFn:PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default LoadMore</span></span><br></pre></td></tr></table></figure><p><strong>第二步：处理分页</strong></p><blockquote><p>需要后台支持分页</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">state = &#123;</span><br><span class="line">goodsList:[], <span class="comment">// 存储列表信息</span></span><br><span class="line">hasMore:<span class="literal">true</span>, <span class="comment">// 记录当前状态下还有没有更多的数据可供加载</span></span><br><span class="line">isLoadingMore:<span class="literal">false</span>, <span class="comment">//记录当前状态下，是加载中，还是点击可加载更多</span></span><br><span class="line">page:<span class="number">1</span>, <span class="comment">//页码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"><span class="comment">// 获取首屏数据</span></span><br><span class="line"><span class="keyword">this</span>.props.fetchTopGoods(&#123;<span class="attr">page</span>:<span class="keyword">this</span>.state.page&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载更多</span></span><br><span class="line"> _loadMoreData()&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;topGoods&#125; = <span class="keyword">this</span>.props</span><br><span class="line"><span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">_this.setState(&#123;</span><br><span class="line">isLoadingMore:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(_this.state.hasMore)&#123;</span><br><span class="line">_this.setState(&#123;<span class="attr">page</span>:++_this.state.page&#125;)<span class="comment">// 页码累加</span></span><br><span class="line"></span><br><span class="line">_this.props.fetchGoods(&#123;<span class="attr">page</span>:_this.state.page&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = res.goods.list</span><br><span class="line"><span class="keyword">let</span> dataList = _this.state.goodsList</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dataList.length)&#123;</span><br><span class="line">dataList = topGoods.data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data &amp;&amp; data.length &lt; PAGE_SIZE) &#123;</span><br><span class="line">_this.setState(&#123;</span><br><span class="line">hasMore:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">_this.setState(&#123;</span><br><span class="line">goodsList:dataList.concat(data),</span><br><span class="line">hasMore:<span class="literal">true</span>,</span><br><span class="line">isLoadingMore:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">isLoadingMore:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LoadMore</span> <span class="attr">isLoadingMore</span>=<span class="string">&#123;this.state.isLoadingMore&#125;</span> <span class="attr">hasMore</span>=<span class="string">&#123;this.state.hasMore&#125;</span> <span class="attr">loadMoreFn</span>=<span class="string">&#123;this._loadMoreData.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、搜索历史"><a href="#四、搜索历史" class="headerlink" title="四、搜索历史"></a>四、搜索历史</h2><p><strong>封装cache</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">'good-storage'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SEARCH_KEY = <span class="string">'__search__'</span></span><br><span class="line"><span class="keyword">const</span> SEARCH_MAX_LEN = <span class="number">15</span> <span class="comment">// 最大保存15条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索条目更新到数组中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertArray</span>(<span class="params">arr, val, compare, maxLen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare)</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  arr.unshift(val)</span><br><span class="line">  <span class="keyword">if</span> (maxLen &amp;&amp; arr.length &gt; maxLen) &#123;</span><br><span class="line">    arr.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数组中移除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteFromArray</span>(<span class="params">arr, compare</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare)</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法：保存搜索关键词 query传入的关键词</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveSearch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> searches = storage.get(SEARCH_KEY, [])</span><br><span class="line">  insertArray(searches, query, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item === query</span><br><span class="line">  &#125;, SEARCH_MAX_LEN)</span><br><span class="line">  storage.set(SEARCH_KEY, searches)</span><br><span class="line">  <span class="keyword">return</span> searches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法: 逐条删除搜索记录 query传入的历史记录</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteSearch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> searches = storage.get(SEARCH_KEY, [])</span><br><span class="line">  deleteFromArray(searches, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item === query</span><br><span class="line">  &#125;)</span><br><span class="line">  storage.set(SEARCH_KEY, searches)</span><br><span class="line">  <span class="keyword">return</span> searches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露方法: 清空所有历史</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clearSearch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  storage.remove(SEARCH_KEY)</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露方法: 加载所有历史记录</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadSearch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> storage.get(SEARCH_KEY, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-34867938a0263a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="search-history" title="">                </div>                <div class="image-caption">search-history</div>            </figure><h2 id="五、骨架屏的应用"><a href="#五、骨架屏的应用" class="headerlink" title="五、骨架屏的应用"></a>五、骨架屏的应用</h2><blockquote><p>封装一个骨架屏组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    .skeleton &#123;</span></span><br><span class="line"><span class="string">      display: flex;</span></span><br><span class="line"><span class="string">      padding: 10px;</span></span><br><span class="line"><span class="string">      width: 380px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton .skeleton-head,</span></span><br><span class="line"><span class="string">    .skeleton .skeleton-title,</span></span><br><span class="line"><span class="string">    .skeleton .skeleton-content &#123;</span></span><br><span class="line"><span class="string">        background: rgba(220, 228, 232, 0.41);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .skeleton .skeleton-head&#123;</span></span><br><span class="line"><span class="string">      padding:20px;</span></span><br><span class="line"><span class="string">      margin-right:10px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton-body &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton-title &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        height: 15px;</span></span><br><span class="line"><span class="string">        transform-origin: left;</span></span><br><span class="line"><span class="string">        animation: skeleton-stretch .5s linear infinite alternate;</span></span><br><span class="line"><span class="string">        border-radius: 5px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .skeleton-content &#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        height: 15px;</span></span><br><span class="line"><span class="string">        margin-top: 10px;</span></span><br><span class="line"><span class="string">        transform-origin: left;</span></span><br><span class="line"><span class="string">        animation: skeleton-stretch .5s -.3s linear infinite alternate;</span></span><br><span class="line"><span class="string">        border-radius: 5px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @keyframes skeleton-stretch &#123;</span></span><br><span class="line"><span class="string">        from &#123;</span></span><br><span class="line"><span class="string">            transform: scalex(1);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        to &#123;</span></span><br><span class="line"><span class="string">            transform: scalex(.3);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Skeleton</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">const</span> arr = []</span><br><span class="line">        <span class="keyword">if</span>(count)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            arr.push(&#123;&#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Wrapper&gt;</span><br><span class="line">              &#123;arr.map(<span class="function"><span class="params">v</span>=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"skeleton"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"skeleton-head"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;div className="skeleton-body"&gt;</span><br><span class="line">                   &lt;div className="skeleton-title"&gt;&lt;/div&gt;</span><br><span class="line">                   &lt;div className="skeleton-content"&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)&#125;</span><br><span class="line">            &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Skeleton.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  count:PropTypes.number.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// count 显示的条数</span><br><span class="line">&lt;Skeleton count=&#123;10&#125;/&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1480597-497efe18e83ceac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Skeleton" title="">                </div>                <div class="image-caption">Skeleton</div>            </figure><ul><li><code>H5</code>端在线体验 <a href="http://goods.yesdat.com" target="_blank" rel="noopener">http://goods.yesdat.com</a></li><li>快应用端在<code>OPPO</code>应用商店搜“好物”（标有快应用的那个）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、deepLink跳转&quot;&gt;&lt;a href=&quot;#一、deepLink跳转&quot; class=&quot;headerlink&quot; title=&quot;一、deepLink跳转&quot;&gt;&lt;/a&gt;一、deepLink跳转&lt;/h2&gt;&lt;h3 id=&quot;1-1-快应用中呼起deepLink&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Front-End" scheme="https://ru23.com/categories/Front-End/"/>
    
    
      <category term="Javascript" scheme="https://ru23.com/tags/Javascript/"/>
    
      <category term="微信开发" scheme="https://ru23.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>vuex学习笔记</title>
    <link href="https://ru23.com/note/caef00ab.html"/>
    <id>https://ru23.com/note/caef00ab.html</id>
    <published>2018-10-17T09:25:59.000Z</published>
    <updated>2018-10-27T09:27:15.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>组件是Vue最强大的功能之一，而组件实例的作用域是相互独立的，意味着不同组件之间的数据是无法相互使用。组件间如何传递数据就显得至关重要，这篇文章主要是介绍Vuex。尽量以通俗易懂的实例讲述这其中的差别，希望对小伙伴有些许帮助。</p></blockquote><h3 id="一、Vuex-是什么？"><a href="#一、Vuex-是什么？" class="headerlink" title="一、Vuex 是什么？"></a>一、Vuex 是什么？</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="二、什么是“状态管理模式”？"><a href="#二、什么是“状态管理模式”？" class="headerlink" title="二、什么是“状态管理模式”？"></a>二、什么是“状态管理模式”？</h3><p>一个简单的 Vue 计数应用开始：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// view</span></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// actions</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment () &#123;</span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这个状态自管理应用包含以下几个部分：</p><p><code>state</code>，驱动应用的数据源；<br><code>view</code>，以声明方式将 <code>state</code> 映射到视图；<br><code>actions</code>，响应在 <code>view</code> 上的用户输入导致的状态变化。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47031776-3a224900-d1a3-11e8-8d97-a75b1f522555.png" alt="111" title="">                </div>                <div class="image-caption">111</div>            </figure><br><code>state</code> 的数据会在 <code>view</code> 上显示出来，用户会根据 <code>view</code> 上的内容进行操作，从而触发 <code>actions</code>，接着再去影响 <code>state</code>（vue 是单向数据流的方式驱动的）。</p><p>当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏。下面的图，是把组件的共享状态抽取出来，以一个全局单例模式管理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/47031803-4908fb80-d1a3-11e8-9237-a76a2eb199b4.png" alt="222" title="">                </div>                <div class="image-caption">222</div>            </figure><h3 id="三、核心概念"><a href="#三、核心概念" class="headerlink" title="三、核心概念"></a>三、核心概念</h3><h6 id="1-state"><a href="#1-state" class="headerlink" title="1. state"></a>1. state</h6><p><code>state</code>：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;&#123; $store.state.count &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> console.log(this.$store.state.count)</span></span><br></pre></td></tr></table></figure></p><h6 id="2-getters"><a href="#2-getters" class="headerlink" title="2. getters"></a>2. getters</h6><p><code>getters</code>：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。（getters从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。getters就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。）</p><p>定义getter：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  done(state) &#123;    </span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-mutations"><a href="#3-mutations" class="headerlink" title="3. mutations"></a>3. mutations</h6><p><code>mutations</code>：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>组件通过commit提交mutations的方式来请求改变state<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure></p><p>提交载荷（Payload）<br>mutations方法中是可以传参的，具体用法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 提交载荷 Payload</span></span><br><span class="line">    add(state, n) &#123;</span><br><span class="line">      state.count += n</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'add'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p>######　4.Action<br><code>Action</code>：类似于 <code>mutation</code>，不同在于Action 提交的是 <code>mutation</code>，而不是直接变更状态；<code>Action</code> 可以包含任意异步操作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>不同于<code>mutations</code>使用<code>commit</code>方法，<code>actions</code>使用<code>dispatch</code>方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementAsync'</span>)</span><br></pre></td></tr></table></figure></p><p>context<br>context是与 store 实例具有相同方法和属性的对象。可以通过context.state和context.getters来获取 state 和 getters。<br>以载荷形式分发<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">incrementAsyncWithValue (context, value) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>, value)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementAsyncWithValue'</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><h6 id="5-Module"><a href="#5-Module" class="headerlink" title="5.Module"></a>5.Module</h6><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></p><p>模块的局部状态<br>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,    </span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Vuex计数器的例子：<br>在src目录下创建一个store文件夹。</p><p>store/store.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    show: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    counts: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.count--</span><br><span class="line">    &#125;,</span><br><span class="line">    changVal: <span class="function">(<span class="params">state, v</span>) =&gt;</span> &#123;</span><br><span class="line">      state.show = v</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p>state就是我们的需要的状态，状态的改变只能通过提交mutations,例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">increase() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>带有载荷的提交方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">changObj () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'changVal'</span>, <span class="keyword">this</span>.obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>载荷也可以是一个对象，这样可以提交多个参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">changObj () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'changVal'</span>, &#123;</span><br><span class="line">          key:<span class="string">''</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main.js中引入store.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件中使用<br>在组建可以通过$store.state.count获得状态<br>更改状态只能以提交mutation的方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"store"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;$store.state.count&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increase"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>+<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrease"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>-<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;$store.state.show&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入内容"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"obj"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">"changObj"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clearable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      obj: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    increase() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    decrease() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    changObj () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$store.commit(<span class="string">'changVal'</span>, <span class="keyword">this</span>.obj)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;组件是Vue最强大的功能之一，而组件实例的作用域是相互独立的，意味着不同组件之间的数据是无法相互使用。组件间如何传递数据就显得至关重要，这篇文章主要是介绍Vuex。尽量以通俗易懂的实例讲述这其中的差别，希望对小伙伴有些许帮助。&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vuex" scheme="https://ru23.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>蓝灯导致关闭蓝灯后电脑一直异常的解决方案</title>
    <link href="https://ru23.com/note/11224d78.html"/>
    <id>https://ru23.com/note/11224d78.html</id>
    <published>2018-10-04T09:58:17.000Z</published>
    <updated>2018-10-30T15:00:08.570Z</updated>
    
    <content type="html"><![CDATA[<p>电脑关闭Lantern以后发现qq浏览器都没办法上网，这是应为Lantern未完全退出导致，那关闭蓝灯后不能上网怎么解决呢？下面给大家分享关闭蓝灯不能上网的方法。 </p><p>步骤：</p><p>1、按win+r打开运行窗口，输入regedit，如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/note/img/1.webp" alt="regedit" title="">                </div>                <div class="image-caption">regedit</div>            </figure></p><p>2、注册表找到：HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Connections，然后删除Connections这一目录，如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2.jpg" alt="删除Connections" title="">                </div>                <div class="image-caption">删除Connections</div>            </figure></p><p>以上就是关闭蓝灯后不能上网的解决方法，是不是很简单，有遇到这情况的用户可以参考文中方法进行尝试，希望今天的分享对大家有所帮助。</p><p>作者：binkcheng<br>链接：<a href="https://www.jianshu.com/p/6193b3410342" target="_blank" rel="noopener">https://www.jianshu.com/p/6193b3410342</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;电脑关闭Lantern以后发现qq浏览器都没办法上网，这是应为Lantern未完全退出导致，那关闭蓝灯后不能上网怎么解决呢？下面给大家分享关闭蓝灯不能上网的方法。 &lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;1、按win+r打开运行窗口，输入regedit，如图所示：&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>开发者工具调试网页授权 确认按钮点击无任何反应</title>
    <link href="https://ru23.com/note/86c96dc5.html"/>
    <id>https://ru23.com/note/86c96dc5.html</id>
    <published>2018-10-02T11:07:15.000Z</published>
    <updated>2018-10-27T09:27:15.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/22697565/46324116-7347ae80-c624-11e8-9150-286a68773715.png" alt="qq 20181002084610" title="">                </div>                <div class="image-caption">qq 20181002084610</div>            </figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>开发者工具调试网页授权 确认按钮点击无任何反应！！！<br>V1以上就会有这个问题 很迷 我看其他社区的回答 说的是 点击“获得你的公开信息”那行字大概就可以，应该是显示屏分辨率的问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景：&quot;&gt;&lt;a href=&quot;#场景：&quot; class=&quot;headerlink&quot; title=&quot;场景：&quot;&gt;&lt;/a&gt;场景：&lt;/h3&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbo
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="踩过的坑" scheme="https://ru23.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
      <category term="微信开发" scheme="https://ru23.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>前端开发最全面试题</title>
    <link href="https://ru23.com/note/32ee7fe0.html"/>
    <id>https://ru23.com/note/32ee7fe0.html</id>
    <published>2018-09-30T10:13:33.000Z</published>
    <updated>2018-10-27T09:27:15.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端问题记录"><a href="#前端问题记录" class="headerlink" title="前端问题记录"></a>前端问题记录</h3><ol><li><a href="#html">HTML相关</a></li><li><a href="#css">CSS相关</a></li><li><a href="#javascript">JAVASCRIPT相关</a></li><li><a href="#dom">DOM相关</a></li><li><a href="#http">HTTP相关</a></li><li><a href="#vue">VUE相关</a></li><li><a href="#sort">算法相关</a></li><li><a href="#web">网络安全相关</a></li><li><a href="#webpack">webpack相关</a></li><li><a href="#other">其他</a><h4 id="Html相关"><a href="#Html相关" class="headerlink" title="Html相关"></a>Html相关</h4><h5 id="1-html语义化"><a href="#1-html语义化" class="headerlink" title="1 html语义化"></a><div id="html">1 html语义化</div></h5>意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。<br>注意：<br>1.尽可能少的使用无语义的标签div和span；<br>2.在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；<br>3.不要使用纯样式标签，如：b、font、u等，改用css设置。<br>4.需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；<br>5.使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；<br>6.表单域要用fieldset标签包起来，并用legend标签说明表单的用途；<br>7.每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</li></ol><p>新标签：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/h5%E6%96%B0%E5%85%83%E7%B4%A0.png" alt="h5新元素" title="">                </div>                <div class="image-caption">h5新元素</div>            </figure></p><h5 id="2-meta-viewport相关"><a href="#2-meta-viewport相关" class="headerlink" title="2 meta viewport相关"></a>2 meta viewport相关</h5><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span>  H5标准声明，使用 HTML5 doctype，不区分大小写</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">”en”</span>&gt;</span> 标准的 lang 属性写法</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">’utf-8′</span>&gt;</span>    声明文档使用的字符编码</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”X-UA-Compatible”</span> <span class="attr">content</span>=<span class="string">”IE</span>=<span class="string">edge,chrome</span>=<span class="string">1″/</span>&gt;</span>   优先使用 IE 最新版本和 Chrome</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”description”</span> <span class="attr">content</span>=<span class="string">”不超过150个字符”/</span>&gt;</span>       页面描述</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”keywords”</span> <span class="attr">content</span>=<span class="string">””/</span>&gt;</span>      页面关键词</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”author”</span> <span class="attr">content</span>=<span class="string">”name,</span> <span class="attr">email</span>@<span class="attr">gmail.com</span>”/&gt;</span>    网页作者</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”robots”</span> <span class="attr">content</span>=<span class="string">”index,follow”/</span>&gt;</span>      搜索引擎抓取</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span>&gt;</span> 为移动设备添加 viewport</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-title”</span> <span class="attr">content</span>=<span class="string">”标题”</span>&gt;</span> iOS 设备 begin</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-capable”</span> <span class="attr">content</span>=<span class="string">”yes”/</span>&gt;</span>  添加到主屏后的标题（iOS 6 新增）</span></span><br><span class="line"><span class="xml">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-itunes-app”</span> <span class="attr">content</span>=<span class="string">”app-id</span>=<span class="string">myAppStoreID,</span> <span class="attr">affiliate-data</span>=<span class="string">myAffiliateData,</span> <span class="attr">app-argument</span>=<span class="string">myURL”</span>&gt;</span></span></span><br><span class="line"><span class="xml">添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-status-bar-style”</span> <span class="attr">content</span>=<span class="string">”black”/</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”format-detection”</span> <span class="attr">content</span>=<span class="string">”telphone</span>=<span class="string">no,</span> <span class="attr">email</span>=<span class="string">no”/</span>&gt;</span>  设置苹果工具栏颜色</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”renderer”</span> <span class="attr">content</span>=<span class="string">”webkit”</span>&gt;</span>  启用360浏览器的极速模式(webkit)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”X-UA-Compatible”</span> <span class="attr">content</span>=<span class="string">”IE</span>=<span class="string">edge”</span>&gt;</span>     避免IE使用兼容模式</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Cache-Control”</span> <span class="attr">content</span>=<span class="string">”no-siteapp”</span> /&gt;</span>    不让百度转码</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”HandheldFriendly”</span> <span class="attr">content</span>=<span class="string">”true”</span>&gt;</span>     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”MobileOptimized”</span> <span class="attr">content</span>=<span class="string">”320″</span>&gt;</span>   微软的老式浏览器</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”screen-orientation”</span> <span class="attr">content</span>=<span class="string">”portrait”</span>&gt;</span>   uc强制竖屏</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-orientation”</span> <span class="attr">content</span>=<span class="string">”portrait”</span>&gt;</span>    QQ强制竖屏</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”full-screen”</span> <span class="attr">content</span>=<span class="string">”yes”</span>&gt;</span>              UC强制全屏</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-fullscreen”</span> <span class="attr">content</span>=<span class="string">”true”</span>&gt;</span>       QQ强制全屏</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”browsermode”</span> <span class="attr">content</span>=<span class="string">”application”</span>&gt;</span>   UC应用模式</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-page-mode”</span> <span class="attr">content</span>=<span class="string">”app”</span>&gt;</span>    QQ应用模式</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”msapplication-tap-highlight”</span> <span class="attr">content</span>=<span class="string">”no”</span>&gt;</span>    windows phone 点击无高光</span></span><br><span class="line"><span class="xml">设置页面不缓存</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”pragma”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”cache-control”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”expires”</span> <span class="attr">content</span>=<span class="string">”0″</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-canvas-相关"><a href="#3-canvas-相关" class="headerlink" title="3 canvas 相关"></a>3 canvas 相关</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用前需要获得上下文环境，暂不支持<span class="number">3</span>d</span><br><span class="line">常用api:</span><br><span class="line"><span class="number">1.</span>fillRect(x,y,width,height)实心矩形</span><br><span class="line"><span class="number">2.</span>strokeRect(x,y,width,height)空心矩形</span><br><span class="line"><span class="number">3.</span>fillText(<span class="string">"Hello world"</span>,<span class="number">200</span>,<span class="number">200</span>);实心文字</span><br><span class="line">    <span class="number">4.</span>strokeText(<span class="string">"Hello world"</span>,<span class="number">200</span>,<span class="number">300</span>)空心文字</span><br><span class="line">各种东西！！！</span><br></pre></td></tr></table></figure><h5 id="新标签兼容低版本"><a href="#新标签兼容低版本" class="headerlink" title="新标签兼容低版本"></a>新标签兼容低版本</h5><ol><li>ie9之前版本通过createElement创建html5新标签</li><li>引入html5shiv.js<h4 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a><div id="css">CSS相关</div></h4><h5 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1.盒模型"></a>1.盒模型</h5>1.ie盒模型算上border、padding及自身（不算margin），标准的只算上自身窗体的大小<br>css设置方法如下<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标准模型 */</span></span><br><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:content-box</span>;</span><br><span class="line"> <span class="comment">/*IE模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span><br></pre></td></tr></table></figure></li></ol><p>2.margin、border、padding、content由外到里<br>3.几种获得宽高的方式</p><ul><li>dom.style.width/height<br>　　这种方式只能取到dom元素内联样式所设置的宽高，也就是说如果该节点的样式是在style标签中或外联的CSS文件中设置的话，通过这种方法是获取不到dom的宽高的。</li><li>dom.currentStyle.width/height<br>　　这种方式获取的是在页面渲染完成后的结果，就是说不管是哪种方式设置的样式，都能获取到。但这种方式只有IE浏览器支持。</li><li>window.getComputedStyle(dom).width/height<br>　　这种方式的原理和2是一样的，这个可以兼容更多的浏览器，通用性好一些。</li><li>dom.getBoundingClientRect().width/height<br>　　这种方式是根据元素在视窗中的绝对位置来获取宽高的</li><li>dom.offsetWidth/offsetHeight<br>　　这个就没什么好说的了，最常用的，也是兼容最好的。</li></ul><p>4.拓展 各种获得宽高的方式</p><ul><li>获取屏幕的高度和宽度（屏幕分辨率）：<br>window.screen.height/width</li><li>获取屏幕工作区域的高度和宽度（去掉状态栏）：<br>window.screen.availHeight/availWidth</li><li>网页全文的高度和宽度：<br>document.body.scrollHeight/Width</li><li>滚动条卷上去的高度和向右卷的宽度：<br>document.body.scrollTop/scrollLeft</li><li>网页可见区域的高度和宽度（不加边线）：<br>document.body.clientHeight/clientWidth</li><li>网页可见区域的高度和宽度（加边线）：<br>document.body.offsetHeight/offsetWidth</li></ul><p>5.边距重叠解决方案(BFC)<br>BFC原理</p><ul><li>内部的box会在垂直方向，一个接一个的放置<br>每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）</li><li>box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠</li><li>bfc的区域不会与浮动区域的box重叠</li><li>bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的</li><li>计算bfc高度的时候，浮动元素也会参与计算<br>创建bfc</li><li>float属性不为none（脱离文档流）</li><li>position为absolute或fixed</li><li>display为inline-block,table-cell,table-caption,flex,inine-flex</li><li>overflow不为visible</li><li>根元素<br>demo<figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>上<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">这块margin-bottom:30px;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 给下面这个块添加一个父元素，在父元素上创建bfc --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"overflow:hidden"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>下<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">这块margin-top:50px;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h5 id="css-reset-和-normalize-css-有什么区别"><a href="#css-reset-和-normalize-css-有什么区别" class="headerlink" title="css reset 和 normalize.css 有什么区别"></a>css reset 和 normalize.css 有什么区别</h5><ul><li>两者都是通过重置样式，保持浏览器样式的一致性</li><li>前者几乎为所有标签添加了样式，后者保持了许多浏览器样式，保持尽可能的一致</li><li>后者修复了常见的桌面端和移动端浏览器的bug：包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。</li><li>前者中含有大段的继承链</li><li>后者模块化，文档较前者来说丰富<h5 id="居中方法"><a href="#居中方法" class="headerlink" title="居中方法"></a>居中方法</h5>水平方向上<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">针对<span class="selector-tag">inline</span>, 内联块<span class="selector-tag">inline-block</span>, 内联表<span class="selector-tag">inline-table</span>, <span class="selector-tag">inline-flex</span>元素及<span class="selector-tag">img</span>,<span class="selector-tag">span</span>,<span class="selector-tag">button</span>等元素</span><br><span class="line"><span class="selector-class">.text_div</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不定宽块状元素居中</span><br><span class="line"><span class="selector-class">.text_div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">通过给父元素设置 <span class="selector-tag">float</span>，然后给父元素设置 <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span> 和 <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%，子元素设置 <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span> 和 <span class="selector-tag">left</span>: <span class="selector-tag">-50</span>% 来实现水平居中。</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-center</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>垂直居中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单行内联(<span class="selector-tag">inline-</span>)元素垂直居中 </span><br><span class="line">通过设置内联元素的高度(<span class="selector-tag">height</span>)和行高(<span class="selector-tag">line-height</span>)相等，从而使元素垂直居中。</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text_div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">利用表布局</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex</span>布局</span><br><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    flex-direction: column;//上下排列</span><br><span class="line">    <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">绝对布局方式</span><br><span class="line">已知高度</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; </span><br><span class="line">&#125;</span><br><span class="line">未知高度</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>垂直水平居中根据上方结合<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex</span>方式</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">grid</span>方式</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="css优先级确定"><a href="#css优先级确定" class="headerlink" title="css优先级确定"></a>css优先级确定</h5><ul><li>每个选择器都有权值，权值越大越优先</li><li>继承的样式优先级低于自身指定样式</li><li>！important优先级最高 js也无法修改</li><li>权值相同时，靠近元素的样式优先级高  顺序为内联样式表（标签内部）&gt; 内部样式表（当前文件中）&gt; 外部样式表（外部文件中）<h5 id="bfc内容见盒模型"><a href="#bfc内容见盒模型" class="headerlink" title="bfc内容见盒模型"></a>bfc内容见盒模型</h5><h5 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动"></a>如何清除浮动</h5>不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）</li><li>clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}</li><li>给浮动元素父级设置高度</li><li>父级同时浮动（需要给父级同级元素添加浮动）</li><li>父级设置成inline-block，其margin: 0 auto居中方式失效</li><li>利用br标签的clear属性</li><li>给父级添加overflow:hidden 清除浮动方法</li><li>万能清除法 after伪类 清浮动（现在主流方法，推荐使用）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float_div</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line"><span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float_div</span>&#123;</span><br><span class="line"><span class="attribute">zoom</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h5><p>思路：</p><ol><li>左侧浮动或者绝对定位，然后右侧margin撑开</li><li>使用div包含，然后靠负margin形成bfc</li><li>使用flex<h5 id="画三角形"><a href="#画三角形" class="headerlink" title="画三角形"></a>画三角形</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#item</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">50px</span> solid blue;</span><br><span class="line"><span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="link-import导入css"><a href="#link-import导入css" class="headerlink" title="link @import导入css"></a>link @import导入css</h5><ol><li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li><li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li><li>link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li><li>ink支持使用Javascript控制DOM去改变样式；而@import不支持。<h5 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/animation.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="长宽比方案"><a href="#长宽比方案" class="headerlink" title="长宽比方案"></a>长宽比方案</h5></li><li>使用padding方式结合calc实现</li><li>长宽一项设置百分比另一项aspect-ratio实现（需借助插件实现）<h5 id="display相关"><a href="#display相关" class="headerlink" title="display相关"></a>display相关</h5></li><li>block:div等容器类型</li><li>inline:img span等行内类型</li><li>table系列：将样式变成table类型</li><li>flex:重点把握，非常强大</li><li>grid:同上</li><li>inline-block:可设置宽度，两者间有一点间隙</li><li>inherit:继承父级<h4 id="JavaScript相关"><a href="#JavaScript相关" class="headerlink" title="JavaScript相关"></a><div id="javascript">JavaScript相关</div></h4><h5 id="1-“1”-“2”-“3”-map-parseInt"><a href="#1-“1”-“2”-“3”-map-parseInt" class="headerlink" title="1 [“1”, “2”, “3”].map(parseInt)"></a>1 [“1”, “2”, “3”].map(parseInt)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的<span class="keyword">this</span>值</span><br><span class="line"></span><br><span class="line">其中回调函数接受三个参数 currentValue, index, arrary;</span><br><span class="line"></span><br><span class="line">而题目中, map只传入了回调函数--<span class="built_in">parseInt</span>.</span><br><span class="line"></span><br><span class="line">其次, <span class="built_in">parseInt</span> 只接受两个两个参数 string, radix(基数).  </span><br><span class="line">本题理解来说也就是key与 index </span><br><span class="line"></span><br><span class="line">所以本题即问</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(string, radix)</span><br><span class="line">string必需。要被解析的字符串。</span><br><span class="line">radix 可选。表示要解析的数字的基数。该值介于 <span class="number">2</span> ~ <span class="number">36</span> 之间。</span><br><span class="line">如果省略该参数或其值为 <span class="number">0</span>，则数字将以 <span class="number">10</span> 为基础来解析。如果它以 “<span class="number">0</span>x” 或 “<span class="number">0</span>X” 开头，将以 <span class="number">16</span> 为基数。</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-3-2-1-reduce-Math-pow-reduce-Math-pow"><a href="#2-3-2-1-reduce-Math-pow-reduce-Math-pow" class="headerlink" title="2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]"></a>2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback[, initialValue])</span><br><span class="line">reduce接受两个参数, 一个回调, 一个初始值.</span><br><span class="line">回调函数接受四个参数 previousValue, currentValue, currentIndex, array</span><br><span class="line">需要注意的是 If the array is empty and no initialValue was provided, <span class="built_in">TypeError</span> would be thrown.</span><br><span class="line">所以第二个表达式会报异常. 第一个表达式等价于 <span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>) =&gt; <span class="number">9</span>; <span class="built_in">Math</span>.pow(<span class="number">9</span>, <span class="number">1</span>) =&gt;<span class="number">9</span></span><br></pre></td></tr></table></figure><h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">ary[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">ary.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x === <span class="literal">undefined</span>;&#125;);</span><br><span class="line">我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> ary; =&gt; <span class="literal">true</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> ary; =&gt; <span class="literal">false</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">in</span> ary; =&gt; <span class="literal">true</span></span><br><span class="line">也就是说 从 <span class="number">3</span> - <span class="number">9</span> 都是没有初始化的bug !, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些坑的.</span><br></pre></td></tr></table></figure><h5 id="4-typeof-null-null-instanceof-Object"><a href="#4-typeof-null-null-instanceof-Object" class="headerlink" title="4 [typeof null, null instanceof Object]"></a>4 [typeof null, null instanceof Object]</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 返回一个表示类型的字符串.</span><br><span class="line"><span class="keyword">instanceof</span> 运算符用来检测 <span class="keyword">constructor</span>.prototype 是否存在于参数 object 的原型链上.</span><br><span class="line">type         result</span><br><span class="line">Undefined   "undefined"</span><br><span class="line">Null        "object"</span><br><span class="line">Boolean     "boolean"</span><br><span class="line">Number      "number"</span><br><span class="line">String      "string"</span><br><span class="line">Symbol      "symbol"</span><br><span class="line">Host object Implementation-dependent</span><br><span class="line">Function    "function"</span><br><span class="line">Object      "object"</span><br></pre></td></tr></table></figure><h5 id="5-js数据类型"><a href="#5-js数据类型" class="headerlink" title="5 js数据类型"></a>5 js数据类型</h5><p>1.number; </p><p>2.string;</p><p>3.boolean;</p><p>4.undefined;</p><p>5.null;</p><p>6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。</p><p>7.Object.（包括Object，Array，Function）</p><h5 id="6-promise-用法"><a href="#6-promise-用法" class="headerlink" title="6 promise 用法"></a>6 promise 用法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">定义</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">使用</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//success</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//failure</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-es6-promise-ajax"><a href="#7-es6-promise-ajax" class="headerlink" title="7 es6 promise ajax"></a>7 es6 promise ajax</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">定义</span><br><span class="line"><span class="keyword">const</span> myHttpClient = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">使用</span><br><span class="line">myHttpClient(<span class="string">'https://www.baidu.com'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="8闭包"><a href="#8闭包" class="headerlink" title="8闭包"></a>8闭包</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">        alert(x + y + (++tmp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo(<span class="number">2</span>); <span class="comment">// bar 现在是一个闭包</span></span><br><span class="line">bar(<span class="number">10</span>);</span><br><span class="line">结果是<span class="number">16</span></span><br><span class="line">es6通常用<span class="keyword">let</span> <span class="keyword">const</span>块级作用域代替，</span><br><span class="line">闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题</span><br></pre></td></tr></table></figure><h5 id="9-什么是立即执行函数？使用立即执行函数的目的是什么？"><a href="#9-什么是立即执行函数？使用立即执行函数的目的是什么？" class="headerlink" title="9 什么是立即执行函数？使用立即执行函数的目的是什么？"></a>9 什么是立即执行函数？使用立即执行函数的目的是什么？</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">常见两种方式</span><br><span class="line"><span class="number">1.</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)()</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;)(<span class="number">12345</span>)</span><br><span class="line"><span class="number">2.</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;())</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;(<span class="number">12345</span>))</span><br><span class="line">作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如</span><br><span class="line">（<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;...&#125;(<span class="built_in">window</span>)）</span><br></pre></td></tr></table></figure><h5 id="10-async-await-语法"><a href="#10-async-await-语法" class="headerlink" title="10 async/await 语法"></a>10 async/await 语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">作用：异步代码的新方式</span><br><span class="line">promise示例</span><br><span class="line"><span class="keyword">const</span> makeRequest = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON()</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.needsAnotherRequest) &#123;</span><br><span class="line">        <span class="keyword">return</span> makeAnotherRequest(data)</span><br><span class="line">          .then(<span class="function"><span class="params">moreData</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(moreData)</span><br><span class="line">            <span class="keyword">return</span> moreData</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span>/<span class="keyword">await</span>示例</span><br><span class="line"><span class="keyword">const</span> makeRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> getJSON()</span><br><span class="line">  <span class="keyword">if</span> (data.needsAnotherRequest) &#123;</span><br><span class="line">    <span class="keyword">const</span> moreData = <span class="keyword">await</span> makeAnotherRequest(data);</span><br><span class="line">    <span class="built_in">console</span>.log(moreData)</span><br><span class="line">    <span class="keyword">return</span> moreData</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> data    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">函数前面多了一个aync关键字。<span class="keyword">await</span>关键字只能用在aync定义的函数内。<span class="keyword">async</span>函数会隐式地返回一个promise，该promise的reosolve值就是函数<span class="keyword">return</span>的值。(示例中reosolve值就是字符串<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><h5 id="11-深浅拷贝"><a href="#11-深浅拷贝" class="headerlink" title="11 深浅拷贝"></a>11 深浅拷贝</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  aa: <span class="number">1</span>,</span><br><span class="line">  bb: <span class="number">2</span>,</span><br><span class="line">  cc: <span class="number">3</span>,</span><br><span class="line">  dd: &#123;</span><br><span class="line">    ee: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ff: &#123;</span><br><span class="line">    gg: <span class="number">6</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> d = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));<span class="comment">//深复制包含子对象</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;...a&#125;;<span class="comment">//深拷贝单不包含子对象</span></span><br><span class="line"><span class="keyword">let</span> b = a;<span class="comment">//浅拷贝</span></span><br><span class="line">b.bb = <span class="number">22</span>;</span><br><span class="line">c.cc = <span class="number">33</span>;</span><br><span class="line">c.dd.ee = <span class="number">55</span>;</span><br><span class="line">d.ff.gg = <span class="number">66</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><h5 id="12数组去重"><a href="#12数组去重" class="headerlink" title="12数组去重"></a>12数组去重</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">思路<span class="number">1</span>：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中</span><br><span class="line">思路<span class="number">2</span>：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。</span><br><span class="line">思路<span class="number">3</span>：利用对象属性存在的特性，如果没有该属性则存入新数组。</span><br><span class="line">思路<span class="number">4</span>（最常用）：使用es6 set</span><br><span class="line"><span class="keyword">let</span> arr= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr)]);</span><br></pre></td></tr></table></figure><h5 id="13正则实现trim-功能"><a href="#13正则实现trim-功能" class="headerlink" title="13正则实现trim()功能"></a>13正则实现trim()功能</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/^\s+|\s+$/g</span>;</span><br><span class="line">  <span class="keyword">return</span> str.replace(reg, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myTrim(<span class="string">'    asdf    '</span>));</span><br></pre></td></tr></table></figure><h5 id="14-JS原型"><a href="#14-JS原型" class="headerlink" title="14 JS原型"></a>14 JS原型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性</span><br><span class="line"><span class="number">2.</span>个人粗略理解与python的类方法静态方法实例方法差不多</span><br></pre></td></tr></table></figure><p>#####15 es6 class<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">面向对象，java中类</span><br></pre></td></tr></table></figure></p><h5 id="16-JS-如何实现继承"><a href="#16-JS-如何实现继承" class="headerlink" title="16 JS 如何实现继承"></a>16 JS 如何实现继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用原型继承（既继承了父类的模板，又继承了父类的原型对象。优点是继承了父类的模板，又继承了父类的原型对象，缺点就是父类实例传参，不是子类实例化传参，不符合常规语言的写法）</span><br><span class="line"><span class="number">2.</span>使用call的方式（继承了父类的模板，不继承了父类的原型对象。优点是方便了子类实例传参，缺点就是不继承了父类的原型对象）</span><br></pre></td></tr></table></figure><h5 id="17-手写jquery插件"><a href="#17-手写jquery插件" class="headerlink" title="17 手写jquery插件"></a>17 手写jquery插件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">$.fn.myPlugins = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数赋值</span></span><br><span class="line">  options = $.extend(defaults, options);<span class="comment">//对象合并</span></span><br><span class="line">  <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//执行代码逻辑</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">$(selector).myPlugins(&#123;参数&#125;);</span><br></pre></td></tr></table></figure><h5 id="18-数组合并去重排序"><a href="#18-数组合并去重排序" class="headerlink" title="18 数组合并去重排序"></a>18 数组合并去重排序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">1234</span>, <span class="number">6</span>, <span class="number">213</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">2134</span>, <span class="number">6</span>, <span class="number">31</span>, <span class="number">623</span>];</span><br><span class="line"><span class="keyword">let</span> c = [...new <span class="built_in">Set</span>([...arr1, ...arr2])].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="19-call-apply"><a href="#19-call-apply" class="headerlink" title="19 call apply"></a>19 call apply</h5><p>作用：在函数调用时改变函数的执行上下文也就是this的值<br>区别：call采用不定长的参数列表，而apply使用一个参数数组。<br>性能优化图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg" alt="性能优化" title="">                </div>                <div class="image-caption">性能优化</div>            </figure></p><h5 id="20-for-中setTimeOut"><a href="#20-for-中setTimeOut" class="headerlink" title="20 for 中setTimeOut"></a>20 for 中setTimeOut</h5><p>要为循环题创建不同的循环副本</p><h5 id="21-sort函数"><a href="#21-sort函数" class="headerlink" title="21 sort函数"></a>21 sort函数</h5><p>V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。</p><h5 id="22-navigator"><a href="#22-navigator" class="headerlink" title="22 navigator"></a>22 navigator</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/Navigator.png" alt="Navigator" title="">                </div>                <div class="image-caption">Navigator</div>            </figure><h5 id="23-jquery绑定方式"><a href="#23-jquery绑定方式" class="headerlink" title="23 jquery绑定方式"></a>23 jquery绑定方式</h5><ol><li>click后者覆盖</li><li>bind后者覆盖</li><li>on(jquery&gt;=1.7)</li><li>live</li><li>delegate<h5 id="24-事件流向"><a href="#24-事件流向" class="headerlink" title="24 事件流向"></a>24 事件流向</h5></li><li>冒泡：子节点一层层冒泡到根节点</li><li>捕获顺序与冒泡相反</li><li>addEventListener最后个参数true代表捕获反之代表冒泡</li><li>阻止冒泡不停止父节点捕获<h5 id="25原生操作class"><a href="#25原生操作class" class="headerlink" title="25原生操作class"></a>25原生操作class</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断有无</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">ele, cls</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ele.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(\\s|^)"</span> + cls + <span class="string">"(\\s|$)"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">ele, cls</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(ele, cls)) ele.className += <span class="string">" "</span> + cls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">ele, cls</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hasClass(ele, cls)) &#123;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(\\s|^)"</span> + cls + <span class="string">"(\\s|$)"</span>);</span><br><span class="line">ele.className = ele.className.replace(reg, <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html5中加入classList </span><br><span class="line">一系列操作</span><br><span class="line">兼容至IE10</span><br></pre></td></tr></table></figure></li></ol><h4 id="DOM相关"><a href="#DOM相关" class="headerlink" title="DOM相关"></a><div id="dom">DOM相关</div></h4><h5 id="dom事件模型"><a href="#dom事件模型" class="headerlink" title="dom事件模型"></a>dom事件模型</h5><p>DOM之事件模型分脚本模型、内联模型(同类一个，后者覆盖)、动态绑定(同类多个)<br>demo<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--行内绑定：脚本模型--&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"javascrpt:alert('Hello')"</span>&gt;Hello1&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--内联模型--&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="showHello()"&gt;Hello2&lt;/</span>button&gt;</span><br><span class="line">&lt;!--动态绑定--&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn3"</span>&gt;Hello3&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/*DOM0：同一个元素，同类事件只能添加一个，如果添加多个，</span></span><br><span class="line"><span class="comment">* 后面添加的会覆盖之前添加的*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shoeHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn3 = <span class="built_in">document</span>.getElementById(<span class="string">"btn3"</span>);</span><br><span class="line">btn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*DOM2:可以给同一个元素添加多个同类事件*/</span></span><br><span class="line">btn3.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"hello1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">btn3.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"hello2"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> (btn3.attachEvent)&#123;</span><br><span class="line"><span class="comment">/*IE*/</span></span><br><span class="line">btn3.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"IE Hello1"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*W3C*/</span></span><br><span class="line">btn3.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"W3C Hello"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>冒泡解释：当点击一个元素触发事件时. 事件会先从元素的最外层父元素一层一层进入到触发的元素, 然后在从触发元素一层一层返回到最外层父元素, 从最外层一层一层进入的阶段叫事件捕获阶段, 从最里层一层一层往外的阶段叫事件冒泡,</p><h5 id="移动端触摸事件"><a href="#移动端触摸事件" class="headerlink" title="移动端触摸事件"></a>移动端触摸事件</h5><p>①touchstart：当手指触碰到屏幕的时候触发<br>②touchmove：当手指在屏幕上滑动的时候触发<br>③touchend：当手指离开屏幕的时候时候触发<br>④touchcancel事件：当系统停止跟踪触摸的时候触发(这个事件很少会用，一般不做深入研究)。 电话接入或者弹出信息等其他事件切入<br>event： </p><ol><li>touches：表示当前跟踪的触摸操作的touch对象的数组。 </li><li>targetTouches：特定于事件目标的Touch对象的数组。 </li><li>changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。 </li></ol><p>每个touch对象包含的属性 </p><ol><li>clientX：触摸目标在视口中的x坐标。 </li><li>clientY：触摸目标在视口中的y坐标。 </li><li>identifier：标识触摸的唯一ID。 </li><li>pageX：触摸目标在页面中的x坐标。 </li><li>pageY：触摸目标在页面中的y坐标。 </li><li>screenX：触摸目标在屏幕中的x坐标。 </li><li>screenY：触摸目标在屏幕中的y坐标。 </li><li>target：触目的DOM节点目标。 </li></ol><h5 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h5><p>参考定义：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件<br>好处：给重复的节点添加相同操作，减少dom交互，提高性能<br>实现思路：给父组件添加事件，通过事件冒泡，排查元素是否为指定元素，并进行系列操作</p><h4 id="HTTP相关"><a href="#HTTP相关" class="headerlink" title="HTTP相关"></a><div id="http">HTTP相关</div></h4><h5 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h5><p><b>2开头 （请求成功）表示成功处理了请求的状态代码。</b></p><p>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201   （已创建）  请求成功并且服务器创建了新的资源。<br>202   （已接受）  服务器已接受请求，但尚未处理。<br>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。<br>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br>206   （部分内容）  服务器成功处理了部分 GET 请求。</p><p><b>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</b></p><p>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p><b>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</b></p><p>400   （错误请求） 服务器不理解请求的语法。<br>401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403   （禁止） 服务器拒绝请求。<br>404   （未找到） 服务器找不到请求的网页。<br>405   （方法禁用） 禁用请求中指定的方法。<br>406   （不接受） 无法使用请求的内容特性响应请求的网页。<br>407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408   （请求超时）  服务器等候请求时发生超时。<br>409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。<br>411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br>412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br>415   （不支持的媒体类型） 请求的格式不受请求页面的支持。<br>416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p><p><b>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</b></p><p>500   （服务器内部错误）  服务器遇到错误，无法完成请求。<br>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><ol><li>Expires在http1.0中使用，与服务器时间有误差，在1.1中由Cache-control替代<br><meta http-equiv="Cache-Control" content="max-age=7200"><meta http-equiv="Expires" content="Mon, 20 Jul 2009 23:00:00 GMT"></li><li>cdn</li></ol><h5 id="Cache-Control-和-Etag-的区别"><a href="#Cache-Control-和-Etag-的区别" class="headerlink" title="Cache-Control 和 Etag 的区别"></a>Cache-Control 和 Etag 的区别</h5><p>如下图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/%E5%8C%BA%E5%88%AB%E5%9B%BE.png" alt="区别图" title="">                </div>                <div class="image-caption">区别图</div>            </figure></p><h5 id="Cookie-sessionStorage-localStorage"><a href="#Cookie-sessionStorage-localStorage" class="headerlink" title="Cookie sessionStorage  localStorage"></a>Cookie sessionStorage  localStorage</h5><p>共同点：都是保存在浏览器端，且同源的。<br>区别：cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据不能超过4k(适合保存小数据)。<br>sessionStorage和localStorage容量较大，数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效。localStorage：始终有效，窗口或浏览器关闭也一直保存，需手动清楚；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同。<br>sessionStorage不在不同的浏览器窗口中共享；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</p><p>应用场景：localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage ：敏感账号一次性登录； cookies与服务器交互。</p><h5 id="GET-POST区别"><a href="#GET-POST区别" class="headerlink" title="GET POST区别"></a>GET POST区别</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/get_post.png" alt="get_post" title="">                </div>                <div class="image-caption">get_post</div>            </figure><h5 id="请求行，请求头，请求体详解"><a href="#请求行，请求头，请求体详解" class="headerlink" title="请求行，请求头，请求体详解"></a>请求行，请求头，请求体详解</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/http%E8%AF%B7%E6%B1%82%E4%B8%80%E4%BD%93.jpg" alt="如图" title="">                </div>                <div class="image-caption">如图</div>            </figure><p>1,2,3请求行，4请求体，5请求体</p><h5 id="跨域、JSONP-、CORS、postMessage"><a href="#跨域、JSONP-、CORS、postMessage" class="headerlink" title="跨域、JSONP 、CORS、postMessage"></a>跨域、JSONP 、CORS、postMessage</h5><p>跨域概念解释：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：我们认为若协议 + 域名 + 端口号均相同，那么就是同域。<br>如下表<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F%E6%83%85%E5%86%B5%E6%A0%87%E8%AF%86.png" alt="图" title="">                </div>                <div class="image-caption">图</div>            </figure></p><p>jsoup实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">原生</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 传参并指定回调执行函数为onBack</span></span><br><span class="line">    script.src = <span class="string">'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 回调执行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">jquery</span></span><br><span class="line"><span class="regexp">$.ajax(&#123;</span></span><br><span class="line"><span class="regexp">    url: 'http:/</span><span class="regexp">/www.domain2.com:8080/</span>login<span class="string">',</span></span><br><span class="line"><span class="string">    type: '</span>get<span class="string">',</span></span><br><span class="line"><span class="string">    dataType: '</span>jsonp<span class="string">',  // 请求方式为jsonp</span></span><br><span class="line"><span class="string">    jsonpCallback: "onBack",    // 自定义回调函数名</span></span><br><span class="line"><span class="string">    data: &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vue</span></span><br><span class="line"><span class="string">this.$http.jsonp('</span>http:<span class="comment">//www.domain2.com:8080/login', &#123;</span></span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'onBack'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">配合的后端node实现,其他服务器语言也可以</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> fn = params.callback;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// jsonp返回设置</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span> &#125;);</span><br><span class="line">    res.write(fn + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(params) + <span class="string">')'</span>);</span><br><span class="line"> </span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"></span><br><span class="line">jsoup缺点只能实现get请求</span><br></pre></td></tr></table></figure></p><p>CORS：跨源资源共享 Cross-Origin Resource Sharing(CORS)，通常服务器设置，若带cookie请求，则前后端都需要设置<br>后端常见设置<br>response.setHeader(“Access-Control-Allow-Origin”, “<a href="http://www.domain1.com&quot;)" target="_blank" rel="noopener">http://www.domain1.com&quot;)</a>;  // 若有端口需写全（协议+域名+端口），允许那些外源请求<br>response.setHeader(“Access-Control-Allow-Credentials”, “true”); //是否需要验证</p><p>前端示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">原生</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain2.com:8080/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">'user=admin'</span>);</span><br><span class="line"> </span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">jquery</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">postMessage(data,origin)方法接受两个参数</span><br><span class="line">demo</span><br><span class="line"></span><br><span class="line">a.html</span><br><span class="line">&lt;iframe id=<span class="string">"iframe"</span> src=<span class="string">"http://www.domain2.com/b.html"</span> style=<span class="string">"display:none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;       </span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: <span class="string">'aym'</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 向domain2传送跨域数据</span></span><br><span class="line">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain2.com'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 接受domain2返回数据</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'data from domain2 ---&gt; '</span> + e.data);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">b.html  与a.html不同源</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 接收domain1的数据</span></span><br><span class="line"><span class="regexp">    window.addEventListener('message', function(e) &#123;</span></span><br><span class="line"><span class="regexp">        alert('data from domain1 ---&gt; ' + e.data);</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">        var data = JSON.parse(e.data);</span></span><br><span class="line"><span class="regexp">        if (data) &#123;</span></span><br><span class="line"><span class="regexp">            data.number = 16;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 处理后再发回domain1</span></span><br><span class="line"><span class="regexp">            window.parent.postMessage(JSON.stringify(data), 'http:/</span><span class="regexp">/www.domain1.com');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;, false);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h5 id="osi模型"><a href="#osi模型" class="headerlink" title="osi模型"></a>osi模型</h5><p>七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br>tcp ucp属于传输层；http属于应用层</p><h5 id="http2-0-http1"><a href="#http2-0-http1" class="headerlink" title="http2.0 http1"></a>http2.0 http1</h5><ol><li>HTTP2.0的基本单位为二进制帧</li><li>HTTP2.0中帧具有优先级</li><li>HTTP2.0的多路复用（ 1次连接）</li><li>HTTP2.0压缩消息头</li><li>HTTP2.0服务端推送</li><li>HTTP2.0只适用于HTTPS的场景<h4 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a><div id="vue">Vue相关</div></h4></li></ol><h5 id="生命周期顺序"><a href="#生命周期顺序" class="headerlink" title="生命周期顺序"></a>生命周期顺序</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pd4ar0u4q.bkt.clouddn.com/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期" title="">                </div>                <div class="image-caption">生命周期</div>            </figure><h5 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h5><p>1.父传子用props,父用子用ref 子调父用$emit,无关系用Bus</p><h5 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h5><p>组件通信库，可以避免子组件无法改变props的弊端等<br>mutations 同步操作， 用于改变状态 官方不推荐异步<br>action 执行多个mutaions，官方推荐异步操作<br>mapState、mapGetters、mapActions使用示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dialog :visible.sync=<span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed:&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里的三点叫做 : 扩展运算符</span></span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      show:<span class="function"><span class="params">state</span>=&gt;</span>state.dialog.show</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">后两者类似</span></span><br></pre></td></tr></table></figure></p><h5 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">定义</span><br><span class="line"><span class="keyword">var</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/one"</span>,</span><br><span class="line"></span><br><span class="line">        component:导入的组件<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/two"</span>,</span><br><span class="line">        component:导入的组件<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 定义路由组件</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#box"</span>,</span><br><span class="line">    router</span><br><span class="line">&#125;);</span><br><span class="line"> 访问设定的路由后 会将&lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>替换成相应的模版</span></span><br><span class="line"> html访问方式 &lt;router-link to="/one"&gt;One&lt;/router-link&gt;(类似a标签)</span><br><span class="line"> js访问方式 this.$router.push('/one'); </span><br><span class="line"> replace方式 替换当前页面</span><br><span class="line"> 携带的参数 可以通过this.$route.query.xxxx来获取</span><br><span class="line">``` </span><br><span class="line">##### Vue双向绑定</span><br><span class="line">原理：利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。</span><br><span class="line">缺点：双向数据流是自动管理状态的, 但是在实际应用中会有很多不得不手动处理状态变化的逻辑, 使得程序复杂度上升, 难以调试。</span><br><span class="line">##### computed  watch methods</span><br><span class="line">用法：</span><br><span class="line">区别：</span><br><span class="line">1. 前两者自动追踪数据，执行相关函数，最后一个手动调用；</span><br><span class="line">2. computed是计算属性，用法与data一致</span><br><span class="line">3. watch像事件监听，对象发生变化时，执行相关操作</span><br><span class="line">4. methods与js中执行方法类似</span><br><span class="line">5. computed通常只有get属性</span><br><span class="line">6. 数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择</span><br><span class="line">7. watch的对象必须事先声明</span><br><span class="line">#### &lt;div id="sort"&gt;算法相关&lt;/div&gt;</span><br><span class="line">##### 各种排序实现</span><br><span class="line">相关数据</span><br><span class="line">![表格](http://pd4ar0u4q.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AD%89%E7%AD%89.png)</span><br><span class="line">```js</span><br><span class="line">// 冒泡排序: 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样</span><br><span class="line">冒泡demo:</span><br><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123;        //相邻元素两两对比</span><br><span class="line">                [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">// 1) 首先，在数组中选择一个中间项作为主元</span><br><span class="line">// 2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到</span><br><span class="line">// 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作</span><br><span class="line">// 3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成</span><br><span class="line">快排demo:</span><br><span class="line">function quickSort(arr, left, right) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let partitionIndex;</span><br><span class="line">    left = typeof left !== 'number' ? 0 : left;</span><br><span class="line">    right = typeof right !== 'number' ? len - 1 : right;</span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex - 1);</span><br><span class="line">        quickSort(arr, partitionIndex + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function partition(arr, left, right) &#123;     //分区操作</span><br><span class="line">    let pivot = left;                      //设定基准值（pivot）</span><br><span class="line">    let index = pivot + 1;</span><br><span class="line">    for (let i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[pivot], arr[index - 1]] = [arr[index - 1], arr[pivot]];</span><br><span class="line">    return index - 1;</span><br><span class="line">&#125;</span><br><span class="line">// 选择排序：大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)</span><br><span class="line">选择demo:</span><br><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">let len = arr.length;</span><br><span class="line">let minIndex;</span><br><span class="line">for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line">for (let j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">if (arr[j] &lt; arr[minIndex]) &#123;     //寻找最小的数</span><br><span class="line">    minIndex = j;                 //将最小数的索引保存</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">&#125;</span><br><span class="line">return arr;</span><br><span class="line">&#125;</span><br><span class="line">// 插入排序：每次排一个数组项，假设数组的第一项已经排序，接着，把第二项与第一项进行对比，第二项是该插入到第一项之前还是之后，第三项是该插入到第一项之前还是第一项之后还是第三项</span><br><span class="line">插入demo:</span><br><span class="line">function insertionSort(arr) &#123;</span><br><span class="line">let len = arr.length;</span><br><span class="line">let preIndex, current;</span><br><span class="line">for (let i = 1; i &lt; len; i++) &#123;</span><br><span class="line">    preIndex = i - 1;</span><br><span class="line">    current = arr[i];</span><br><span class="line">    while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">    arr[preIndex + 1] = arr[preIndex];</span><br><span class="line">    preIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + 1] = current;</span><br><span class="line">&#125;</span><br><span class="line">return arr;</span><br><span class="line">&#125;</span><br><span class="line">// 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)</span><br><span class="line">// 归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组</span><br><span class="line">归并demo:</span><br><span class="line">function mergeSort(arr) &#123;  //采用自上而下的递归方法</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    if(len &lt; 2) &#123;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    let middle = Math.floor(len / 2),</span><br><span class="line">    left = arr.slice(0, middle),</span><br><span class="line">    right = arr.slice(middle);</span><br><span class="line">    return merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function merge(left, right)&#123;</span><br><span class="line">    let result = [];</span><br><span class="line">    while (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        if (left[0] &lt;= right[0]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(...left);</span><br><span class="line">    result.push(...right);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">//堆排序：堆排序把数组当中二叉树来排序而得名。</span><br><span class="line">// 1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1</span><br><span class="line">// 本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个</span><br><span class="line">堆demo:</span><br><span class="line">var len;    //因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span><br><span class="line"></span><br><span class="line">function buildMaxHeap(arr) &#123;   //建立大顶堆</span><br><span class="line">    len = arr.length;</span><br><span class="line">    for (let i = Math.floor(len / 2); i &gt;= 0; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function heapify(arr, i) &#123;     //堆调整</span><br><span class="line">    let left = 2 * i + 1;</span><br><span class="line">    let right = 2 * i + 2;</span><br><span class="line">    let largest = i;</span><br><span class="line">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line">    if (largest !== i) &#123;</span><br><span class="line">        [arr[i], arr[largest]] = [arr[largest], arr[i]];</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function heapSort(arr) &#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line">    for (let i = arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">        [arr[0],arr[i]]=[arr[i],arr[0]];</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h5><p>思路<br>（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。<br>（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。<br>（3）如果某一步数组为空，则表示找不到目标元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(key === arr[mid])&#123;</span><br><span class="line">            <span class="keyword">return</span>  mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid])&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid])&#123;</span><br><span class="line">            high = mid <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">arr,low, high, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(arr[mid] === key)&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key)&#123;</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, low, high, key);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key)&#123;</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, low, high, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="二叉树相关"><a href="#二叉树相关" class="headerlink" title="二叉树相关"></a>二叉树相关</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">创建</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data,left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;<span class="comment">//数值</span></span><br><span class="line"><span class="keyword">this</span>.left = left;<span class="comment">//左节点</span></span><br><span class="line"><span class="keyword">this</span>.right = right;<span class="comment">//右节点</span></span><br><span class="line">&#125;;</span><br><span class="line">插入二叉树</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">node,data</span>)</span>&#123;</span><br><span class="line"><span class="comment">//创建一个新的节点</span></span><br><span class="line"><span class="keyword">let</span> newNode  = <span class="keyword">new</span> Node(data,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//判断是否存在根节点，没有将新节点存入</span></span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">node = newNode;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//获取根节点</span></span><br><span class="line"><span class="keyword">let</span> current = node;</span><br><span class="line"><span class="keyword">let</span> parent;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//将当前节点保存为父节点</span></span><br><span class="line">parent = current;</span><br><span class="line"><span class="comment">//将小的数据放在左节点</span></span><br><span class="line"><span class="keyword">if</span>(data &lt; current.data)&#123;</span><br><span class="line"><span class="comment">//获取当前节点的左节点</span></span><br><span class="line"><span class="comment">//判断当前节点下的左节点是否有数据</span></span><br><span class="line">current = current.left;</span><br><span class="line"><span class="keyword">if</span>(current == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//如果没有数据将新节点存入当前节点下的左节点</span></span><br><span class="line">parent.left = newNode;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">current = current.right;</span><br><span class="line"><span class="keyword">if</span>(current == <span class="literal">null</span>)&#123;</span><br><span class="line">parent.right = newNode;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">翻转二叉树</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invertTree</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">node.left, node.right = node.left, node.right;</span><br><span class="line">invertTree(node.left);</span><br><span class="line">invertTree(node.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查找链表中倒数第k个结点</span><br><span class="line"><span class="number">2</span>个思路</span><br><span class="line"><span class="number">1</span>：先遍历出长度，然后查找长度-k+<span class="number">1</span>的值</span><br><span class="line"><span class="number">2</span>：<span class="number">2</span>个指针，一个指针先走k<span class="number">-1</span>，然后两个一起走到底部，后者就是结果</span><br></pre></td></tr></table></figure><h4 id="网络安全相关"><a href="#网络安全相关" class="headerlink" title="网络安全相关"></a><div id="web">网络安全相关</div></h4><h5 id="XSS-CSRF"><a href="#XSS-CSRF" class="headerlink" title="XSS CSRF"></a>XSS CSRF</h5><p>XSS(跨站脚本攻击)，恶意的注入html代码，其他用户访问时，会被执行<br>特点：能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击<br>防御手段：</p><ul><li>浏览器禁止页面的JS访问带有HttpOnly属性的Cookie</li><li>两端进行输入格式检查</li><li>通过编码转义的方式进行输出检查<br>CSRF(攻击跨站请求伪造)<br>特点：重要操作的所有参数都是可以被攻击者猜测到的。攻击者预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求。<br>防御手段：</li><li>token验证机制，比如请求数据字段中添加一个token，响应请求时校验其有效性</li><li>用户操作限制，比如验证码（繁琐，用户体验差）</li><li>请求来源限制，比如限制HTTP Referer才能完成操作（防御效果相比较差）<br>实践中常用第一种<h4 id="webpack相关"><a href="#webpack相关" class="headerlink" title=" webpack相关"></a><div id="webpack"> webpack相关</div></h4>#####打包体积<br>优化思路</li></ul><ol><li>提取第三方库或通过引用外部文件的方式引入第三方库</li><li>代码压缩插件UglifyJsPlugin</li><li>服务器启用gzip压缩</li><li>按需加载资源文件 require.ensure</li><li>优化devtool中的source-map</li><li>剥离css文件，单独打包</li><li>去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致<br>#####打包效率</li><li>开发环境采用增量构建，启用热更新</li><li>开发环境不做无意义的工作如提取css计算文件hash等</li><li>配置devtool</li><li>选择合适的loader</li><li>个别loader开启cache 如babel-loader</li><li>第三方库采用引入方式</li><li>提取公共代码</li><li>优化构建时的搜索路径 指明需要构建目录及不需要构建目录</li><li>模块化引入需要的部分<h5 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h5>编写一个loader<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">loader就是一个node模块，它输出了一个函数。当某种资源需要用这个loader转换时，这个函数会被调用。并且，这个函数可以通过提供给它的<span class="keyword">this</span>上下文访问Loader API。</span><br><span class="line">reverse-txt-loader</span><br><span class="line">定义</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//src是原文件内容（abcde），下面对内容进行处理，这里是反转</span></span><br><span class="line">  <span class="keyword">var</span> result = src.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>); </span><br><span class="line">  <span class="comment">//返回JavaScript源码，必须是String或者Buffer</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`module.exports = '<span class="subst">$&#123;result&#125;</span>'`</span>;</span><br><span class="line">&#125;</span><br><span class="line">使用</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.txt$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'./path/reverse-txt-loader'</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h5><p>使用范围更广，通常只需要require()然后添加到plugins数组中，且需要new一个</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a><div id="other">其他</div></h4><h5 id="URL到界面显示发生了什么"><a href="#URL到界面显示发生了什么" class="headerlink" title="URL到界面显示发生了什么"></a>URL到界面显示发生了什么</h5><ol><li>DNS解析<br>先本地缓存找，在一层层找<br>将常见的地址解析成唯一对应的ip地址基本顺序为：本地域名服务器-&gt;根域名服务器-&gt;com顶级域名服务器依次类推下去,找到后记录并缓存下来如<a href="http://www.google.com为" target="_blank" rel="noopener">www.google.com为</a><br><b>. -&gt; .com -&gt; google.com. -&gt; <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>.</b></li><li>TCP连接<br>三次握手，只要没收到确认消息就要重新发<ol><li>主机向服务器发送一个建立连接的请求（您好，我想认识您）；</li><li>服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；</li><li>主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。</li></ol></li><li>发送HTTP请求<br>浏览器会分析这个url，并设置好请求报文发出。请求报文中包括请求行、请求头、空行、请求主体。https默认请求端口443， http默认80。<br>常见的http请求如下<figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">POST / HTTP1.1</span></span><br><span class="line"><span class="xml">Host:www.wrox.com</span></span><br><span class="line"><span class="xml">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span></span><br><span class="line"><span class="xml">Content-Type:application/x-www-form-urlencoded</span></span><br><span class="line"><span class="xml">Content-Length:40</span></span><br><span class="line"><span class="xml">Connection: Keep-Alive</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">name=Professional%20Ajax&amp;publisher=Wiley</span></span><br><span class="line"><span class="xml">第一部分：请求行，第一行说明是post请求，以及http1.1版本。</span></span><br><span class="line"><span class="xml">第二部分：请求头部，第二行至第六行。</span></span><br><span class="line"><span class="xml">第三部分：空行，第七行的空行。</span></span><br><span class="line"><span class="xml">第四部分：请求数据，第八行。</span></span><br><span class="line"><span class="xml">4. 服务器处理请求并返回HTTP报文</span></span><br><span class="line"><span class="xml">后端处理返回http报文如下</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="xml">Date: Fri, 22 May 2009 06:07:21 GMT</span></span><br><span class="line"><span class="xml">Content-Type: text/html; charset=UTF-8</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--body goes here--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</span></span><br><span class="line"><span class="xml">第二行和第三行为消息报头，</span></span><br><span class="line"><span class="xml">Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</span></span><br><span class="line"><span class="xml">第三部分：空行，消息报头后面的空行是必须的</span></span><br><span class="line"><span class="xml">第四部分：响应正文，服务器返回给客户端的文本信息。</span></span><br><span class="line"><span class="xml">空行后面的html部分为响应正文。</span></span><br></pre></td></tr></table></figure><ol start="5"><li>浏览器解析渲染页面</li></ol><ul><li>通过HTML解析器解析HTML文档，构建一个DOM Tree，同时通过CSS解析器解析HTML中存在的CSS，构建Style Rules，两者结合形成一个Attachment。</li><li>通过Attachment构造出一个呈现树（Render Tree）</li><li>Render Tree构建完毕，进入到布局阶段（layout/reflow），将会为每个阶段分配一个应出现在屏幕上的确切坐标。</li><li>最后将全部的节点遍历绘制出来后，一个页面就展现出来了。<br>遇到script会停下来执行，所以通常把script放在底部</li></ul><ol start="6"><li>连接结束</li></ol><h5 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h5><p>目的：为了重用，提高开发效率和代码质量<br>注意：低耦合，单一职责，可复用性，可维护性<br>常用操作：</p><ol><li>分析布局</li><li>初步开发</li><li>化繁为简</li><li>组件抽象</li></ol><h5 id="JS异步加载"><a href="#JS异步加载" class="headerlink" title="JS异步加载"></a>JS异步加载</h5><ol><li>动态生成script标签</li><li>添加h5的async defer属性，前者乱序不适合依赖性加载</li><li>async 是“下载完就执行”， defer 是“渲染完再执行”</li></ol><h5 id="css与js动画差异"><a href="#css与js动画差异" class="headerlink" title="css与js动画差异"></a>css与js动画差异</h5><ol><li>css性能好</li><li>css代码逻辑相对简单</li><li>js动画控制好</li><li>js兼容性好</li><li>js可实现的动画多</li><li>js可以添加事件</li></ol><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>多台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用</p><ol><li>http重定向负载均衡：调度者根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器</li><li>dns负载均衡：解析域名时，访问多个ip服务器中的一个（可监控性较弱）</li><li>反向代理负载均衡：访问统一的服务器，由服务器进行调度访问实际的某个服务器，对统一的服务器要求大，性能受到 服务器群的数量</li></ol><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><p>内容分发网络，基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p><h5 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h5><p>定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题<br>js中可能出现的内存泄漏情况<br>结果：变慢，崩溃，延迟大等<br>原因：</p><ol><li>全局变量</li><li>dom清空时，还存在引用</li><li>ie中使用闭包</li><li>定时器未清理</li><li>子元素存在引起的内存泄露</li></ol><p>避免策略：</p><ol><li>减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；</li><li>注意程序逻辑，避免“死循环”之类的 ；</li><li>避免创建过多的对象  原则：不用了的东西要及时归还。 </li><li>减少层级过多的引用<h5 id="babel原理"><a href="#babel原理" class="headerlink" title="babel原理"></a>babel原理</h5>ES6、7代码输入 -&gt; babylon进行解析 -&gt; 得到AST（抽象语法树）-&gt; plugin用babel-traverse对AST树进行遍历转译 -&gt;得到新的AST树-&gt;用babel-generator通过AST树生成ES5代码、</li></ol><h5 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h5><p>特性：Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止，也即是说，错误总会被下一个catch语句捕获</p><h5 id="js自定义事件"><a href="#js自定义事件" class="headerlink" title="js自定义事件"></a>js自定义事件</h5><p>三要素：<br>document.createEvent()<br>event.initEvent()<br>element.dispatchEvent()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">demo:</span><br><span class="line">(en:自定义事件名称，fn:事件处理函数，addEvent:为DOM元素添加自定义事件，triggerEvent:触发自定义事件)</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span><br><span class="line">    demo.addEvent(<span class="string">"test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"handler1"</span>)&#125;);</span><br><span class="line">    demo.addEvent(<span class="string">"test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"handler2"</span>)&#125;);</span><br><span class="line">    demo.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Element.prototype.addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">en,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pools = <span class="keyword">this</span>.pools || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(en <span class="keyword">in</span> <span class="keyword">this</span>.pools)&#123;</span><br><span class="line">        <span class="keyword">this</span>.pools[en].push(fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pools[en] = [];</span><br><span class="line">        <span class="keyword">this</span>.pools[en].push(fn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Element.prototype.triggerEvent  = <span class="function"><span class="keyword">function</span>(<span class="params">en</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(en <span class="keyword">in</span> <span class="keyword">this</span>.pools)&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = <span class="keyword">this</span>.pools[en];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,il=fns.length;i&lt;il;i++)&#123;</span><br><span class="line">            fns[i]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="es6模块-commonjs-amd-cmd"><a href="#es6模块-commonjs-amd-cmd" class="headerlink" title="es6模块 commonjs  amd cmd"></a>es6模块 commonjs  amd cmd</h5><ol><li>CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。</li><li>CommonJS是同步加载模块,在浏览器中会出现堵塞情况，所以不适用</li><li>AMD 异步，需要定义回调define方式</li><li>es6 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量</li><li>es6还可以导出类、方法，自动适用严格模式</li></ol><h5 id="前后端路由差别"><a href="#前后端路由差别" class="headerlink" title="前后端路由差别"></a>前后端路由差别</h5><p>1.后端每次路由请求都是重新访问服务器<br>2.前端路由实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端问题记录&quot;&gt;&lt;a href=&quot;#前端问题记录&quot; class=&quot;headerlink&quot; title=&quot;前端问题记录&quot;&gt;&lt;/a&gt;前端问题记录&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cs
      
    
    </summary>
    
      <category term="前端周刊" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="优质文章分享" scheme="https://ru23.com/tags/%E4%BC%98%E8%B4%A8%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>redux入门</title>
    <link href="https://ru23.com/note/c5bbc436.html"/>
    <id>https://ru23.com/note/c5bbc436.html</id>
    <published>2018-09-28T11:43:17.000Z</published>
    <updated>2018-10-27T09:27:15.515Z</updated>
    
    <content type="html"><![CDATA[<p>Redux由Flux演变而来，提供几个简单的API来实现状态管理，所谓状态指的是应用数据，所以，Redux本质上是用来管理数据的。<br>进一步，Redux配合支持数据绑定的视图库使用，就可以将应用状态和视图一一对应，开发者不需要再去关心DOM操作，只关心如何组织数据即可。</p><blockquote><p>由于Redux对于数据的管理拆分很细，一时间会有很多概念，并且Redux有自己丰富的生态，所以容易眼花缭乱。<br>所以强烈建议从头开始一步一步的来，深入体验并理解Redux的思想，不要步子迈太大。<br>✦ 不要一开始过多的纠结代码放在哪个目录<br>✦ 不要一开始就想对action和reducer的代码做精简<br>✦ 不要一开始就考虑数据缓存，离线数据等问题<br>✦ 不要一开始就过度设计数据，考虑数据扁平化的问题<br>反正一句话，饭要一口一口的吃，路要一步一步的走，Redux对于状态管理的东西拆得太细，需要多花一些时间去体会。</p></blockquote><h2 id="Redux是什么？"><a href="#Redux是什么？" class="headerlink" title="Redux是什么？"></a>Redux是什么？</h2><p>Redux其实很简单，总结起来就三句话：<br>✦ 将整个应用的state储存在唯一的store对象中。<br>✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。<br>✦ 使用reducer来描述action如何改变state。</p><p>是的，简而言之就是：Redux让应用的数据被集中管理，并且只能通过触发action的方式来修改，而具体如何修改state，是由reducer来决定的。</p><p>那么问题来了：<br>✦ store是什么鬼？<br>✦ action是什么鬼？<br>✦ reducer是什么鬼?<br>✦ 最重要的是，为啥要使用Redux，它能给我们带什么什么好处？或者说，引入这么一个状态理器到底有啥用？</p><p>接下来，我们先捉这三只鬼。</p><p>store是什么鬼？<br>前面提过，Redux的目的就是为了对应用数据进行集中管理，也就是state，而state是个普通对象。为了防止state被不小心更新，Redux创建了store对象，专门用来管理state数据。</p><p>所以，store就是state的守门员，管理并维护应用数据。</p><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h3><p>我们通过createStore(reducer, [initialState], enhancer)的方式来创建store。需要注意的是，应用中应该有且只有一个store。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是reducer，后文会详细介绍</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">      <span class="keyword">return</span> state.concat([ action.text ])</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store，并且给state一个初始值['HTML']</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(todos, [ <span class="string">'HTML'</span> ])</span><br><span class="line"></span><br><span class="line"><span class="comment">// state.dispatch()，最常用的API</span></span><br><span class="line"><span class="comment">// 修改state的唯一方式就是调用store.dispatch()方法</span></span><br><span class="line"><span class="comment">// 显然，其中的描述性对象</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//  type: 'ADD_TODO',</span></span><br><span class="line"><span class="comment">//  text: 'CSS'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 就是action</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  text: <span class="string">'CSS'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// store.getState()，另一个常用的API</span></span><br><span class="line"><span class="comment">// 用来获取state的值</span></span><br><span class="line"><span class="built_in">console</span>.log(store.getState());  <span class="comment">// [ 'HTML', 'CSS' ]</span></span><br></pre></td></tr></table></figure></p><h3 id="store的API们"><a href="#store的API们" class="headerlink" title="store的API们"></a>store的API们</h3><p>store的API很简单，这儿我按重要顺序列出所有的API，主要记住前两个。<br>✦ dispatch(action)：触发action，再次声明，这是改变state的唯一方式，请默念两次<br>✦ getState()：获取当前的state<br>✦ subscribe(listener)：注册一个监听函数，state发生变化时触发<br>✦ replaceReducer(nextReducer)：替换reducer，用得较少</p><p>总结一下，store提供了简单的API，用来管理应用内的数据，它限制了只能通过dispatch(action)来修改state，那么这个action是什么呢？</p><h3 id="action是什么鬼？"><a href="#action是什么鬼？" class="headerlink" title="action是什么鬼？"></a>action是什么鬼？</h3><p>前文提过，action就是一个描述性的普通对象，所以它非常简单！说白了，就是一坨数据，然后这坨数据有名字。</p><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><p>action是一个描述性的普通对象。推荐如下的action结构，type是action的名称，payload是附带的数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 显然，这个名字取得很浅显易懂</span></span><br><span class="line">    type: UPDATE_ARTICLES_LIST,</span><br><span class="line">    payload: &#123;</span><br><span class="line">        articles: articles,</span><br><span class="line">        lastkey: lastkey</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是：实际项目中，我们应该尽量减少action中附带的数据，比如想要更新某篇文章的标题，我们只需要携带文章id和文章新标题即可，而不需要携带整个新文章字段。<br>为了让action更便于维护，我们通常使用action creator而不是action。</p><h5 id="action-creator"><a href="#action-creator" class="headerlink" title="action creator"></a>action creator</h5><p>action create就是一个简单的函数，直接将action作为返回值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action creator，返回一个action</span></span><br><span class="line"><span class="comment">// 除此之外，没有其他的动作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateArticlesList</span>(<span class="params">normalizeData, lastkey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: UPDATE_ARTICLES_LIST,</span><br><span class="line">        payload: &#123;</span><br><span class="line">            normalizeData: normalizeData,</span><br><span class="line">            listLastkey: lastkey</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过dispatch触发一个action，这是我们修改state的唯一方式</span></span><br><span class="line">dispatch(updateArticlesList(</span><br><span class="line">    normalizeData,</span><br><span class="line">    lastkey</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将dispatch(action)整个动作取个别名，方便调用</span></span><br><span class="line"><span class="keyword">const</span> updatePosts = <span class="function">(<span class="params">normalizeData, lastkey</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(updateArticlesList(</span><br><span class="line">        normalizeData,</span><br><span class="line">        lastkey</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updatePosts(...);</span><br></pre></td></tr></table></figure></p><h3 id="那么为什么需要action-creatore呢？"><a href="#那么为什么需要action-creatore呢？" class="headerlink" title="那么为什么需要action creatore呢？"></a>那么为什么需要action creatore呢？</h3><p>试想一个场景，我们有好几处dispatch(action)，现在突然想要修改这个action的定义，那么我们需要修改所有地方，代码也比较冗余!<br>而使用action creator，相当于对action做了简单的封装，避免了这些问题。既灵活又便于维护！</p><h5 id="异步action-creator"><a href="#异步action-creator" class="headerlink" title="异步action creator"></a>异步action creator</h5><p>我们已经知道，修改state的唯一方式就是触发action，也就是dispatch(action)。<br>但是如果是异步操作，比如一个网络请求，我们需要等到请求返回之后才会返回action，怎么办呢？<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateArticlesList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GET(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 难道直接return action？</span></span><br><span class="line">        <span class="comment">// 显然是不行的，这儿的返回值并不是updateArticlesList函数的返回值</span></span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于异步场景，我们的解决方案是返回函数而不是直接返回action。就像下面这样。<br>为了让dispatch方法可以接受函数作为参数，我们需要使用redux-thunk这个中间件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">'./reducer.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    rootReducer,</span><br><span class="line">    applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后你就可以dispatch一个函数了<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchArticlesList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 传入dispatch/getstate，当然是为了获取state以及更新state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GET(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            dispatch(updateArticlesList(</span><br><span class="line">                normalizeData,</span><br><span class="line">                lastkey</span><br><span class="line">            ));</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看起来有点迷糊？其实就是把异步请求抽象成action creator，然后放到了redux的代码中。<br>试想一下，如果没有这种方式，你会怎么去处理异步请求？<br>是不是会在组件或者页面中去发异步请求，然后在回调函数中dispatch(action)更新state。本质上也没太大区别。但是好处却是很明显的。</p><p>稍微提一下，如果我们可以使用async/await的话，异步action creator可以长得和同步action creator差不多。</p><p>action就是一坨数据，它并没有告诉Redux应该怎么去更新state，接下来介绍的reducer就是负责如何更新state这个工作的。</p><h5 id="reducer是什么鬼？"><a href="#reducer是什么鬼？" class="headerlink" title="reducer是什么鬼？"></a>reducer是什么鬼？</h5><p>action本身没有任何意义，就是一个描述性的普通对象。它并没有说明这个数据应该如何更新state。<br>具体如何更新state，是由reducer决定的。reducer的核心就一行代码：(state, action) =&gt; newstate<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"><span class="comment">// Action Handlers</span></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> ACTION_HANDLERS = &#123;</span><br><span class="line">    [UPDATE_ARTICLES_DETAIL]: <span class="function">(<span class="params">articles, action</span>) =&gt;</span> articles,</span><br><span class="line">    [UPDATE_ARTICLES_LIST]: <span class="function">(<span class="params">articles, action</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> payload = action.payload,</span><br><span class="line">            normalizeData = payload.normalizeData,</span><br><span class="line">            list = articles.list.concat(normalizeData.result),</span><br><span class="line">            listLastkey = payload.listLastkey;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新articles.list字段和articles.lastkey字段</span></span><br><span class="line">        <span class="comment">// 这儿为什么不是state，而是articles呢？留着后文介绍</span></span><br><span class="line">        <span class="keyword">return</span> updateObject(articles, &#123;</span><br><span class="line">            list,</span><br><span class="line">            listLastkey</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">articlesReducer</span>(<span class="params">articles = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    list: [],</span></span></span><br><span class="line"><span class="function"><span class="params">    listLastkey: <span class="number">0</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> handler = ACTION_HANDLERS[action.type]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handler ? handler(articles, action) : articles</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reducer函数应该是纯函数，它要保证：只要传入参数相同，那么返回的新state就一定相同。<br>所以永远不要再reducer中做如下操作：<br>✦ 修改传入的state参数<br>✦ 执行有副作用的操作，比如API请求，路由跳转等<br>✦ 调用非纯函数，比如Math.random()或Date.now()</p><p>而一旦state变得复杂、层级较多的时候，如何设计reducer就是一个比较复杂的话题了。<br>关于如何设计state？如何分拆reducer？reducer之间如何共享数据？以及如何重构reducer的代码？可以移步另一篇博客：如何最佳实践的设计reducer。</p><p>那么，回到最初的话题，引入Redux到我们的应用中，到底有什么好处？我们为什么需要一个专门的状态管理器？</p><h3 id="为啥要使用redux？"><a href="#为啥要使用redux？" class="headerlink" title="为啥要使用redux？"></a>为啥要使用redux？</h3><p>早些时候，前端并没有这么复杂，几乎不怎么涉及数据管理。<br>随着前端的发展，前端也开始引入MVC之类的架构，对数据、视图、逻辑进行拆分处理。为了保持数据和视图的同步，我们会频繁的操作DOM元素。简直是噩梦。<br>而后KnockoutJS，angularJS等出现了，他们都支持数据绑定，终于让开发可以不在频繁的操作DOM，而是仅仅修改数据，然后自动同步到view。<br>但这还不够彻底，数据仍然是分散的。我们会在controller中写很多操作数据、操作视图的代码，甚至存在冗余数据，想要修改、更新、同步的话，有很大的隐患。<br>Redux的出现，提供了对数据的集中管理，让单向数据流成为了可能。<br>另外，Redux还让前后端彻底分离变成了可能，这一点也有极大的意义。</p><h3 id="Redux的数据流"><a href="#Redux的数据流" class="headerlink" title="Redux的数据流"></a>Redux的数据流</h3><p>Redux通过一些限制告诉你：数据只能保存在我这儿，别想太分散！想要修改数据？告诉我一个带新数据的action，我会通过reducer自动修改，然后返回修改后的数据给你！<br>是的，redux很想“数据库”，数据被集中存储，并且只能通过“预先定义的action操作”来修改。</p><p>更厉害的是，配上支持数据绑定的视图库，你会发现一个神奇的事情：<br>之前我们是面向view和controller编程，随着项目的复杂，代码会彼此影响而且数据会分散到各处。<br>而引入redux之后，我们单纯的面向数据编程即可，我们在Redux中统一的管理数据，然后数据变换会反映到view上，而数据上的交互，本质上也是触发了Redux中的action。如下图</p><h3 id="Redux数据流"><a href="#Redux数据流" class="headerlink" title="Redux数据流"></a>Redux数据流</h3><p>所以，设计redux程序的时候，提前想清楚state的结构尤其重要，就好比设计数据库表结构之于后台。</p><p>服务器渲染让前后端彻底分离成为了可能<br>上图也可以看出，Redux构建出一份单向数据流。这让服务端渲染变成了可能，而这个特性，让前后端彻底分离变成了可能，还不用担心SEO的问题。<br>想当初，为了解决前后端分离的问题，大家费尽心思，奈何进展甚微，淘宝甚至提出中途岛midway项目，通过中间搭建由前端维护的Nodejs服务器来实现简单的渲染然后返回HTML，但其实这个Nodejs服务器一点都不简单，需要考虑太多东西，比如安全、性能、缓存等。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Redux主要用于对数据进行集中管理，并且让整个应用的数据流变得清晰。让应用开发更流畅，数据管理更有效。有了Redux，开发者们慢慢的转化为面向数据编程，而不再是频繁的操作DOM，维护越来越复杂的controller逻辑。<br>简单来说，Redux的东西不多，更重要的是理解它的思路：<br>✦ 将整个应用的state储存在唯一的store对象中。<br>✦ state只能通过触发action来修改，其中action就是一个描述性的普通对象。<br>✦ 使用reducer来描述action如何改变state。<br>✦ Redux的单向数据流，可以实现服务端渲染，让前后端彻底分离成为可能，这个有里程碑的意义。<br>✦ Redux非常适合复杂的应用，尤其是多交互、多数据源的应用。</p><p>还是那句话，Redux将数据管理拆得很细，所以会有很多新东西去了解，但其实只要了解它的思想，其他的就很顺其自然了。</p><p>作者：齐修_qixiuss<br>链接：<a href="https://www.jianshu.com/p/d296a8c34936" target="_blank" rel="noopener">https://www.jianshu.com/p/d296a8c34936</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Redux由Flux演变而来，提供几个简单的API来实现状态管理，所谓状态指的是应用数据，所以，Redux本质上是用来管理数据的。&lt;br&gt;进一步，Redux配合支持数据绑定的视图库使用，就可以将应用状态和视图一一对应，开发者不需要再去关心DOM操作，只关心如何组织数据即可。
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://ru23.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Module not found: Error: Cannot resolve module &#39;fs&#39; in</title>
    <link href="https://ru23.com/note/9782d4af.html"/>
    <id>https://ru23.com/note/9782d4af.html</id>
    <published>2018-09-22T10:32:13.000Z</published>
    <updated>2018-10-27T09:27:15.449Z</updated>
    
    <content type="html"><![CDATA[<p>控制台报错：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">However I see <span class="keyword">this</span> error</span><br><span class="line"></span><br><span class="line">./~<span class="regexp">/adal-node/</span>lib/util.js</span><br><span class="line">Module not found: <span class="built_in">Error</span>: Cannot resolve <span class="built_in">module</span> <span class="string">'fs'</span> <span class="keyword">in</span> /Users/luis.valencia/Documents/GraphSamples/Sample1/node_modules/adal-node/lib</span><br><span class="line">resolve <span class="built_in">module</span> fs <span class="keyword">in</span> /Users/luis.valencia/Documents/GraphSamples/Sample1/node_modules/adal-node/lib</span><br><span class="line">  looking <span class="keyword">for</span> modules <span class="keyword">in</span> /Users/luis.valencia/Documents/GraphSamples/Sample1/node_modules/adal-node/lib</span><br><span class="line">    /Users/luis.valencia/Documents/GraphSamples/Sample1/node_modules/adal-node/lib/fs doesn<span class="string">'t exist (module as directory)</span></span><br><span class="line"><span class="string">    resolve '</span>file<span class="string">' fs in /Users/luis.valencia/Documents/GraphSamples/Sample1/node_modules/adal-node/lib</span></span><br><span class="line"><span class="string">      resolve file</span></span><br></pre></td></tr></table></figure></p><p>解决方案：</p><p>add this to webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target: <span class="string">'node'</span>,</span><br></pre></td></tr></table></figure></p><p>原文：<a href="https://stackoverflow.com/questions/40541044/module-not-found-error-cannot-resolve-module-fs-in" target="_blank" rel="noopener">https://stackoverflow.com/questions/40541044/module-not-found-error-cannot-resolve-module-fs-in</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;控制台报错：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="https://ru23.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JS 数组克隆方法总结</title>
    <link href="https://ru23.com/note/207f8587.html"/>
    <id>https://ru23.com/note/207f8587.html</id>
    <published>2018-09-21T11:22:37.000Z</published>
    <updated>2018-10-27T09:27:15.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5-方法总结"><a href="#ES5-方法总结" class="headerlink" title="ES5 方法总结"></a>ES5 方法总结</h2><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">434</span>,<span class="number">43</span>]</span><br><span class="line"><span class="keyword">let</span> arr1= arr.slice()</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr,arr1) <span class="comment">// [ 2, 4, 434, 43 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 === arr) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,l=<span class="keyword">this</span>.length;i&lt;l;i++) &#123;</span><br><span class="line">        a.push(<span class="keyword">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'aaa'</span>,<span class="string">'bbb'</span>,<span class="string">'ccc'</span>,<span class="string">'wwwww'</span>,<span class="string">'ddd'</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.clone()</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"><span class="built_in">console</span>.log( arr2 === arr )</span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.clone=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> [].concat(<span class="keyword">this</span>); </span><br><span class="line">    <span class="comment">//或者 return this.concat();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'aaa'</span>,<span class="string">'asss'</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.clone()</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(arr,arr1)</span><br></pre></td></tr></table></figure><h2 id="ES6-方法总结"><a href="#ES6-方法总结" class="headerlink" title="ES6 方法总结"></a>ES6 方法总结</h2><h4 id="Object-assign-浅复制，也可以实现数组的克隆"><a href="#Object-assign-浅复制，也可以实现数组的克隆" class="headerlink" title="Object.assign() 浅复制，也可以实现数组的克隆"></a>Object.assign() 浅复制，也可以实现数组的克隆</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'sdsd'</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="number">123</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = []</span><br><span class="line"><span class="built_in">Object</span>.assign(arr1,arr)</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">'aaaa'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr,arr1) <span class="comment">// [ 'sdsd', 'aaaa', 123, 123 ] [ 'sdsd', 123, 123, 123 ]</span></span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line">a1[<span class="number">0</span>] = <span class="string">'aaa'</span></span><br><span class="line"><span class="built_in">console</span>.log(a1,a2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES5-方法总结&quot;&gt;&lt;a href=&quot;#ES5-方法总结&quot; class=&quot;headerlink&quot; title=&quot;ES5 方法总结&quot;&gt;&lt;/a&gt;ES5 方法总结&lt;/h2&gt;&lt;h4 id=&quot;slice&quot;&gt;&lt;a href=&quot;#slice&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="前端" scheme="https://ru23.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js代码片段" scheme="https://ru23.com/tags/js%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
</feed>
